Typescript
-Dynamic vs Statically Typed Programming Languages
-Dynamically typed assume types based on methods, forgiving, great for web browser object model.
-Statically typed are more rigorous and have to be declared, rigid, promotes stability and maintainability

function sayQuack(target: Quackable) {
  target.quake(); // misspelled method will be caught before code runs
}

-Javascript is a dynamically typed language. Because Javascript has been asked to do more these days than what it was originally intended for, we need to incorporate static typing using TypeScript.
-TypeScript is a superset of Javascript, adding more features to JS. 
-To install TypeScript CLI, (typescriptlang.org) official website for TypeScript. (node will have to be installed first, you can use nvm node version manager to install the latest version of node).
-npm install typescript --global
-tsc to verify - typescript compiler 
-VSCode *free*
-Webstorm *recommended*

Creating a Typescript Project
-Goal: compile a typescript file into a javascript file to run it on the browser
-if using VSCode, set up Live Server extension and HTML Snippets extension, JS-CSS-HTML Formatter, VScode icons, (recommended extensions, optional)
-create index.html file
-create app.ts file
-tsc ./app.ts
-tsc -w ./app.ts (watches file and compiles it)
-tsconfig.json file configures the typescript configurations
-tsc -w watches all the files


ES6 New Features
ECMA 6
-1995: Javascript created
-1996 - ECMAScript 1 (European Computer Manufacturing Association)
2009 - ECMAScript 5 (array methods)
2015 - ECMAScript 6

var const let
-var has been used since the beginning to define a variable
-const keyword: you define a variable with a const keyword when you don't want its value to be changed, i.e. a constant. If you try to change the value you will get an Uncaught TypeError: Assignment to constant variable. 
-var keyword: See example
var name = 'vic';

function createName(fName, lName) {
  name = fName + " " + lName'
  console.log(name);
}

console.log(name);
createName('someone','else');
-var keyword creates a variable in the global scope and can mess with your program if you use similar names in your functions.
-You can fix this problem by using const. Seeexample below.
const name = 'vic';

function createName(fName, lName) {
  const name = fName + " " + lName'
  console.log(name);
}

console.log(name);
createName('someone','else');


-Note: const keyword can be used with arrays an objects, it doesn't stop us from modifying the properties of complex objects, but it will stop us from assigning it to a new array/object, you can modify but not reassign to a new literal.

-let keyword: When you declare a variable outstide of a code block within a function, it is called a global variable. The let keyword allows you to declare variables that are scoped to their local code block.
Difference with var:
if(true) {
  let x = 10;
}
console.log(x) // will give error sincec it is outside of the code block that x was defined in.

const buttons = document.getElementsByTagName("button");

for(let i=0; i<buttons.length; i+) {
  const button = buttons[i];
  button.addEventListener("click", function() {
  alert("Button " + i + "Pressed");
  })
} 

const should be the first option when declarin your variables, after that use let if you want to reassign the value later. The usage of var is not recommended anymore.

Template Strings in ES6
-Template strings use backticks ``.
`${variables}` are declared with a money sign and curly braces.
See example:
function print(name, age, profession, gender) {
  document.write(`Name: ${name} <br />
                  Age: ${age} <br />
                  Profession: ${profession} <br/>
                  Gender: ${gender}`
}
-This avoids having to use document.write to print each line.

Spread Operator
let one = ['Person1', '29', 'programmer', 'coding python'];
let two = ['Person2', '22', 'athlete', 'playing football'];
let three = ['Person3', '21', 'sportsman', 'playing hockey']
let four = ['Person4', '30', 'engineer', 'computing software']
let all = [...one, ...two, ...three, ...four]
console.log(all); // You will get all the values from all the arrays spread out in the 'all' array.

Maps
let all = new Map();
person.set('name1','Person1');
person.set('name2','Person2');
person.set('name3','Person3');

console.log(person.get('name1')); // gets the value of name1 key
console.log(person.keys()); // gives all the keys as an array
console.log(person.values()); // gives all the values as an array

person.forEach(function (person) {
  console.log(person); 
}
-The above will log each value for each key.
-when defining a new Map() object, you can pass in key value pairs as arrays of an array, separated by commas. Example:
a = new Map ([
 [k,v],
 [k,v],
 [k,v]
])

Introduction to TypeScript
TypeScript Components
-Language => Compiler => Language Service
 -"The compiler performs the type erasure and code transformations that convert your TypeScript code into Javascript. It will emit warnings and errors if it detects problems and can perform additional tasks such as combining the outut into a single file, generating source maps, and more."

What Problem Does TypeScript Solve? 
-Since its first beta release in 1995, JavaScript (or LiveScript as it was known at the time it was released) has spread like wildfire. Nearly every computer in the world has a JavaScript interpreter installed. Although it is perceived as a browser-based scripting language, JavaScript has been running on web servers since its inception, supported on Netscape Enterprise Server, IIS (since 1996), and recently on Node. JavaScript can even be used to write native applications on operating systems such as Windows 8 and Firefox OS.
-Despite its popularity, it hasn't received much respect from develoeprs-possibly because it contains many snares and traps that can entangle a large program. If you are a professional programmer working with large applications written in JavaScript, you will almost certainly have rubbed up against problems once your program chalked up a few thousand lines. You may have experienced naming problems, substandard programming tools, complex modularization, unfamiliar prototypal inheritance that makes it hard to re-use common design patterns easily, and difficulty keeping a readable and maintainable code base. These are the problems that TypeScript solves.
-Because Javascript has a C-like syntax, it loks familiar to a great many programmers, which is one of Javascript's key strengths, but it also is the cause of a number of surprises, especially in the following areas: Prototypal inheritance, Equality and type juggling, Management of modules, Scope, Lack of types

Using WebStorm & TypeScript
-Project: index.html, tsconfig.json, app.ts
-New > Typescript File
-Example:
let radius = 4; // radius is declared as a number type
radius = "String"; // will show error because not the same type.

-You can use the type annotation to specify a type
<var><identifier><:><type-annotiation>=<value>;
<var><identifier><:><type-annotiation>;
<var><identifier>=<value>;
-Example:
let name: string = "Victor"; // if you did let name:string = 4, you will get an error because it is expecting a string type.

-Example 2:
let name: any = ['Victor',2,true]; // the any type is dynamic and allows you to use any type, or you can use the array type.
let names: array = ['1', '2', 3, true] 
let names: string[] = ['Someone', 'Another1', 'Another2', 'Another3'] // you can make sure an array contains a specific type-
-boolean[], number[], string[]


