//+------------------------------------------------------------------+
//|                                                       Vic & Nana |
//|                            Copyright 2024-2025, Vic & Nancy, LLC |
//|                                 http://www.github.com/victorekpo |
//+------------------------------------------------------------------+
#property copyright   "2024-2025, Vic & Nancy"
#property link        "http://www.github.com/victorekpo"
#property description "Million Dollar BOT for Step Index"

//--- Declare Inputs
input int maxBuyOrders = 10;
input int maxSellOrders = 10;
input int maxReverseSellOrders = 10;
input int maxReverseBuyOrders = 10;
input double maxLotSize = 1000;
input bool enableHighLotSize = false;
input bool forceBuyOrders = false;
input bool forceSellOrders = false;
input int forceGap = 7;

//---  Declare Libraries
#include <Trade\PositionInfo.mqh>
#include <Trade\Trade.mqh>
#include <mq4_mq5_bridge.mqh>

CPositionInfo  m_position;                   // trade position object
CTrade         m_trade;                      // trading object
CPositionInfo position;

int stopLossPoints = 4; // Stop loss in points
int MAXSteps;
int MAXOrders = 1;

#define MILLIONDOLLARBOT  202401134


//---  Declare variables
// Set Handles
int MAHandle_240_200 = INVALID_HANDLE;
int MAHandle_240_50 = INVALID_HANDLE;
int MAHandle_240_20 = INVALID_HANDLE;
int MAHandle_240 = INVALID_HANDLE;
int MAHandle_60_200 = INVALID_HANDLE;
int MAHandle_60_50 = INVALID_HANDLE;
int MAHandle_60_20 = INVALID_HANDLE;
int MAHandle_60 = INVALID_HANDLE;
int MAHandle_30_200 = INVALID_HANDLE;
int MAHandle_30_50 = INVALID_HANDLE;
int MAHandle_30_20 = INVALID_HANDLE;
int MAHandle_30 = INVALID_HANDLE;
int MAHandle_15_200 = INVALID_HANDLE;
int MAHandle_15_50 = INVALID_HANDLE;
int MAHandle_15_20 = INVALID_HANDLE;
int MAHandle_15 = INVALID_HANDLE;
int MAHandle_5_200 = INVALID_HANDLE;
int MAHandle_5 = INVALID_HANDLE;
int MAHandle_5_20 = INVALID_HANDLE;
int MAHandle_5_9 = INVALID_HANDLE;
int MAHandle_1_9 = INVALID_HANDLE;
int MAHandle_1_20 = INVALID_HANDLE;
int MAHandle_1_50 = INVALID_HANDLE;
int MAHandle_1_200 = INVALID_HANDLE;
int MAHandle_240_500 = INVALID_HANDLE;
int MAHandle_60_500 = INVALID_HANDLE;
int MAHandle_30_500 = INVALID_HANDLE;
int MAHandle_15_500 = INVALID_HANDLE;
int MAHandle_5_500 = INVALID_HANDLE;
int MAHandle_1_500 = INVALID_HANDLE;
int RSIHandle_1_14 = INVALID_HANDLE;
int RSIHandle_5_14 = INVALID_HANDLE;
int RSIHandle_15_14 = INVALID_HANDLE;
int RSIHandle_30_14 = INVALID_HANDLE;
int RSIHandle_60_14 = INVALID_HANDLE;
int RSIHandle_240_14 = INVALID_HANDLE;
int RSIHandle_999_14 = INVALID_HANDLE;
int RSIHandle_9997_14 = INVALID_HANDLE;
int RSIHandle_99930_14 = INVALID_HANDLE;
int BearsPowerHandle_1 = INVALID_HANDLE;
int BullsPowerHandle_1 = INVALID_HANDLE;
int BearsPowerHandle_5 = INVALID_HANDLE;
int BullsPowerHandle_5 = INVALID_HANDLE;
int BearsPowerHandle_15 = INVALID_HANDLE;
int BullsPowerHandle_15 = INVALID_HANDLE;
int lowTakeProfit;
int gapCheck;
int accountMarg;
int loopAccountMarg;
int orderNotify;
double symbolCheck;
bool rsiTo30MAbove = false;
int maxQuick = 3;
int countReversals=9999;
int countOccurenceBuy=0;
int countOccurenceSell=0;

int xnotify;
int maxLimits;
int maxLoop = 1;
int reverseCount[500];

bool shouldReverseBuy, shouldReverseSell;
double rsiVelocity,priceVelocity;
double lotOrder = maxLotSize;
double calcProfitCache = 0;
double curBuys[500];
double curSells[500];
double lowestProf[500,2];
double highestProf[500];
double orderTime[500];
double priceHistory[61];
double priceHistoryTrend[101,2];
double priceHistoryTrend2[501,2];
double rsi1History[501,2];
double rsi5History[11,2];
double stochastic1History[11,2];
double stochastic5History[11,2];
double SYMBOL_BUY_Profit;
double SYMBOL_BUY_HODL_Profit;
double SYMBOL_SELL_Profit;
double SYMBOL_SELL_HODL_Profit;
double currentRSI_1_14, currentRSI_5_14;

//Regular Variables
string currentMarket;
string previousMarket;
string MAStatus_15_200, MAStatus_15, MAStatus_5, MAStatus_1_9, MAStatus_1_50;
string MAStatusLast_15_200, MAStatusLast_15, MAStatusLast_5, MAStatusLast_1_9, MAStatusLast_1_50;
string MASignal_15_200, MASignal_15, MASignal_5, MASignal_1_9, MASignal_1_50;
bool MAReachUp_15_200, MAReachUp_15, MAReachUp_5, MAReachUp_1_9, MAReachUp_1_50;
bool MACross_15_200, MACross_15, MACross_5, MACross_1_9, MACross_1_20;
bool MAReachDown_15_200, MAReachDown_15, MAReachDown_5, MAReachDown_1_9, MAReachDown_1_50;
int orderPlaced, RandomNumber, steps, buycount, sellcount;
int num=1;
int tickCount=0;
double currentPrice,
       highestrsi,
       lowestrsi,
       highestprice,
       lowestprice,
       howClosetoLow,
       howClosetoHigh,
       howClosetoLow_5,
       howClosetoHigh_5,
       howClosetoLow_15,
       howClosetoHigh_15,
       howClosetoLow_30,
       howClosetoHigh_30,
       howClosetoLow_60,
       howClosetoHigh_60,
       howClosetoLow_240,
       howClosetoHigh_240,
       howClosetoLow_999,
       howClosetoHigh_999,
       howClosetoLow_1_10,
       howClosetoHigh_1_10,
       howClosetoLow_5_10,
       howClosetoHigh_5_10,
       howClosetoLow_15_10,
       howClosetoHigh_15_10,
       howClosetoLow_30_10,
       howClosetoHigh_30_10,
       howClosetoLow_60_10,
       howClosetoHigh_60_10,
       howClosetoLow_240_10,
       howClosetoHigh_240_10,
       howClosetoLow_999_10,
       howClosetoHigh_999_10,
       howClose,
       howClose_5,
       howClose_15,
       howClose_30,
       howClose_60,
       howClose_240,
       howClose_999,
       currentBearP_1, currentBullP_1,
       prevBearP_1,prevBullP_1,
       currentBearP_5, currentBullP_5,
       prevBearP_5,prevBullP_5,
       currentBearP_15, currentBullP_15,
       prevBearP_15,prevBullP_15,
       currentLow_M1, currentLow_M5, currentLow_M15, currentLow_M30, currentLow_H1,
       currentHigh_M1, currentHigh_M5, currentHigh_M15, currentHigh_M30, currentHigh_H1,
       priceHighest_M1, priceHighest_M1_75, priceHighest_M1_37, priceLowest_M1, priceLowest_M1_75, priceLowest_M1_37,
       priceHighest_M5, priceLowest_M5, priceHighest_M5_75, priceHighest_M5_37, priceLowest_M5_75, priceLowest_M5_37,
       priceHighest_M15, priceLowest_M15,
       priceHighest_M30, priceLowest_M30,
       priceHighest_H1, priceLowest_H1,
       priceLast,
       lowLast_M1, lowLast_M5, lowLast_M15, lowLast_M30, lowLast_H1,
       highLast_M1, highLast_M5, highLast_M15, highLast_M30, highLast_H1,
       highestProfit,notifyCount,highestPrice3Day,highestPrice3Day_diff,
       lowestPrice3Day,lowestPrice3Day_diff,lowestPrice3DayLast;
double lowestProfit = -9999;
double takeProfit = 3;
long volumeLast,barSize,barSizeLast;
int orderCount;
bool continueOrders = true;
bool takeMoreOrders = false;
int lastBull1,lastBull2,lastBull3,lastBull4,lastBull5,lastBull6,lastBull7,lastBull8,lastBull9,lastBull10;
bool isPriceGoingUp, isPriceGoingUpx2;
bool isPriceGoingDown, isPriceGoingDownx2;
bool canTakeMoreBuyOrders, canTakeMoreSellOrders;
double lastPriceBuyOrder, lastPriceSellOrder;
double lastPriceBuyStopOrder, lastPriceSellStopOrder;
double lastPriceBuyLimitOrder, lastPriceSellLimitOrder;
double priceDiff5Min, priceDiff15Min, priceDiff30Min, priceDiff1Hr, priceDiff4Hr, priceDiff1Day;
bool isMarketRanging, isMarketTrending, isMarketTrendingUp, isMarketTrendingDown;
MqlDateTime clock;
int orderWaitTime = 4;
bool isMA200Up;
int percClose_999;
int percClose_240;
int percClose_60;
int percClose_30;
int percClose_15;
int percClose_5;
int percClose;
bool isBoomTrendingDown;
bool shouldAllowFromRSI = true;
bool shouldAllowFromRSI5 = true;
bool shouldAllowFromRSI15 = true;
bool shouldAllowFromRSI30 = true;
bool shouldAllowFromRSI60 = true;
bool shouldAllowFromRSI240 = true;
bool shouldAllowFromBEAR = true;
bool rsiBelow30 = false;
bool rsiBelow20 = false;
bool rsi5Below30 = false;
bool rsi5Below20 = false;
bool rsi15Below30 = false;
bool rsi30Below30 = false;
bool rsi60Below30 = false;
bool rsi240Below30 = false;


//---  Declare functions


//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
int OnInit()
  {
   MAHandle_240_200 = iMA(NULL, PERIOD_H4, 200, 0, MODE_SMA, PRICE_CLOSE);
   MAHandle_240_50 = iMA(NULL, PERIOD_H4, 50, 0, MODE_SMA, PRICE_CLOSE);
   MAHandle_240_20 = iMA(NULL, PERIOD_H4, 20, 0, MODE_SMA, PRICE_CLOSE);
   MAHandle_240 = iMA(NULL, PERIOD_H4, 9, 0, MODE_SMA, PRICE_CLOSE);
   MAHandle_60_200 = iMA(NULL, PERIOD_H1, 200, 0, MODE_SMA, PRICE_CLOSE);
   MAHandle_60_50 = iMA(NULL, PERIOD_H1, 50, 0, MODE_SMA, PRICE_CLOSE);
   MAHandle_60_20 = iMA(NULL, PERIOD_H1, 20, 0, MODE_SMA, PRICE_CLOSE);
   MAHandle_60 = iMA(NULL, PERIOD_H1, 9, 0, MODE_SMA, PRICE_CLOSE);
   MAHandle_30_200 = iMA(NULL, PERIOD_M30, 200, 0, MODE_SMA, PRICE_CLOSE);
   MAHandle_30_50 = iMA(NULL, PERIOD_M30, 50, 0, MODE_SMA, PRICE_CLOSE);
   MAHandle_30_20 = iMA(NULL, PERIOD_M30, 20, 0, MODE_SMA, PRICE_CLOSE);
   MAHandle_30 = iMA(NULL, PERIOD_M30, 9, 0, MODE_SMA, PRICE_CLOSE);
   MAHandle_15_200 = iMA(NULL, PERIOD_M15, 200, 0, MODE_SMA, PRICE_CLOSE);
   MAHandle_15_50 = iMA(NULL, PERIOD_M15, 50, 0, MODE_SMA, PRICE_CLOSE);
   MAHandle_15_20 = iMA(NULL, PERIOD_M15, 20, 0, MODE_SMA, PRICE_CLOSE);
   MAHandle_15 = iMA(NULL, PERIOD_M15, 9, 0, MODE_SMA, PRICE_CLOSE);
   MAHandle_5_200 = iMA(NULL, PERIOD_M5, 200, 0, MODE_SMA, PRICE_CLOSE);
   MAHandle_5 = iMA(NULL, PERIOD_M5, 50, 0, MODE_SMA, PRICE_CLOSE);
   MAHandle_5_20 = iMA(NULL, PERIOD_M5, 20, 0, MODE_SMA, PRICE_CLOSE);
   MAHandle_5_9 = iMA(NULL, PERIOD_M5, 9, 0, MODE_SMA, PRICE_CLOSE);
   MAHandle_1_9 = iMA(NULL, PERIOD_M1, 9, 0, MODE_SMA, PRICE_CLOSE);
   MAHandle_1_20 = iMA(NULL, PERIOD_M1, 20, 0, MODE_SMA, PRICE_CLOSE);
   MAHandle_1_50 = iMA(NULL, PERIOD_M1, 50, 0, MODE_SMA, PRICE_CLOSE);
   MAHandle_1_200 = iMA(NULL, PERIOD_M1, 200, 0, MODE_SMA, PRICE_CLOSE);
   MAHandle_1_500 = iMA(NULL, PERIOD_M1, 500, 0, MODE_SMA, PRICE_CLOSE);
   MAHandle_5_500 = iMA(NULL, PERIOD_M5, 500, 0, MODE_SMA, PRICE_CLOSE);
   MAHandle_15_500 = iMA(NULL, PERIOD_M15, 500, 0, MODE_SMA, PRICE_CLOSE);
   MAHandle_30_500 = iMA(NULL, PERIOD_M30, 500, 0, MODE_SMA, PRICE_CLOSE);
   MAHandle_60_500 = iMA(NULL, PERIOD_H1, 500, 0, MODE_SMA, PRICE_CLOSE);
   MAHandle_240_500 = iMA(NULL, PERIOD_H4, 500, 0, MODE_SMA, PRICE_CLOSE);
   RSIHandle_1_14 = iRSI(NULL, PERIOD_M1, 14, PRICE_CLOSE);
   RSIHandle_5_14 = iRSI(NULL, PERIOD_M5, 14, PRICE_CLOSE);
   RSIHandle_15_14 = iRSI(NULL, PERIOD_M15, 14, PRICE_CLOSE);
   RSIHandle_30_14 = iRSI(NULL, PERIOD_M30, 14, PRICE_CLOSE);
   RSIHandle_60_14 = iRSI(NULL, PERIOD_H1, 14, PRICE_CLOSE);
   RSIHandle_240_14 = iRSI(NULL, PERIOD_H4, 14, PRICE_CLOSE);
   RSIHandle_999_14 = iRSI(NULL, PERIOD_D1, 14, PRICE_CLOSE);
   RSIHandle_9997_14 = iRSI(NULL, PERIOD_W1, 14, PRICE_CLOSE);
   RSIHandle_99930_14 = iRSI(NULL, PERIOD_MN1, 14, PRICE_CLOSE);
   BearsPowerHandle_1 = iBearsPower(NULL, PERIOD_M1, 13);
   BullsPowerHandle_1 = iBullsPower(NULL, PERIOD_M1, 13);
   BearsPowerHandle_5 = iBearsPower(NULL, PERIOD_M5, 13);
   BullsPowerHandle_5 = iBullsPower(NULL, PERIOD_M5, 13);
   BearsPowerHandle_15 = iBearsPower(NULL, PERIOD_M15, 13);
   BullsPowerHandle_15 = iBullsPower(NULL, PERIOD_M15, 13);

   if(
      MAHandle_240_200 == INVALID_HANDLE || MAHandle_240_50 == INVALID_HANDLE || MAHandle_240_20 == INVALID_HANDLE || MAHandle_240 == INVALID_HANDLE
      || MAHandle_60_200 == INVALID_HANDLE || MAHandle_60_50 == INVALID_HANDLE || MAHandle_60_20 == INVALID_HANDLE || MAHandle_60 == INVALID_HANDLE
      || MAHandle_30_200 == INVALID_HANDLE || MAHandle_30_50 == INVALID_HANDLE || MAHandle_30_20 == INVALID_HANDLE || MAHandle_30 == INVALID_HANDLE
      || MAHandle_15_200 == INVALID_HANDLE || MAHandle_15_50 == INVALID_HANDLE || MAHandle_15_20 == INVALID_HANDLE || MAHandle_15 == INVALID_HANDLE
      || MAHandle_5_200 == INVALID_HANDLE || MAHandle_5 == INVALID_HANDLE || MAHandle_5_20 == INVALID_HANDLE || MAHandle_5_9 == INVALID_HANDLE
      || MAHandle_1_200 == INVALID_HANDLE || MAHandle_1_50 == INVALID_HANDLE || MAHandle_1_20 == INVALID_HANDLE || MAHandle_1_9 == INVALID_HANDLE
      || RSIHandle_1_14 == INVALID_HANDLE
   )
     {
      Print("Error creating indicator");
      return(INIT_FAILED);
     }
//--- create timer
   EventSetTimer(1);
//---
   return (INIT_SUCCEEDED);
  }

//+------------------------------------------------------------------+
//| OnTick function                                                  |
//+------------------------------------------------------------------+
void OnTick()
  {

// check bar sizes as well
   Comment("howclose:  L1 ", howClosetoLow, " H1 ", howClosetoHigh, " = ", howClose, "**", " L5 ", howClosetoLow_5, " H5 ", howClosetoHigh_5, " = ", howClose_5, "**", " L15 ", howClosetoLow_15, " H15 ", howClosetoHigh_15, " = ", howClose_15, "**", " L30 ", howClosetoLow_30, " H30 ", howClosetoHigh_30,  " = ", howClose_30, "**"," L240 ", howClosetoLow_240, " H240 ", howClosetoHigh_240,  " = ", howClose_240, "**"," L999 ", howClosetoLow_999, " H999 ",howClosetoHigh_999,  " = ", howClose_999, "**");
//Comment("recentprofit ", calculateSymbolProfitRecent(), " shouldBEAR: ", shouldAllowFromBEAR, " shouldRSI: ", shouldAllowFromRSI, " shouldRSI_5: ", shouldAllowFromRSI5, " shouldRSI_15: ", shouldAllowFromRSI15, " shouldRSI_30: ", shouldAllowFromRSI30, " shouldRSI_60: ", shouldAllowFromRSI60, " shouldRSI_240: ", shouldAllowFromRSI240, " bar size 15 ", getBarSize(15), " bar size 30 ", getBarSize(30), " bar size 60 ", getBarSize(60), " bar size 4hr ", getBarSize(240), " bar size 999 ", getBarSize(999), " how_close_999_h_l ", howClosetoHigh_999, " / ", howClosetoLow_999, " how_close_240 ", howClosetoHigh_240, " / ", howClosetoLow_240, " how_close_60 ", howClosetoHigh_60, " / ", howClosetoLow_60, " how_close ", howClosetoHigh, " / ", howClosetoLow, " MAXOrders ", MAXOrders, " percClose 999 ",percClose_999, " percClose 240 ",percClose_240, " percClose 60 ",percClose_60, " percClose_30 ", percClose_30,  " percClose_15 ", percClose_15, " percClose_5 ", percClose_5, " percClose ", percClose, " isTrend? ", isBoomTrendingDown);

// Check Levels First
   CheckLevels();
   calculateBuyOrders();
   calculateSellOrders();
   closeAllSymbolsInProfit();

   CheckForOpen();
   CheckForOpenv2();
   CheckForOpenv3();
   CheckForOpenv4();
   CheckForOpenv5();
   CheckForOpenv6();
   CheckForOpenv7();
   CheckForOpenv8();
   CheckForOpenv9();
   if(AccountInfoDouble(ACCOUNT_EQUITY) > 300)
     {
      CheckForOpenBuy();
      CheckForOpenBuy2();
      CheckForOpenBuy3();
      CheckForOpenBuy4();
      CheckForOpenBuy5();
     }
   if(AccountInfoDouble(ACCOUNT_EQUITY) > 100)
     {
      CheckForOpen300();
     }
  }
//+------------------------------------------------------------------+


//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void CheckForOpen300()
  {
// Alert("here");
   int maxOrder = 1;
   double myLot = 1;
   if(
      steps < 350
      && shouldAllowFromRSI && shouldAllowFromRSI5
//&& shouldAllowFromRSI15 && shouldAllowFromRSI30 && shouldAllowFromRSI60
      && (getMA_1_50() - currentPrice > 2 || getMA_1_200() > currentPrice || (isThisBarBEARISH(240) && isThisBarBEARISH(60) && isThisBarBEARISH(30) && isThisBarBEARISH(15) && getMA_5_20() > currentPrice && getMA_1_20() > currentPrice && getMA_1_9() > currentPrice))
// && (shouldAllowFromRSI60 || (getRSI_240_14() > 35 && getMA_1_200() > currentPrice && getMA_5() > currentPrice && getMA_5_200() > currentPrice && getMA_15_50() > currentPrice && getMA_15_200() > currentPrice && getMA_30_50() > currentPrice) || (isThisBarBEARISH(240) && isThisBarBEARISH(60) && isThisBarBEARISH(30)))
      && isThisBarBEARISH()
      && isThisBarBEARISH(15)
      && isThisBarBEARISH(30)
      && getBarSize(15) > 3
      && (getRSI_1_14() > 45 || (calculateSellOrders() == 0 && AccountInfoDouble(ACCOUNT_EQUITY) > 520 && (getRSI_5_14() > 55 || getMA_15_50() > getHighestPrice(15,1))))
      && (getRSI_1_14() > 35 || (calculateSellOrders() == 0 && AccountInfoDouble(ACCOUNT_EQUITY) > 2000 && (getRSI_15_14() > 55 || getMA_15_50() > getHighestPrice(15,1))))
      && (getMA_30_50() > getHighestPrice(30,2) || isThisBarBEARISH(240))
      && (getMA_5_200() > currentPrice || getMA_15_50() > getMA_15_20() || getMA_1_50() > getMA_1_20())
      && getMA_1_20() - getMA_1_9() > 1 // avoid once it starts crossing
      && getMA_1_20() < getMA_1_50()
      && getMA_1_20() > getHighestPrice(1,1)
//      && getMA_1_20() > getHighestPrice(1,5)
//&& (getMA_15_20() - getMA_15() > 1 || getMA_5_20() - getMA_5_9() > 1) // avoid once it starts crossing
//add  && ((isThisBarBEARISH(999) && getBarSize(999) > 20) || (isThisBarBEARISH(30) && getBarSize(30) > 5) || (isThisBarBEARISH(60) && getBarSize(60) > 5)) // (isThisBarBEARISH(15) && getRSI_1_14() > 60))
//    && (getMA_1_200() > currentPrice || (getMA_5_200() > currentPrice && isThisBarBEARISH(60)) || (isThisBarBEARISH(240) && isThisBarBEARISH(60) && isThisBarBEARISH(30)))
//  && (getMA_240_200() > currentPrice || (isThisBarBEARISH(240) && isThisBarBEARISH(60) && isThisBarBEARISH(30)))
//add  && (getMA_1_200() > currentPrice || getMA_5_200() > currentPrice || getMA_15_200() > currentPrice || getMA_30_200() > currentPrice || getMA_1_50() > currentPrice || getMA_5() > currentPrice || getMA_15_50() > currentPrice || getMA_30_50() > currentPrice)
//add  && (getMA_15() > currentPrice || getMA_15_20() > currentPrice || getMA_15_50() > currentPrice || getMA_15_200() > currentPrice || (isThisBarBEARISH(60) && getBarSize(60) > 5))
// && (isThisBarBEARISH(60) || isThisBarBEARISH(30,1) || isThisBarBEARISH(15,1))
//  && getMA_1_200() - getMA_1_50() > 3
      && (shouldAllowFromBEAR || getMA_1_50() > currentPrice || getMA_1_200() > currentPrice || (isThisBarBEARISH(240) && isThisBarBEARISH(60) && isThisBarBEARISH(30) && isThisBarBEARISH(15) && getMA_5_20() > currentPrice && getMA_1_20() > currentPrice && getMA_1_9() > currentPrice))
      && howClose < 0.5
      && (getRSI_15_14() > 50 || AccountInfoDouble(ACCOUNT_EQUITY) > 520)
      && getRSI_9997_14() > 35
      && getRSI_99930_14() > 35
      && (getRSI_9997_14() > 45 || AccountInfoDouble(ACCOUNT_EQUITY) > 520)
      && (getRSI_99930_14() > 45 || AccountInfoDouble(ACCOUNT_EQUITY) > 520)
      && (getMA_1_500() > getHighestPrice(1,1) || AccountInfoDouble(ACCOUNT_EQUITY) > 2000)
   )
     {

      if(AccountInfoDouble(ACCOUNT_EQUITY) < 500 && maxOrder > 0)
        {
         maxOrder = 1;
        }

      if((calculateSellOrders() < maxOrder || (calculateSymbolProfitRecent() > 0 && maxOrder > 0 && shouldAllowFromRSI && shouldAllowFromRSI5 && getRSI_1_14() > 30 && AccountInfoDouble(ACCOUNT_EQUITY) > 500)) || (calculateNewSELLOrders() < maxOrder && AccountInfoDouble(ACCOUNT_EQUITY) > 500))
        {
         orderPlaced=OrderSend(Symbol(),OP_SELL,myLot,(Ask),3,0,0,"algorithm.V_SELL_300",MILLIONDOLLARBOT,0,Red);
        }
     }

  }

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void OnTimer()
  {
// on every interval, set the previous values
   prevBullP_1 = currentBullP_1;
   prevBearP_1 = currentBearP_1;
   prevBullP_5 = currentBullP_5;
   prevBearP_5 = currentBearP_5;
   prevBullP_15 = currentBullP_15;
   prevBearP_15 = currentBearP_15;
   priceLast=currentPrice;
   lowLast_M1=currentLow_M1;
   lowLast_M5=currentLow_M5;
   lowLast_M15=currentLow_M15;
   lowLast_M30=currentLow_M30;
   lowLast_H1=currentLow_H1;
   highLast_M1=currentHigh_M1;
   highLast_M5=currentHigh_M5;
   highLast_M15=currentHigh_M15;
   highLast_M30=currentHigh_M30;
   highLast_H1=currentHigh_H1;
   previousMarket=currentMarket;
   volumeLast=Volume[0];
   barSizeLast=(iOpen(Symbol(),PERIOD_M1,0)-currentPrice)*100;
   lowestPrice3DayLast = lowestPrice3Day_diff;
   MAStatusLast_15_200 = MAStatus_15_200;
   MAStatusLast_15 = MAStatus_15;
   MAStatusLast_5 = MAStatus_5;
   MAStatusLast_1_9 = MAStatus_1_9;
   MAStatusLast_1_50 = MAStatus_1_50;
  } // End OnTimer


//+------------------------------------------------------------------+

//+------------------------------------------------------------------+
//| Check for open order conditions                                  |
//+------------------------------------------------------------------+
void CheckForOpen()
  {
   continueOrders=true;
   getStepsLastBull(1);
   if(steps <= MAXSteps)
     {
      MAXOrders = 5; //defaultMAXOrders;
      orderCount = 1; //defaultOrderCount;
     }

   if(steps > MAXSteps)
     {
      MAXOrders = 1;
      orderCount = 1;
     }

// ********************* BEGIN ORDERS LOGIC *********************
   if(calculateBuyLimitOrders() > 7)
      deletePendingScalp();

// Risk Management
   int accountMarg;
   if(getRSI_1_14() < 70)
      MAXOrders = 10;
   if(getRSI_1_14() < 50)
      MAXOrders = 5;
   if(getRSI_5_14() < 40)
      MAXOrders = 3;
   if(getRSI_5_14() < 35)
      MAXOrders = 2;
   if(getRSI_5_14() < 30 || (percdiff(priceLowest_M1, currentPrice) <= 7))
      MAXOrders = 1;
   if(AccountBalance() > 500)
      accountMarg = 100;
   if(AccountBalance() <= 500)
      accountMarg = 500;
   if(AccountBalance() <= 100)
      accountMarg = 700;
   if(getMA_1_50() > currentPrice)
      deletePendingScalp();


   int percClose_999 = (percdiff_signed(howClosetoLow_999+0.001, howClosetoHigh_999+0.001));
   int percClose_240 = (percdiff_signed(howClosetoLow_240+0.001, howClosetoHigh_240+0.001));
   int percClose_60 = (percdiff_signed(howClosetoLow_60+0.001, howClosetoHigh_60+0.001));
   int percClose = (percdiff_signed(howClosetoLow+0.001, howClosetoHigh+0.001));
// Alert("999 ", percClose_999);
// Alert("240 ", percClose_240);
// Alert("60 ", percClose_60);
// Alert("h/l ", percClose);


   if(AccountInfoDouble(ACCOUNT_MARGIN_LEVEL) > accountMarg || (calculateALLBuyOrders() == 0 && calculateALLSellOrders() == 0)) // make sure we have enough money
     {
      // *** DAY TRADING ***
      //    Alert("here", isThisBarBEARISH(30) && isThisBarBEARISH(60), " ", getMA_5() - currentPrice, " ", getMA_5_20() - currentPrice, " ", getMA_5_20() - getMA_5_9(),  " ",getMA_1_200() - currentPrice );
      if(
         calculateSellOrders() < MAXOrders
         && steps > 2
         && steps <=500
         && isThisBarBEARISH()
         && isThisBarBEARISH(15)
         && getBarSize(15) > 5
         && (isThisBarBEARISH(30))
         && (isThisBarBEARISH(60) && getBarSize(60) > 7)
         && (isThisBarBEARISH(999) || isThisBarBEARISH(240))
         && howClose_5 < 2
         //  && howClose_15 < 3
         //  && howClose_30 < 4
         //  && howClose_60 < 5
         //  && howClose_240 < 5
         && !(getMA_1_500() < getHighestPrice(1,10) && getMA_1_200() < getHighestPrice(1,10) && getRSI_1_14() < 45)
         && (getMA_1_50() > getHighestPrice(1,1) || getMA_30_50() > getHighestPrice(1,1) || AccountInfoDouble(ACCOUNT_EQUITY) > 520)
         && (getMA_5_9() > getHighestPrice(1,1) || getMA_60_50() > getHighestPrice(1,1) || AccountInfoDouble(ACCOUNT_EQUITY) > 1000)
         && (getMA_5_20() > getHighestPrice(1,1) || getMA_60_200() > getHighestPrice(1,1) || AccountInfoDouble(ACCOUNT_EQUITY) > 2000)
         // && howClosetoHigh_999 < 30
         //&& (
         //   (howClosetoHigh_240 < 50 && howClosetoHigh_60 < 50)
         //   || (isThisBarBEARISH(30) && isThisBarBEARISH(60) && getMA_5() - currentPrice > 1 && getMA_5_20() - currentPrice > 1 && getMA_5_20() - getMA_5_9() > 1 && getMA_1_200() - currentPrice > 1)
         //)
         //&& !(howClosetoLow < 1 && steps > 30) // relative low
         //&& howClosetoHigh_240 < 100
         //&& howClosetoHigh_60 < 100
         //&& (
         //   (isThisBarBEARISH(240) && getBarSize(240) > 50)
         //   || (isThisBarBEARISH(60) && getBarSize(60) > 50)
         //)
         &&
         (
            (getRSI_1_14() > 55)
            || (isBoomTrendingDown && steps < 40) //  && getRSI_240_14() > 30 && getRSI_60_14() > 30 && getRSI_30_14() > 30)
         )
         &&
         (
            (getRSI_5_14() > 45
             && getRSI_15_14() > 45)
            || (isBoomTrendingDown)
         )
         // && howClosetoLow_60 > 25 // should be higher?
         && (
            ((howClosetoLow > 20 || howClosetoLow_999 > 3000)// should be higher?
             && howClosetoLow_999 > 1000
             && howClosetoLow_240 > 50) // should be higher?
            || (percClose_999 > 70 && percClose_240 > 30 && getRSI_60_14() > 30 && getRSI_1_14() > 30)
         )
         && (getMA_1_50() > currentPrice || getMA_1_200() > currentPrice || getMA_5() > currentPrice || getMA_5_200() > currentPrice || percClose > 50)
         && !(isThisBarBULLISH(5) && isThisBarBULLISH(15) && isThisBarBULLISH(30) && isThisBarBULLISH(60) && isThisBarBULLISH(240) && getMA_1_20() < currentPrice && getMA_1_50() < currentPrice && getMA_1_200() < currentPrice)
         //&& isThisBarBEARISH(999)
         //&& getBarSize(999) > 20
         //    && getRSI_15_14() > 55
         //  && getRSI_30_14() > 55
         //  && getRSI_60_14() > 55
         && getRSI_9997_14() > 35
         && getRSI_99930_14() > 35
         && (getRSI_9997_14() > 45 || AccountInfoDouble(ACCOUNT_EQUITY) > 520)
         && (getRSI_99930_14() > 45 || AccountInfoDouble(ACCOUNT_EQUITY) > 520)

      )

        {
         MAXOrders = 1;
         double lotSize = 0.5;

         if(getMA_1_20() < currentPrice || getMA_1_50() < currentPrice || getMA_1_200() < currentPrice)
           {
            lotSize = 0.2;
           }

         if(getMA_15_200() < getMA_15_50() && getMA_30_200() < currentPrice && getMA_60_200() < currentPrice && !shouldAllowFromRSI15)
           {
            MAXOrders = 0;
           }

         if(getMA_1_200() < currentPrice && getMA_5_200() < currentPrice && getMA_1_50() < currentPrice)
           {
            MAXOrders = 0;
           }

         if(getMA_30_200() < currentPrice && isThisBarBULLISH(30))
           {
            MAXOrders = 0;
           }

         if(AccountInfoDouble(ACCOUNT_EQUITY) < 500 && MAXOrders > 0)
           {
            MAXOrders = 1;
           }


         for(int i = 0; i < MAXOrders; i++)
           {
            if((calculateSellOrders() < MAXOrders || (calculateSymbolProfitRecent() > 0 && AccountInfoDouble(ACCOUNT_EQUITY) > 500)) && calculateNewSELLOrders() < MAXOrders)
              {
               // SendNotification("SELL Order Opened - Boom 1000");
               if(_Symbol == "Boom 300 Index")
                 {
                  lotSize = 1;
                 }
               if(getRSI_1_14() > 25 && (shouldAllowFromRSI5 || getRSI_9997_14() > 60))
                  orderPlaced=OrderSend(Symbol(),OP_SELL,lotSize,(Ask),3,0,0,"algorithm.V_SELL_TEST",MILLIONDOLLARBOT,0,Red);
              }
           }
         continueOrders = true;
         notifyCount = 0;
         return;
        }

     }
  }
// ********************* END ORDERS LOGIC *********************

//+------------------------------------------------------------------+
//| Check for open order conditions                                  |
//+------------------------------------------------------------------+
void CheckForOpenv2()
  {
   continueOrders=true;
   getStepsLastBull(1);
   if(steps <= MAXSteps)
     {
      MAXOrders = 5; //defaultMAXOrders;
      orderCount = 1; //defaultOrderCount;
     }

   if(steps > MAXSteps)
     {
      MAXOrders = 1;
      orderCount = 1;
     }

// ********************* BEGIN ORDERS LOGIC *********************
   if(calculateBuyLimitOrders() > 7)
      deletePendingScalp();

// Risk Management
   if(getRSI_1_14() < 70)
      MAXOrders = 10;
   if(getRSI_1_14() < 50)
      MAXOrders = 5;
   if(getRSI_5_14() < 40)
      MAXOrders = 3;
   if(getRSI_5_14() < 35)
      MAXOrders = 2;
   if(getRSI_5_14() < 30 || (percdiff(priceLowest_M1, currentPrice) <= 7))
      MAXOrders = 1;
   if(AccountBalance() > 500)
      accountMarg = 100;
   if(AccountBalance() <= 500)
      accountMarg = 500;
   if(AccountBalance() <= 100)
      accountMarg = 700;
   if(getMA_1_50() > currentPrice)
      deletePendingScalp();

   percClose_999 = (percdiff_signed(howClosetoLow_999+0.001, howClosetoHigh_999+0.001));
   percClose_240 = (percdiff_signed(howClosetoLow_240+0.001, howClosetoHigh_240+0.001));
   percClose_60 = (percdiff_signed(howClosetoLow_60+0.001, howClosetoHigh_60+0.001));
   percClose = (percdiff_signed(howClosetoLow+0.001, howClosetoHigh+0.001));
// Alert("999 ", percClose_999);
// Alert("240 ", percClose_240);
// Alert("60 ", percClose_60);
// Alert("h/l ", percClose);

// Alert(steps, " ", steps % 2, " ", getStepsLastBull(1), " ",getBarSize(1));
   if(AccountInfoDouble(ACCOUNT_MARGIN_LEVEL) > accountMarg || (calculateALLBuyOrders() == 0 && calculateALLSellOrders() == 0)) // make sure we have enough money
     {
      // *** DAY TRADING ***
      //    Alert("here", isThisBarBEARISH(30) && isThisBarBEARISH(60), " ", getMA_5() - currentPrice, " ", getMA_5_20() - currentPrice, " ", getMA_5_20() - getMA_5_9(),  " ",getMA_1_200() - currentPrice );
      if(
         calculateSellOrders() < MAXOrders
         && steps > 2
         && steps <=500
         && isThisBarBEARISH()
         && isThisBarBEARISH(5)
         && getBarSize(5) > 3
         // && isThisBarBEARISH(15)
         // && getBarSize(15) > 5
         // && isThisBarBEARISH(30)
         //&& getBarSize(30) > 5
         && isThisBarBEARISH(60)
         && getBarSize(60) > 5
         && isThisBarBEARISH(240)
         && getBarSize(240) > 5
         && isThisBarBEARISH(999)
         && getBarSize(999) > 5
         //&& getMA_240() > getHighestPrice(240, 1)
         //&& getMA_240_20() > getHighestPrice(240, 1)
         //&& getMA_240_50() > getHighestPrice(240, 1)
         //&& getMA_60() - currentPrice > 0.1
         // && getMA_60_20() > getHighestPrice(60, 1)
         // && getMA_60_50() > getHighestPrice(60, 1)
         && getMA_60_200() > getHighestPrice(60, 1)
         && getMA_30_200() > getHighestPrice(30, 1)
         && (getMA_30_20() > getHighestPrice(30, 1) || getMA_30() > getHighestPrice(30, 1))
         && getMA_30_50() > getHighestPrice(30, 1)
         && (getMA_15_20() > getHighestPrice(15, 1) || getMA_15() > getHighestPrice(15, 1))
         && getMA_1_50() > getHighestPrice(1,1)
         && getMA_1_20() > getHighestPrice(1,1)
         //&& getMA_15_50() > getHighestPrice(15, 1)
         //&& (getMA_5_9() > getHighestPrice(5, 1) || getMA_5_20() > getHighestPrice(5, 1))
         //&& getStochastic_Main_15() > 20
         //&& getStochastic_Main_30() > 20
         && getRSI_999_14() > 40
         && getRSI_240_14() > 40
         && getRSI_60_14() > 40
         && getRSI_15_14() > 35
         && getRSI_5_14() > 30
         //   && percClose_5 > -50
         && howClose_5 < 2
         //    && howClose_15 < 3
         //    && howClose_30 < 4
         //    && howClose_60 < 5
         //    && howClose_240 < 5
         && getRSI_9997_14() > 35
         && getRSI_99930_14() > 35
         && (getRSI_9997_14() > 45 || AccountInfoDouble(ACCOUNT_EQUITY) > 520)
         && (getRSI_99930_14() > 45 || AccountInfoDouble(ACCOUNT_EQUITY) > 520)
      )

        {

         if(AccountInfoDouble(ACCOUNT_EQUITY) < 500 && MAXOrders > 0)
           {
            MAXOrders = 1;
           }

         for(int i = 0; i < MAXOrders; i++)
           {
            if((calculateSellOrders() < MAXOrders || (calculateSymbolProfitRecent() > 0 && AccountInfoDouble(ACCOUNT_EQUITY) > 500)) && calculateNewSELLOrders() < MAXOrders)
              {
               double myLot = 0.2;
               if(_Symbol == "Boom 300 Index")
                  myLot = 1;
               if(shouldAllowFromRSI)
                  orderPlaced=OrderSend(Symbol(),OP_SELL,myLot,(Ask),3,0,0,"algorithm.V_SELL_TEST2",MILLIONDOLLARBOT,0,Red);
              }
           }
         continueOrders = true;
         notifyCount = 0;
         return;
        }

     }
  }


//+------------------------------------------------------------------+
//| Check for open order conditions                                  |
//+------------------------------------------------------------------+
void CheckForOpenv3()
  {
   continueOrders=true;
   getStepsLastBull(1);
   if(steps <= MAXSteps)
     {
      MAXOrders = 5; //defaultMAXOrders;
      orderCount = 1; //defaultOrderCount;
     }

   if(steps > MAXSteps)
     {
      MAXOrders = 1;
      orderCount = 1;
     }

// ********************* BEGIN ORDERS LOGIC *********************
   if(calculateBuyLimitOrders() > 7)
      deletePendingScalp();

// Risk Management
   if(getRSI_1_14() < 70)
      MAXOrders = 10;
   if(getRSI_1_14() < 50)
      MAXOrders = 5;
   if(getRSI_5_14() < 40)
      MAXOrders = 3;
   if(getRSI_5_14() < 35)
      MAXOrders = 2;
   if(getRSI_5_14() < 30 || (percdiff(priceLowest_M1, currentPrice) <= 7))
      MAXOrders = 1;
   if(AccountBalance() > 500)
      accountMarg = 100;
   if(AccountBalance() <= 500)
      accountMarg = 500;
   if(AccountBalance() <= 100)
      accountMarg = 700;
   if(getMA_1_50() > currentPrice)
      deletePendingScalp();

   percClose_999 = (percdiff_signed(howClosetoLow_999+0.001, howClosetoHigh_999+0.001));
   percClose_240 = (percdiff_signed(howClosetoLow_240+0.001, howClosetoHigh_240+0.001));
   percClose_60 = (percdiff_signed(howClosetoLow_60+0.001, howClosetoHigh_60+0.001));
   percClose = (percdiff_signed(howClosetoLow+0.001, howClosetoHigh+0.001));
// Alert("999 ", percClose_999);
// Alert("240 ", percClose_240);
// Alert("60 ", percClose_60);
// Alert("h/l ", percClose);

// Alert(steps, " ", steps % 2, " ", getStepsLastBull(1), " ",getBarSize(1));
   if(AccountInfoDouble(ACCOUNT_MARGIN_LEVEL) > accountMarg || (calculateALLBuyOrders() == 0 && calculateALLSellOrders() == 0)) // make sure we have enough money
     {
      // *** DAY TRADING ***
      //    Alert("here", isThisBarBEARISH(30) && isThisBarBEARISH(60), " ", getMA_5() - currentPrice, " ", getMA_5_20() - currentPrice, " ", getMA_5_20() - getMA_5_9(),  " ",getMA_1_200() - currentPrice );
      if(
         calculateSellOrders() < MAXOrders
         && steps < 500
         && isThisBarBEARISH()
         && isThisBarBEARISH(60)
         && getBarSize(60) > 5
         && isThisBarBEARISH(240)
         && getBarSize(240) > 5
         && isThisBarBEARISH(999)
         && getBarSize(999) > 200
         && getMA_240() - currentPrice > 0.1
         && getMA_240_20() > getHighestPrice(240, 1)
         && getMA_240_50() > getHighestPrice(240, 1)
         // && getMA_60() > getHighestPrice(60, 1)
         // && getMA_60_20() > getHighestPrice(60, 1)
         // && getMA_60_50() > getHighestPrice(60, 1)
         && getMA_60_200() > getHighestPrice(60, 1)
         && getMA_30_200() > getHighestPrice(30, 1)
         // && (getMA_30_20() > getHighestPrice(30, 1) || getMA_30() > getHighestPrice(30, 1))
         // && getMA_30_50() > getHighestPrice(30, 1)
         //     && (getMA_15_20() > getHighestPrice(15, 1) || getMA_15() > getHighestPrice(15, 1))
         //      && getMA_15_50() > getHighestPrice(15, 1)
         //   && (getMA_5_9() > getHighestPrice(5, 1) || getMA_5_20() > getHighestPrice(5, 1))
         //   && getStochastic_Main_15() > 20
         //   && getStochastic_Main_30() > 20
         && getRSI_240_14() > 45
         && getRSI_60_14() > 45
         && getRSI_15_14() > 30
         && getRSI_5_14() > 30
         //    && percClose_5 > -50
         //    && percClose_999 > 20
         && howClose_5 < 2
         //     && howClose_15 < 3
         //     && howClose_30 < 4
         //     && howClose_60 < 5
         //     && howClose_240 < 5
         && getRSI_9997_14() > 35
         && getRSI_99930_14() > 35
         && (getRSI_9997_14() > 45 || AccountInfoDouble(ACCOUNT_EQUITY) > 520)
         && (getRSI_99930_14() > 45 || AccountInfoDouble(ACCOUNT_EQUITY) > 520)

      )

        {
         if(AccountInfoDouble(ACCOUNT_EQUITY) < 500 && MAXOrders > 0)
           {
            MAXOrders = 1;
           }


         for(int i = 0; i < MAXOrders; i++)
           {
            if((calculateSellOrders() < MAXOrders || (calculateSymbolProfitRecent() > 0 && AccountInfoDouble(ACCOUNT_EQUITY) > 500)) && calculateNewSELLOrders() < MAXOrders)
              {
               double myLot = 0.2;
               if(_Symbol == "Boom 300 Index")
                  myLot = 1;
               if(shouldAllowFromRSI)
                  orderPlaced=OrderSend(Symbol(),OP_SELL,myLot,(Ask),3,0,0,"algorithm.V_SELL_TEST3",MILLIONDOLLARBOT,0,Red);
              }
           }
         continueOrders = true;
         notifyCount = 0;
         return;
        }

     }
  }





//+------------------------------------------------------------------+
//| Check for open order conditions                                  |
//+------------------------------------------------------------------+
void CheckForOpenv4()
  {
   continueOrders=true;
   getStepsLastBull(1);
   if(steps <= MAXSteps)
     {
      MAXOrders = 5; //defaultMAXOrders;
      orderCount = 1; //defaultOrderCount;
     }

   if(steps > MAXSteps)
     {
      MAXOrders = 1;
      orderCount = 1;
     }

// ********************* BEGIN ORDERS LOGIC *********************
   if(calculateBuyLimitOrders() > 7)
      deletePendingScalp();

// Risk Management
   if(getRSI_1_14() < 70)
      MAXOrders = 10;
   if(getRSI_1_14() < 50)
      MAXOrders = 5;
   if(getRSI_5_14() < 40)
      MAXOrders = 3;
   if(getRSI_5_14() < 35)
      MAXOrders = 2;
   if(getRSI_5_14() < 30 || (percdiff(priceLowest_M1, currentPrice) <= 7))
      MAXOrders = 1;
   if(AccountBalance() > 500)
      accountMarg = 100;
   if(AccountBalance() <= 500)
      accountMarg = 500;
   if(AccountBalance() <= 100)
      accountMarg = 700;
   if(getMA_1_50() > currentPrice)
      deletePendingScalp();

   percClose_999 = (percdiff_signed(howClosetoLow_999+0.001, howClosetoHigh_999+0.001));
   percClose_240 = (percdiff_signed(howClosetoLow_240+0.001, howClosetoHigh_240+0.001));
   percClose_60 = (percdiff_signed(howClosetoLow_60+0.001, howClosetoHigh_60+0.001));
   percClose = (percdiff_signed(howClosetoLow+0.001, howClosetoHigh+0.001));
// Alert("999 ", percClose_999);
// Alert("240 ", percClose_240);
// Alert("60 ", percClose_60);
// Alert("h/l ", percClose);

// Alert(steps, " ", steps % 2, " ", getStepsLastBull(1), " ",getBarSize(1));
   if(AccountInfoDouble(ACCOUNT_MARGIN_LEVEL) > accountMarg || (calculateALLBuyOrders() == 0 && calculateALLSellOrders() == 0)) // make sure we have enough money
     {
      // *** DAY TRADING ***
      //    Alert("here", isThisBarBEARISH(30) && isThisBarBEARISH(60), " ", getMA_5() - currentPrice, " ", getMA_5_20() - currentPrice, " ", getMA_5_20() - getMA_5_9(),  " ",getMA_1_200() - currentPrice );
      if(
         calculateSellOrders() < MAXOrders
         && steps < 40
         && isThisBarBEARISH()
         && isThisBarBEARISH(5)
         && ((
                getRSI_1_14() > 40 && (
                   (isThisBarBEARISH(999) && getBarSize(999) > 20) || (isThisBarBEARISH(240) && getBarSize(240) > 5)
                )
             ) || (getRSI_1_14() > 70 && isThisBarBEARISH(5)))
         // && (isThisBarBEARISH(999) || isThisBarBEARISH(240) || getRSI_1_14() > 87)
         // && (isThisBarBEARISH(30) || isThisBarBEARISH(60)  || getRSI_1_14() > 87)
         && ((isThisBarBEARISH(240) && getBarSize(240) > 5) || (isThisBarBEARISH(999) && getBarSize(999) > 20))
         && getRSI_60_14() > 45
         && getRSI_240_14() > 45
         && (getRSI_1_14() > 35 || AccountInfoDouble(ACCOUNT_EQUITY) > 500)
         && getMA_1_20() > getHighestPrice(1,1)
         && getMA_5_20() > getHighestPrice(5,1)
         && getMA_1_50() > getHighestPrice(1,1)
         && getMA_1_200() > getHighestPrice(1,1)
         && ((isThisBarBEARISH(60) && getBarSize(60) > 5) || (isThisBarBEARISH(30) && getBarSize(30) > 5))
         //&& getRSI_999_14() > 40 // create new rsi
         // add logic to check lowest RSI and then wait until it gets above a certain threshold before resetting
         && howClose < 0.5
         && howClose_5 < 2
         //    && howClose_15 < 3
         //    && howClose_30 < 4
         //    && howClose_60 < 5
         //    && howClose_240 < 5
         && getRSI_9997_14() > 35
         && getRSI_99930_14() > 35
         && (getRSI_9997_14() > 45 || AccountInfoDouble(ACCOUNT_EQUITY) > 520)
         && (getRSI_99930_14() > 45 || AccountInfoDouble(ACCOUNT_EQUITY) > 520)
         && (getMA_1_500() > getHighestPrice(1,1) || AccountInfoDouble(ACCOUNT_EQUITY) > 2000)

      )

        {
         int maxOrder = 100;
         double myLot = 2;

         if(AccountInfoDouble(ACCOUNT_EQUITY) < 1000)
           {
            maxOrder = 1;
            myLot = 1;
           }

         if(getMA_1_20() < currentPrice || getMA_1_50() < currentPrice || getMA_1_200() < currentPrice || steps > 10 || getRSI_1_14() < 35)
           {
            maxOrder = 3;
            myLot = 1;
           }

         if(getRSI_1_14() < 20 || (getRSI_1_14() < 40 && getStochastic_Main() < 10))
           {
            maxOrder = 2;
            myLot=0.5;
           }

         if(!shouldAllowFromRSI && getRSI_60_14() < 45 && getRSI_30_14() < 45 && getRSI_15_14() < 35)
           {

            maxOrder = 1;
            myLot=0.2;
           }

         if(!shouldAllowFromRSI || !shouldAllowFromRSI5 || !shouldAllowFromRSI5 || !shouldAllowFromBEAR || !shouldAllowFromRSI30 || !shouldAllowFromRSI60 || !shouldAllowFromRSI240 || getMA_1_200() < currentPrice || getMA_5_200() < currentPrice || getMA_15_200() < currentPrice)
           {
            myLot = 0.2;
            maxOrder = 1;
           }


         // any is false
         if(!(getRSI_1_14() > 30 || getRSI_5_14() > 30 || getRSI_15_14() > 30 || getRSI_30_14() > 30 || getRSI_60_14() > 35 || getRSI_240_14() > 45))
           {
            //  Alert("below rsi.. check...OR");
            maxOrder = 1;
            myLot = 0.2;
           }

         // all is false
         if(!(getRSI_1_14() > 0 && (getRSI_1_14() > 35 || getRSI_60_14() > 50) && getRSI_5_14() > 20 && (getRSI_5_14() > 30 || getRSI_60_14() > 35) && getRSI_15_14() > 30 && getRSI_30_14() > 30 && getRSI_60_14() > 30 && getRSI_240_14() > 35))
           {
            //   Alert("below rsi.. check..AND.");
            myLot = 0.2;
            maxOrder = 1;
           }

         if(!(getRSI_1_14() > 30 && getRSI_60_14() > 40))
           {
            maxOrder = 1;
           }

         if(!(getRSI_1_14() > 30 && getRSI_240_14() > 40))
           {
            maxOrder = 1;
           }

         if((!shouldAllowFromRSI || !shouldAllowFromRSI5) && (currentPrice - getMA_1_200() > 2 && getMA_1_50() - currentPrice < 2))
           {
            maxOrder = 1;
           }

         if(_Symbol == "Boom 500 Index")
           {
            if(getMA_5_200() < currentPrice)
              {
               maxOrder = 1;
              }
           }

         if(!(getMA_15_200() < getMA_15_50() && getMA_30_200() < currentPrice && getMA_60_200() < currentPrice && !shouldAllowFromRSI15))
           {
            maxOrder = 1;
           }

         if(getMA_1_20() > getMA_1_50() && isThisBarBULLISH(15))
           {
            maxOrder = 0;
           }

         if(getMA_1_20() < getHighestPrice(1,1) && (getMA_1_50() < getHighestPrice(1,50) || getMA_1_200() < getHighestPrice(1,200)) && isThisBarBULLISH(15))
           {
            maxOrder = 0;
           }

         if(AccountInfoDouble(ACCOUNT_EQUITY) < 500 && maxOrder > 0)
           {
            maxOrder = 1;
           }

         if((calculateSellOrders() < maxOrder || (calculateSymbolProfitRecent() > 0 && maxOrder > 0 && shouldAllowFromRSI && shouldAllowFromRSI5 && getRSI_1_14() > 30 && AccountInfoDouble(ACCOUNT_EQUITY) > 500)) || (calculateNewSELLOrders() < maxOrder && AccountInfoDouble(ACCOUNT_EQUITY) > 500))
           {
            if(_Symbol == "Boom 300 Index")
               myLot = 1;
            orderPlaced=OrderSend(Symbol(),OP_SELL,myLot,(Ask),3,0,0,"algorithm.V_SELL_TEST4",MILLIONDOLLARBOT,0,Red);
           }
        }

     }
  }


//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void CheckForOpenv5()
  {
   if(
      (shouldAllowFromRSI && shouldAllowFromRSI5)
      && (getMA_1_50() - currentPrice > 2 || getMA_1_200() > currentPrice || (isThisBarBEARISH(240) && isThisBarBEARISH(60) && isThisBarBEARISH(30) && isThisBarBEARISH(15) && getMA_5_20() > currentPrice && getMA_1_20() > currentPrice && getMA_1_9() > currentPrice))
//(shouldAllowFromRSI60 || (getRSI_240_14() > 35 && getMA_1_200() > currentPrice && getMA_5() > currentPrice && getMA_5_200() > currentPrice && getMA_15_50() > currentPrice && getMA_15_200() > currentPrice && getMA_30_50() > currentPrice) || (isThisBarBEARISH(240) && isThisBarBEARISH(60) && isThisBarBEARISH(30)))
      && steps < 350
      && isThisBarBEARISH()
      && isThisBarBEARISH(5)
      && isThisBarBEARISH(15)
      && getBarSize(15) > 3
      && (getRSI_1_14() > 40 || (calculateSellOrders() == 0 && AccountInfoDouble(ACCOUNT_EQUITY) > 520))
      && getMA_1_200() > getHighestPrice(1,1)
      && getMA_5_200() > getHighestPrice(5,1)
      && getMA_15_200() > getHighestPrice(15,1)
// && (getMA_5_200() > currentPrice || getMA_15_50() > getMA_15_20() || getMA_1_50() > getMA_1_20())
      && getMA_1_20() - getMA_1_9() > 1 // avoid once it starts crossing
      && (getMA_15_20() - getMA_15() > 3 || getMA_5_20() - getMA_5_9() > 3) // avoid once it starts crossing
      && (getMA_1_50() > getHighestPrice(1,1) || getMA_1_200() > getHighestPrice(1,1))
      && getMA_1_20() < getMA_1_50()
      && getMA_1_20() > getHighestPrice(1,1)
//add  && ((isThisBarBEARISH(999) && getBarSize(999) > 20) || (isThisBarBEARISH(30) && getBarSize(30) > 5) || (isThisBarBEARISH(60) && getBarSize(60) > 5)) // (isThisBarBEARISH(15) && getRSI_1_14() > 60))
//    && (getMA_1_200() > currentPrice || (getMA_5_200() > currentPrice && isThisBarBEARISH(60)) || (isThisBarBEARISH(240) && isThisBarBEARISH(60) && isThisBarBEARISH(30)))
//  && (getMA_240_200() > currentPrice || (isThisBarBEARISH(240) && isThisBarBEARISH(60) && isThisBarBEARISH(30)))
//add  && (getMA_1_200() > currentPrice || getMA_5_200() > currentPrice || getMA_15_200() > currentPrice || getMA_30_200() > currentPrice || getMA_1_50() > currentPrice || getMA_5() > currentPrice || getMA_15_50() > currentPrice || getMA_30_50() > currentPrice)
//add  && (getMA_15() > currentPrice || getMA_15_20() > currentPrice || getMA_15_50() > currentPrice || getMA_15_200() > currentPrice || (isThisBarBEARISH(60) && getBarSize(60) > 5))
// && (isThisBarBEARISH(60) || isThisBarBEARISH(30,1) || isThisBarBEARISH(15,1))
//  && getMA_1_200() - getMA_1_50() > 3
      && (shouldAllowFromBEAR || getMA_1_50() > currentPrice || getMA_1_200() > currentPrice || (isThisBarBEARISH(240) && isThisBarBEARISH(60) && isThisBarBEARISH(30) && isThisBarBEARISH(15) && getMA_5_20() > currentPrice && getMA_1_20() > currentPrice && getMA_1_9() > currentPrice))
      && howClose < 0.5
      && howClose_5 < 2
//   && howClose_15 < 3
//   && howClose_30 < 4
//   && howClose_60 < 5
//   && howClose_240 < 5
      && getRSI_9997_14() > 35
      && getRSI_99930_14() > 35
      && (getRSI_9997_14() > 45 || AccountInfoDouble(ACCOUNT_EQUITY) > 520)
      && (getRSI_99930_14() > 45 || AccountInfoDouble(ACCOUNT_EQUITY) > 520)
   )
     {
      //Alert("here");
      int maxOrder = 100;
      double myLot = 2;

      if(AccountInfoDouble(ACCOUNT_EQUITY) < 1000)
        {
         maxOrder = 1;
         myLot = 1;
        }

      if(getMA_1_20() < currentPrice || getMA_1_50() < currentPrice || getMA_1_200() < currentPrice || steps > 10 || getRSI_1_14() < 35)
        {
         maxOrder = 7;
         myLot = 1;
        }

      if(getRSI_1_14() < 20 || (getRSI_1_14() < 40 && getStochastic_Main() < 10))
        {
         maxOrder = 5;
         myLot=0.5;
        }

      if(!shouldAllowFromRSI && getRSI_60_14() < 35 && getRSI_30_14() < 35 && getRSI_15_14() < 35)
        {

         maxOrder = 4;
         myLot=0.2;
        }

      if(!shouldAllowFromRSI || !shouldAllowFromRSI5 || !shouldAllowFromRSI5 || !shouldAllowFromBEAR || !shouldAllowFromRSI30 || !shouldAllowFromRSI60 || !shouldAllowFromRSI240 || getMA_1_200() < currentPrice || getMA_5_200() < currentPrice || getMA_15_200() < currentPrice)
        {
         myLot = 0.2;
         maxOrder = 3;
        }


      // any is false
      if(!(getRSI_1_14() > 30 || getRSI_5_14() > 30 || getRSI_15_14() > 30 || getRSI_30_14() > 30 || getRSI_60_14() > 35 || getRSI_240_14() > 35))
        {
         //   Alert("below rsi.. check...OR");
         maxOrder = 2;
         myLot = 0.2;
        }

      // all is false
      if(!(getRSI_1_14() > 0 && (getRSI_1_14() > 35 || getRSI_60_14() > 50) && getRSI_5_14() > 20 && (getRSI_5_14() > 30 || getRSI_60_14() > 50) && getRSI_15_14() > 30 && getRSI_30_14() > 30 && getRSI_60_14() > 30 && getRSI_240_14() > 35))
        {
         //Alert("below rsi.. check..AND.");
         myLot = 0.2;
         maxOrder = 0;
        }

      // If you want both to be false to trigger, use ! and ||, if you want any to be false, use ! and &&
      // true || false = true, !true = false
      // true || true = true, !true = false
      // false || false = false, !false = true

      if(!(getRSI_1_14() > 30 || getRSI_60_14() > 40) && getRSI_60_14() < 35 && getRSI_240_14() < 35)
        {
         //Alert("3");
         maxOrder = 0;
        }

      if(!(getRSI_1_14() > 30 || getRSI_240_14() > 40) && getRSI_60_14() < 35 && getRSI_240_14() < 35)
        {
         //Alert("4");
         maxOrder = 0;
        }

      if((!shouldAllowFromRSI || !shouldAllowFromRSI5) && (getMA_1_200() - currentPrice < 2 || getMA_1_50() - currentPrice < 2) && getRSI_60_14() < 35 && getRSI_240_14() < 35)
        {
         Alert("5");
         maxOrder = 0;
        }

      if(_Symbol == "Boom 500 Index")
        {
         if((getMA_5_200() < currentPrice && getMA_5() < currentPrice) || !shouldAllowFromRSI || !shouldAllowFromRSI5)
           {
            Alert("6b");
            maxOrder = 0;
           }
        }

      if(_Symbol == "Boom 300 Index")
        {
         if(!shouldAllowFromRSI || !shouldAllowFromRSI5 || getRSI_1_14() < 35 || getMA_1_9() < currentPrice || getMA_60_50() < currentPrice)
           {
            Alert("6c");
            maxOrder = 0;
           }
        }

      if(getMA_15_200() < getMA_15_50() && getMA_30_200() < currentPrice && getMA_60_200() < currentPrice && !shouldAllowFromRSI15)
        {
         Alert("6");
         maxOrder = 0;
        }

      if(!shouldAllowFromRSI15 && getRSI_240_14() < 40 && getRSI_60_14() < 35 && getRSI_240_14() < 35)
        {
         Alert("7");
         maxOrder = 0;
        }

      if(!((shouldAllowFromRSI && getRSI_1_14() > 10) || (getMA_5_200() > currentPrice && getMA_5() > currentPrice) || getRSI_5_14() > 30) && getRSI_60_14() < 35 && getRSI_240_14() < 35)
        {
         maxOrder = 0;
         Alert("8");
        }

      if(getMA_30() < currentPrice && getMA_30_200() < currentPrice && getMA_1_200() < currentPrice && getMA_1_50() < currentPrice && getRSI_60_14() < 35 && getRSI_240_14() < 35)
        {
         maxOrder=0;
         Alert("9");
        }

      if(getMA_1_50() < getHighestPrice(1,30) && getMA_1_20() < getHighestPrice(1,30) && getMA_1_500() < getHighestPrice(1,30) && getRSI_60_14() < 35 && getRSI_240_14() < 35)
        {
         maxOrder=0;
         Alert("10");
        }

      if(getMA_1_500() < getHighestPrice(1,30) && getMA_1_200() < getMA_1_50() && (getRSI_60_14() < 35 && getRSI_240_14() < 35 || isThisBarBULLISH(240)))
        {
         maxOrder=0;
         Alert("11");
        }

      if((getMA_15() < getHighestPrice(15,1) || getMA_15_20() < getHighestPrice(15,1)) && getRSI_60_14() < 35 && getRSI_240_14() < 35)
        {
         maxOrder = 0;
         Alert(12);
        }

      if((getMA_5_9() < getHighestPrice(5,1) || getMA_5_20() < getHighestPrice(5,1)) && getRSI_60_14() < 35 && getRSI_240_14() < 35)
        {
         maxOrder = 0;
         Alert(13);
        }

      if((getMA_15_50() < getHighestPrice(15,1) || getMA_5_200() < getHighestPrice(5,1)) && getMA_15_20() < getHighestPrice(15,1) && getMA_5_200() < getHighestPrice(5,1) && getRSI_60_14() < 35 && getRSI_240_14() < 35)
        {
         maxOrder = 0;
         Alert(14);
        }

      if(getMA_15_200() < getHighestPrice(15,1) && getMA_15_50() < getHighestPrice(15,1) && getMA_60_50() < getHighestPrice(60,1) && getMA_240_50() < getHighestPrice(240,1) && getRSI_60_14() < 35 && getRSI_240_14() < 35)
        {
         maxOrder = 0;
         Alert(15);
        }

      if(getMA_5_500() < getHighestPrice(5,1) && getMA_15_200() < getHighestPrice(15,1) && getMA_30_50() < getHighestPrice(30,1) && (getRSI_1_14() < 40 || !shouldAllowFromRSI || !shouldAllowFromRSI5) && getRSI_60_14() < 35 && getRSI_240_14() < 35)
        {
         maxOrder = 0;
         Alert(16);
        }

      if(AccountInfoDouble(ACCOUNT_EQUITY) < 500 && maxOrder > 0)
        {
         maxOrder = 1;
        }

      if((calculateSellOrders() < maxOrder || (calculateSymbolProfitRecent() > 0 && maxOrder > 0 && shouldAllowFromRSI && shouldAllowFromRSI5 && getRSI_1_14() > 30 && AccountInfoDouble(ACCOUNT_EQUITY) > 500)) || (calculateNewSELLOrders() < maxOrder && AccountInfoDouble(ACCOUNT_EQUITY) > 500))
        {
         if(_Symbol == "Boom 300 Index" || _Symbol == "Boom 500 Index")
           {
            myLot = 1;
           }
         orderPlaced=OrderSend(Symbol(),OP_SELL,myLot,(Ask),3,0,0,"algorithm.V_SELL_TEST5",MILLIONDOLLARBOT,0,Red);
        }
     }

  }


//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void CheckForOpenv6()
  {
   if(
// (shouldAllowFromRSI || shouldAllowFromRSI5 || getMA_30_50() > currentPrice || getMA_1_50() > currentPrice || getMA_1_200() > currentPrice || (isThisBarBEARISH(240) && isThisBarBEARISH(60) && isThisBarBEARISH(30) && isThisBarBEARISH(15) && getMA_5_20() > currentPrice && getMA_1_20() > currentPrice && getMA_1_9() > currentPrice))
//(shouldAllowFromRSI60 || (getRSI_240_14() > 35 && getMA_1_200() > currentPrice && getMA_5() > currentPrice && getMA_5_200() > currentPrice && getMA_15_50() > currentPrice && getMA_15_200() > currentPrice && getMA_30_50() > currentPrice) || (isThisBarBEARISH(240) && isThisBarBEARISH(60) && isThisBarBEARISH(30)))
      getMA_1_50() > currentPrice
      && (getMA_1_9() > getHighestPrice(1,1) || AccountInfoDouble(ACCOUNT_EQUITY) > 520)
      && getMA_1_200() > currentPrice
      && getMA_5_20() > currentPrice
      && getMA_5() > currentPrice
      && getMA_5_200() > currentPrice
      && getMA_15() > currentPrice
      && getMA_15_20() > currentPrice
      && getMA_15_50() > currentPrice
      && getMA_15_200() > currentPrice
      && getMA_30() > currentPrice
      && getMA_30_20() > currentPrice
      && getMA_30_50() > currentPrice
      && getMA_1_20() < getMA_1_50()
      && (getRSI_1_14() > 50 || getRSI_5_14() > 50)
      && shouldAllowFromRSI
      && shouldAllowFromRSI5
//      && getMA_30_200() < currentPrice
      && steps < 350
      && howClose_5 < 2
//     && howClose_15 < 3
//     && howClose_30 < 4
//     && howClose_60 < 5
//     && howClose_240 < 5
      && isThisBarBEARISH()
      && isThisBarBEARISH(5)
// && isThisBarBEARISH(15)
// && getBarSize(15) > 3
      && (getMA_5_200() > currentPrice || getMA_15_50() > getMA_15_20() || getMA_1_50() > getMA_1_20())
      && getMA_1_20() - getMA_1_9() > 1 // avoid once it starts crossing
      && getMA_15_20() - getMA_15() > 3 // avoid once it starts crossing
//add  && ((isThisBarBEARISH(999) && getBarSize(999) > 20) || (isThisBarBEARISH(30) && getBarSize(30) > 5) || (isThisBarBEARISH(60) && getBarSize(60) > 5)) // (isThisBarBEARISH(15) && getRSI_1_14() > 60))
//  && (getMA_1_200() > currentPrice || getMA_5_200() > currentPrice || (isThisBarBEARISH(240) && isThisBarBEARISH(60) && isThisBarBEARISH(30)))
//  && (getMA_240_200() > currentPrice || (isThisBarBEARISH(240) && isThisBarBEARISH(60) && isThisBarBEARISH(30)))
//add  && (getMA_1_200() > currentPrice || getMA_5_200() > currentPrice || getMA_15_200() > currentPrice || getMA_30_200() > currentPrice || getMA_1_50() > currentPrice || getMA_5() > currentPrice || getMA_15_50() > currentPrice || getMA_30_50() > currentPrice)
//add  && (getMA_15() > currentPrice || getMA_15_20() > currentPrice || getMA_15_50() > currentPrice || getMA_15_200() > currentPrice || (isThisBarBEARISH(60) && getBarSize(60) > 5))
// && (isThisBarBEARISH(60) || isThisBarBEARISH(30,1) || isThisBarBEARISH(15,1))
//  && getMA_1_200() - getMA_1_50() > 3
// && (shouldAllowFromBEAR || getMA_1_50() > currentPrice || getMA_1_200() > currentPrice || (isThisBarBEARISH(240) && isThisBarBEARISH(60) && isThisBarBEARISH(30) && isThisBarBEARISH(15) && getMA_5_20() > currentPrice && getMA_1_20() > currentPrice && getMA_1_9() > currentPrice))
      && getRSI_9997_14() > 35
      && getRSI_99930_14() > 35
      && (getRSI_9997_14() > 45 || AccountInfoDouble(ACCOUNT_EQUITY) > 520)
      && (getRSI_99930_14() > 45 || AccountInfoDouble(ACCOUNT_EQUITY) > 520)
   )
     {

      int maxOrder = 100;
      double myLot = 2;

      if(AccountInfoDouble(ACCOUNT_EQUITY) < 1000)
        {
         maxOrder = 1;
         myLot = 1;
        }

      if(AccountInfoDouble(ACCOUNT_EQUITY) < 300)
        {
         maxOrder = 0;
         myLot = 0;
        }

      if(getMA_1_20() < currentPrice || getMA_1_50() < currentPrice || getMA_1_200() < currentPrice || steps > 10 || getRSI_1_14() < 35)
        {
         maxOrder = 5;
         myLot = 1;
        }

      if(getRSI_1_14() < 20 || (getRSI_1_14() < 40 && getStochastic_Main() < 10))
        {
         maxOrder = 4;
         myLot=0.5;
        }

      if(!shouldAllowFromRSI && getRSI_60_14() < 45 && getRSI_30_14() < 45 && getRSI_15_14() < 35)
        {

         maxOrder = 3;
         myLot=0.2;
        }

      if(!shouldAllowFromRSI || !shouldAllowFromRSI5 || !shouldAllowFromRSI5 || !shouldAllowFromBEAR || !shouldAllowFromRSI30 || !shouldAllowFromRSI60 || !shouldAllowFromRSI240 || getMA_1_200() < currentPrice || getMA_5_200() < currentPrice || getMA_15_200() < currentPrice)
        {
         myLot = 0.2;
         maxOrder = 1;
        }


      // all gotta be false
      if(!(getRSI_1_14() > 30 || getRSI_5_14() > 30 || getRSI_15_14() > 30 || getRSI_30_14() > 30 || getRSI_60_14() > 35 || getRSI_240_14() > 35))
        {
         //  Alert("below rsi.. check...OR");
         maxOrder = 2;
         myLot = 0.2;
        }

      // any can be false
      if(!(getRSI_1_14() > 20 && (getRSI_1_14() > 35 || getRSI_60_14() > 35) && getRSI_5_14() > 20 && (getRSI_5_14() > 30 || getRSI_60_14() > 35) && getRSI_15_14() > 30 && getRSI_30_14() > 30 && getRSI_60_14() > 30 && getRSI_240_14() > 35))
        {
         //   Alert("below rsi.. check..AND.");
         myLot = 0.2;
         maxOrder = 2;
        }

      if(getMA_1_50() > getMA_1_200())
        {
         maxOrder = 1;
        }

      if(!(getRSI_1_14() > 10 || getRSI_5_14() > 20 || getRSI_15_14() > 25))
        {
         //   Alert("...");
         maxOrder = 0;
        }


      if(!(getRSI_1_14() > 10 && getRSI_5_14() > 30 && getRSI_15_14() > 35 && getRSI_30_14() > 35 && getRSI_60_14() > 35 && getRSI_240_14() > 35) && getRSI_60_14() < 35 && getRSI_240_14() < 35)
        {
         //   Alert("...");
         maxOrder = 0;
        }


      if(!(getRSI_1_14() > 30 || getRSI_5_14() > 30 || getRSI_60_14() > 35) && getRSI_60_14() < 35 && getRSI_240_14() < 35)
        {
         maxOrder = 0;
        }

      if(getRSI_1_14() < 30 && getRSI_240_14() < 40 && getRSI_60_14() < 35 && getRSI_240_14() < 35)
        {
         maxOrder = 0;
        }

      if(getMA_15_200() < getHighestPrice(1,7) && getRSI_60_14() < 35 && getRSI_240_14() < 35)
        {
         maxOrder = 0;
        }

      if(!shouldAllowFromRSI && getRSI_5_14() < 50 && getRSI_15_14() < 35 && getRSI_30_14() < 35 && getRSI_60_14() < 35 && getRSI_240_14() < 35)
        {
         maxOrder = 0;
        }

      if(AccountInfoDouble(ACCOUNT_EQUITY) < 500 && maxOrder > 0)
        {
         maxOrder = 1;
        }

      if((calculateSellOrders() < maxOrder || (calculateSymbolProfitRecent() > 0 && maxOrder > 0 && shouldAllowFromRSI && shouldAllowFromRSI5 && getRSI_1_14() > 30 && AccountInfoDouble(ACCOUNT_EQUITY) > 500)) || (calculateNewSELLOrders() < maxOrder && AccountInfoDouble(ACCOUNT_EQUITY) > 500))
        {
         if(_Symbol == "Boom 300 Index")
           {
            myLot = 1;
           }
         orderPlaced=OrderSend(Symbol(),OP_SELL,myLot,(Ask),3,0,0,"algorithm.V_SELL_TEST6",MILLIONDOLLARBOT,0,Red);
        }
     }

  }


//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void CheckForOpenv7()
  {
   if(
      isThisBarBEARISH()
      && steps < 50
      && howClose < 0
      && howClose_5 < 0
//    && howClose_15 < -1
//    && howClose_30 < -1
      && (getRSI_1_14() > 40 || getRSI_15_14() > 60)
      && (getRSI_1_14() > 45 || AccountInfoDouble(ACCOUNT_EQUITY) > 450)
      && getRSI_5_14() > 35
      && (getRSI_5_14() > 45 || AccountInfoDouble(ACCOUNT_EQUITY) > 450)
      && getRSI_15_14() > 35
      && (getRSI_15_14() > 45 || AccountInfoDouble(ACCOUNT_EQUITY) > 450)
      && getRSI_30_14() > 35
      && (getRSI_30_14() > 45 || AccountInfoDouble(ACCOUNT_EQUITY) > 450)
      && getRSI_60_14() > 35
      && (getRSI_60_14() > 45 || AccountInfoDouble(ACCOUNT_EQUITY) > 450)
      && getRSI_240_14() > 35
// || isThisBarBEARISH(30)
      && (isThisBarBEARISH(60) || isThisBarBEARISH(30))
      && (isThisBarBEARISH(240) || isThisBarBEARISH(30))
      && (isThisBarBEARISH(999) || isThisBarBEARISH(30))
      && getMA_5_9() > getHighestPrice(5,1)
      && getMA_5() > getHighestPrice(5,1)
      && getRSI_9997_14() > 35
      && getRSI_99930_14() > 35
      && (getRSI_9997_14() > 45 || AccountInfoDouble(ACCOUNT_EQUITY) > 520)
      && (getRSI_99930_14() > 45 || AccountInfoDouble(ACCOUNT_EQUITY) > 520)
   )
     {

      int maxOrder = 2;
      double myLot = 0.2;


      if(AccountInfoDouble(ACCOUNT_EQUITY) < 500 && maxOrder > 0)
        {
         maxOrder = 1;
        }

      if((calculateSellOrders() < maxOrder || (calculateSymbolProfitRecent() > 0 && maxOrder > 0 && shouldAllowFromRSI && shouldAllowFromRSI5 && getRSI_1_14() > 30 && AccountInfoDouble(ACCOUNT_EQUITY) > 500)) || (calculateNewSELLOrders() < maxOrder && AccountInfoDouble(ACCOUNT_EQUITY) > 500))
        {
         if(_Symbol == "Boom 500 Index")
           {
            myLot = 0.5;
           }
         if(_Symbol == "Boom 300 Index")
           {
            myLot = 1;
           }
         orderPlaced=OrderSend(Symbol(),OP_SELL,myLot,(Ask),3,0,0,"algorithm.V_SELL_TEST7",MILLIONDOLLARBOT,0,Red);
        }
     }

  }


//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void CheckForOpenv8()
  {
   if(
      isThisBarBEARISH()
      && isThisBarBEARISH(5)
      && isThisBarBEARISH(15)
      && steps < 50
      && howClose_240 < -7
      && (getRSI_1_14() > 30 || getRSI_15_14() > 60)
      && (getRSI_1_14() > 33 || getRSI_5_14() > 35)
      && (getRSI_1_14() > 45 || AccountInfoDouble(ACCOUNT_EQUITY) > 500)
      && (getRSI_5_14() > 45 || AccountInfoDouble(ACCOUNT_EQUITY) > 500)
      && (getRSI_15_14() > 45 || AccountInfoDouble(ACCOUNT_EQUITY) > 500)
// && getRSI_5_14() > 35
// && getRSI_15_14() > 35
// && getRSI_30_14() > 35
// && getRSI_60_14() > 35
      && getRSI_999_14() > 40
// || isThisBarBEARISH(30)
      && (isThisBarBEARISH(60) || isThisBarBEARISH(30))
      && (isThisBarBEARISH(240) || isThisBarBEARISH(60))
      && (isThisBarBEARISH(999) || isThisBarBEARISH(30))
      && getMA_5_9() > getHighestPrice(5,1)
      && getMA_5() > getHighestPrice(5,1)
      && (getMA_1_9() > getHighestPrice(1,1) || AccountInfoDouble(ACCOUNT_EQUITY) > 500)
      && getMA_1_20() > getHighestPrice(1,1)
      && (shouldAllowFromRSI || getMA_30_20() > getHighestPrice(30,1))
      && (shouldAllowFromRSI5 || getMA_30_50() > getHighestPrice(30,1))
// && getMA_60() > getHighestPrice(60,1)
// && getMA_60_20() > getHighestPrice(60,1)
      && getRSI_9997_14() > 35
      && getRSI_99930_14() > 35
      && (getRSI_9997_14() > 45 || AccountInfoDouble(ACCOUNT_EQUITY) > 520)
      && (getRSI_99930_14() > 45 || AccountInfoDouble(ACCOUNT_EQUITY) > 520)
   )
     {

      int maxOrder = 2;
      double myLot = 0.2;


      if(AccountInfoDouble(ACCOUNT_EQUITY) < 500 && maxOrder > 0)
        {
         maxOrder = 1;
        }

      if((calculateSellOrders() < maxOrder || (calculateSymbolProfitRecent() > 0 && maxOrder > 0 && shouldAllowFromRSI && shouldAllowFromRSI5 && getRSI_1_14() > 30 && AccountInfoDouble(ACCOUNT_EQUITY) > 500)) || (calculateNewSELLOrders() < maxOrder && AccountInfoDouble(ACCOUNT_EQUITY) > 500))
        {
         if(_Symbol == "Boom 300 Index" || _Symbol == "Boom 500 Index")
           {
            myLot = 1;
           }
         orderPlaced=OrderSend(Symbol(),OP_SELL,myLot,(Ask),3,0,0,"algorithm.V_SELL_TEST8",MILLIONDOLLARBOT,0,Red);
        }
     }

  }


//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void CheckForOpenv9()
  {
   if(
      isThisBarBEARISH()
// && isThisBarBEARISH(5)
      && isThisBarBEARISH(15)
//&& isThisBarBEARISH(30)
      && steps < 500
//    && howClose_240 < -7
      && (getRSI_1_14() > 30 || getRSI_15_14() > 50)
      && (getRSI_1_14() > 33 || getRSI_5_14() > 35)
      && (getRSI_1_14() > 45 || AccountInfoDouble(ACCOUNT_EQUITY) > 400)
      && getRSI_5_14() > 35
      && (getRSI_5_14() > 45 || AccountInfoDouble(ACCOUNT_EQUITY) > 400)
      && (getRSI_15_14() > 40 || AccountInfoDouble(ACCOUNT_EQUITY) > 400)
      && (getRSI_30_14() > 40 || AccountInfoDouble(ACCOUNT_EQUITY) > 400)
      && (getRSI_60_14() > 40 || AccountInfoDouble(ACCOUNT_EQUITY) > 400)
      && getRSI_999_14() > 40
// || isThisBarBEARISH(30)
      && (isThisBarBEARISH(60) || isThisBarBEARISH(30))
      && (isThisBarBEARISH(240) || isThisBarBEARISH(60))
      && (isThisBarBEARISH(999) || isThisBarBEARISH(30))
//     && getMA_5_9() > getHighestPrice(5,1)
      && (getMA_5() > getHighestPrice(5,1) || getMA_5_200() > getHighestPrice(5,1) || getMA_15_50() > getHighestPrice(15,1) || getMA_1_50() > getHighestPrice(1,1))
      && (getMA_1_9() > getHighestPrice(1,1) || AccountInfoDouble(ACCOUNT_EQUITY) > 500)
      && (getMA_5_20() > getHighestPrice(5,1) || AccountInfoDouble(ACCOUNT_EQUITY) > 1000)
      && (getMA_15() > getHighestPrice(15,1) || AccountInfoDouble(ACCOUNT_EQUITY) > 500)
      && (getMA_15_20() > getHighestPrice(15,1) || AccountInfoDouble(ACCOUNT_EQUITY) > 400)
//   && getMA_1_20() > getHighestPrice(1,1)
      && (shouldAllowFromRSI || getMA_30_20() > getHighestPrice(30,1))
      && (shouldAllowFromRSI5 || getMA_30_50() > getHighestPrice(30,1))
// && getMA_60() > getHighestPrice(60,1)
// && getMA_60_20() > getHighestPrice(60,1)
      && getRSI_9997_14() > 35
      && getRSI_99930_14() > 35
      && (getRSI_9997_14() > 45 || AccountInfoDouble(ACCOUNT_EQUITY) > 520)
      && (getRSI_99930_14() > 45 || AccountInfoDouble(ACCOUNT_EQUITY) > 520)
   )
     {

      int maxOrder = 2;
      double myLot = 0.2;

      if(_Symbol == "Boom 300 Index" || _Symbol == "Boom 500 Index")
        {
         myLot = 1;
        }

      if(_Symbol == "Boom 300 Index" && AccountInfoDouble(ACCOUNT_EQUITY) < 100)
        {
         maxOrder = 0;
        }

      if(AccountInfoDouble(ACCOUNT_EQUITY) < 500 && maxOrder > 0)
        {
         maxOrder = 1;
         if(_Symbol == "Boom 500 Index")
            myLot = 0.2;
        }

      if((calculateSellOrders() < maxOrder || (calculateSymbolProfitRecent() > 0 && maxOrder > 0 && shouldAllowFromRSI && shouldAllowFromRSI5 && getRSI_1_14() > 30 && AccountInfoDouble(ACCOUNT_EQUITY) > 500)) || (calculateNewSELLOrders() < maxOrder && AccountInfoDouble(ACCOUNT_EQUITY) > 500))
        {

         orderPlaced=OrderSend(Symbol(),OP_SELL,myLot,(Ask),3,0,0,"algorithm.V_SELL_TEST9",MILLIONDOLLARBOT,0,Red);
        }
     }

  }



//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void CheckForOpenBuy()
  {
   if(
      isThisBarBULLISH(240)
      && (howClose_240 > 7 || isThisBarBULLISH(999))
      && ((getRSI_1_14() < 20 || getRSI_5_14() < 30 || getRSI_15_14() < 30 || getRSI_30_14() < 30 || getRSI_60_14() < 30 || getRSI_240_14() < 30 || getRSI_999_14() < 30)
          || (isThisBarBULLISH(15) && isThisBarBULLISH(30) && isThisBarBULLISH(60))
         )
      && (getRSI_1_14() < 60 && getRSI_5_14() < 60 && getRSI_15_14() < 60 && getRSI_30_14() < 60 && getRSI_60_14() < 60 && getRSI_240_14() < 60 && getRSI_999_14() < 60)
      && getMA_5_9() < getLowestPrice(5,1)
      && getMA_5_20() < getLowestPrice(5,1)
      && (getMA_5() < getLowestPrice(5,1) || getMA_5_200() < getLowestPrice(5,1))
      && (getMA_1_9() < getLowestPrice(1,1) && getMA_1_20() < getLowestPrice(1,1))
      && (getMA_1_50() < getLowestPrice(1,1) || getMA_1_200() < getLowestPrice(1,1))
      && getRSI_1_14() < 35
      && getRSI_9997_14() < 65
      && getRSI_99930_14() < 65
      && (getRSI_9997_14() < 55 || AccountInfoDouble(ACCOUNT_EQUITY) > 500)
      && (getRSI_99930_14() < 55 || AccountInfoDouble(ACCOUNT_EQUITY) > 500)
   )
     {
      int maxOrder = 3;
      double myLot = 2;

      if(_Symbol == "Boom 300 Index" || _Symbol == "Boom 500 Index")
        {
         myLot = 1;
        }


      if(AccountInfoDouble(ACCOUNT_EQUITY) < 2000 && maxOrder > 0)
        {
         maxOrder = 1;
         myLot = 0.2;

         if(_Symbol == "Boom 500 Index")
           {
            myLot = 0.5;
           }

         if(_Symbol == "Boom 300 Index")
           {
            myLot = 1;
           }
        }

      if((calculateBuyOrders() < 1 || calculateBuyOrdersProfit() > 0) && maxOrder > 0 && calculateBuyOrders() < maxOrder)
        {
         orderPlaced=OrderSend(Symbol(),OP_BUY,myLot,(Bid),3,0,0,"algorithm.V_BUY_TEST",MILLIONDOLLARBOT,0,Red);
        }
     }
  }

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void CheckForOpenBuy2()
  {
   if(
      ((isThisBarBULLISH(240) && getBarSize(240) > 20) || (isThisBarBULLISH(999) && getBarSize(999) > 20))
      && (getRSI_1_14() < 20 || getRSI_5_14() < 20 || getRSI_15_14() < 20 || getRSI_30_14() < 20 || getRSI_60_14() < 20 || getRSI_240_14() < 20 || getRSI_999_14() < 20)
      && (getMA_60_20() < getLowestPrice(60,1) || AccountInfoDouble(ACCOUNT_EQUITY) > 500)
      && (getMA_60_50() < getLowestPrice(60,1) || AccountInfoDouble(ACCOUNT_EQUITY) > 500)
      && (getMA_5_9() < getLowestPrice(60,1) || getMA_1_50() < getLowestPrice(1,1))
      && (getMA_5_20() < getLowestPrice(60,1) || getMA_1_50() < getLowestPrice(1,1))
      && getRSI_9997_14() < 65
      && getRSI_99930_14() < 65
      && (getRSI_9997_14() < 55 || AccountInfoDouble(ACCOUNT_EQUITY) > 500)
      && (getRSI_99930_14() < 55 || AccountInfoDouble(ACCOUNT_EQUITY) > 500)
   )
     {
      int maxOrder = 3;
      double myLot = 2;

      if(_Symbol == "Boom 300 Index" || _Symbol == "Boom 500 Index")
        {
         myLot = 1;
        }


      if(AccountInfoDouble(ACCOUNT_EQUITY) < 2000 && maxOrder > 0)
        {
         maxOrder = 1;
         myLot = 0.2;

         if(_Symbol == "Boom 500 Index")
           {
            myLot = 0.5;
           }

         if(_Symbol == "Boom 300 Index")
           {
            myLot = 1;
           }
        }

      if((calculateBuyOrders() < 1 || calculateBuyOrdersProfit() > 0) && maxOrder > 0 && calculateBuyOrders() < maxOrder)
        {
         if(_Symbol == "Boom 1000 Index" && getRSI_1_14() > 10 && getRSI_5_14() > 35 && getRSI_15_14() > 40 && getRSI_30_14() > 40)
           {
            return;
           }
         orderPlaced=OrderSend(Symbol(),OP_BUY,myLot,(Bid),3,0,0,"algorithm.V_BUY_TEST2",MILLIONDOLLARBOT,0,Red);
        }
     }
  }

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void CheckForOpenBuy3()
  {
   if(
      ((isThisBarBULLISH(240) && getBarSize(240) > 20) || (isThisBarBULLISH(999) && getBarSize(999) > 20))
      && (getRSI_1_14() < 5 || getRSI_5_14() < 10 || getRSI_15_14() < 10 || getRSI_30_14() < 10 || getRSI_60_14() < 10 || getRSI_240_14() < 10 || getRSI_999_14() < 10)
//    && (getMA_60_20() < getLowestPrice(60,1) || AccountInfoDouble(ACCOUNT_EQUITY) > 2000)
//    && (getMA_60_50() < getLowestPrice(60,1) || AccountInfoDouble(ACCOUNT_EQUITY) > 2000)
      && (getMA_5_9() < getLowestPrice(60,1) || getMA_1_50() < getLowestPrice(1,1))
      && (getMA_5_20() < getLowestPrice(60,1) || getMA_1_50() < getLowestPrice(1,1))
      && getRSI_9997_14() < 65
      && getRSI_99930_14() < 65
      && (getRSI_9997_14() < 55 || AccountInfoDouble(ACCOUNT_EQUITY) > 500)
      && (getRSI_99930_14() < 55 || AccountInfoDouble(ACCOUNT_EQUITY) > 500)
   )
     {
      int maxOrder = 7;
      double myLot = 2;

      if(_Symbol == "Boom 300 Index" || _Symbol == "Boom 500 Index")
        {
         myLot = 1;
        }


      if(AccountInfoDouble(ACCOUNT_EQUITY) < 2000 && maxOrder > 0)
        {
         maxOrder = 3;
         myLot = 0.2;

         if(_Symbol == "Boom 500 Index")
           {
            myLot = 0.5;
           }

         if(_Symbol == "Boom 300 Index")
           {
            myLot = 1;
           }
        }

      if((calculateBuyOrders() < maxOrder || calculateBuyOrdersProfit() > 0) && maxOrder > 0 && calculateBuyOrders() < maxOrder)
        {
         orderPlaced=OrderSend(Symbol(),OP_BUY,myLot,(Bid),3,0,0,"algorithm.V_BUY_TEST3",MILLIONDOLLARBOT,0,Red);
        }
     }
  }


//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void CheckForOpenBuy4()
  {
   if(
      ((isThisBarBULLISH(240) && getBarSize(240) > 20) || (isThisBarBULLISH(999) && getBarSize(999) > 20))
      && howClose > 2
      && getMA_240_20() > getHighestPrice(240,1)
      && getRSI_1_14() <= 30
      && (getRSI_5_14() <= 40 || getRSI_15_14() <= 40)
      && (getRSI_240_14() <= 45 || AccountInfoDouble(ACCOUNT_EQUITY) > 500)
      && (getRSI_9997_14() < 65 || AccountInfoDouble(ACCOUNT_EQUITY) > 500)
      && (getRSI_99930_14() < 65 || AccountInfoDouble(ACCOUNT_EQUITY) > 500)
      && (getRSI_9997_14() < 55 || AccountInfoDouble(ACCOUNT_EQUITY) > 500)
      && (getRSI_99930_14() < 55 || AccountInfoDouble(ACCOUNT_EQUITY) > 500)
   )
     {
      int maxOrder = 3;
      double myLot = 2;

      if(_Symbol == "Boom 300 Index" || _Symbol == "Boom 500 Index")
        {
         myLot = 1;
        }


      if(AccountInfoDouble(ACCOUNT_EQUITY) < 2000 && maxOrder > 0)
        {
         maxOrder = 1;
         myLot = 0.2;

         if(_Symbol == "Boom 500 Index")
           {
            myLot = 0.5;
           }

         if(_Symbol == "Boom 300 Index")
           {
            myLot = 1;
           }
        }

      if((calculateBuyOrders() < maxOrder || calculateBuyOrdersProfit() > 0) && maxOrder > 0 && calculateBuyOrders() < maxOrder)
        {
         orderPlaced=OrderSend(Symbol(),OP_BUY,myLot,(Bid),3,0,0,"algorithm.V_BUY_TEST4",MILLIONDOLLARBOT,0,Red);
        }
     }
  }

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void CheckForOpenBuy5()
  {
   if(
      getRSI_1_14() < 30
      && (getRSI_5_14() < 32 || getRSI_15_14() < 32 || (AccountInfoDouble(ACCOUNT_EQUITY) > 500 && getRSI_5_14() < 45))
      && (getMA_1_20() < getLowestPrice(1,1) || getMA_5_20() < getLowestPrice(5,1) || getMA_15_20() < getLowestPrice(15,1) || getMA_30_20() < getLowestPrice(30,1) || getMA_60_20() < getLowestPrice(60,1) || getMA_240_20() < getLowestPrice(240,1))
      && (getRSI_60_14() < 50 || AccountInfoDouble(ACCOUNT_EQUITY) > 500)
      && getRSI_60_14() < 45
      && getRSI_9997_14() < 65
      && getRSI_99930_14() < 65
      && (getRSI_9997_14() < 50 || AccountInfoDouble(ACCOUNT_EQUITY) > 500)
      && (getRSI_99930_14() < 50 || AccountInfoDouble(ACCOUNT_EQUITY) > 500)
      && (getMA_1_500() < getLowestPrice(1,1) || AccountInfoDouble(ACCOUNT_EQUITY) > 500)
   )
     {
      int maxOrder = 3;
      double myLot = 2;

      if(_Symbol == "Boom 300 Index" || _Symbol == "Boom 500 Index")
        {
         myLot = 1;
        }


      if(AccountInfoDouble(ACCOUNT_EQUITY) < 2000 && maxOrder > 0)
        {
         maxOrder = 1;
         myLot = 0.2;

         if(_Symbol == "Boom 500 Index")
           {
            myLot = 0.5;
           }

         if(_Symbol == "Boom 300 Index")
           {
            myLot = 1;
           }
        }

      if((calculateBuyOrders() < maxOrder || calculateBuyOrdersProfit() > 0) && maxOrder > 0 && calculateBuyOrders() < maxOrder)
        {
         orderPlaced=OrderSend(Symbol(),OP_BUY,myLot,(Bid),3,0,0,"algorithm.V_BUY_TEST5",MILLIONDOLLARBOT,0,Red);
        }
     }
  }


//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
ENUM_TIMEFRAMES setTimeFrame(int time)
  {
   if(time==1)
     {
      return PERIOD_M1;
     }
   if(time==5)
     {
      return PERIOD_M5;
     }
   if(time==15)
     {
      return PERIOD_M15;
     }
   if(time==30)
     {
      return PERIOD_M30;
     }
   if(time==60)
     {
      return PERIOD_H1;
     }

   if(time==240)
     {
      return PERIOD_H4;
     }

   if(time==999)
     {
      return PERIOD_D1;
     }
   return 0;
  }


//+------------------------------------------------------------------+
//| Check if the current bar is BULLISH                              |
//+------------------------------------------------------------------+
bool isThisBarBULLISH(int time = 1, int period = 0)
  {
   return (iClose(Symbol(),setTimeFrame(time),period) > iOpen(Symbol(),setTimeFrame(time),period));
  }

//+------------------------------------------------------------------+
//| Check if the current bar is BEARISH                              |
//+------------------------------------------------------------------+
bool isThisBarBEARISH(int time = 1, int period=0)
  {
   return (iClose(Symbol(),setTimeFrame(time),period) < iOpen(Symbol(),setTimeFrame(time),period));
  }

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
int getStepsLastBull(int time,int period=0)
  {
   int count = 1;
   bool found = false;
// int count = 0;

   while(found == false)
     {
      if(isThisBarBULLISH(time,period) == true && getBarSize(time, period) > 20)
        {
         found = true;
         return count;
        }
      count++;
      period++;
     }
   return count;
  }

//Function to calculate Percentage Difference Between Two Numbers
//+------------------------------------------------------------------+
//| Calculate the absolute percentage difference between two values |
//+------------------------------------------------------------------+
double percdiff(double val1, double val2)
  {
// Handle cases where val2 is zero to avoid division by zero
   if(val2 == 0)
     {
      // Return a very large number or handle the zero division case as needed
      return val1 == 0 ? 0 : 10000; // Example: 10000% difference if val2 is zero
     }

// Calculate absolute percentage difference
   double percentageDiff = ((val1 - val2) / val2) * 100;
   return MathAbs(percentageDiff); // Return the absolute value
  }


//+------------------------------------------------------------------+
//| Calculate the signed percentage difference between two values    |
//+------------------------------------------------------------------+
double percdiff_signed(double val1, double val2)
  {
// Handle cases where val2 is zero to avoid division by zero
   if(val2 == 0)
     {
      // Return a very large number or handle the zero division case as needed
      return val1 == 0 ? 0 : 10000; // Example: 10000% difference if val2 is zero
     }

// Calculate signed percentage difference
   return ((val1 - val2) / val2) * 100;
  }

//+------------------------------------------------------------------+
//| Calculate the standard deviation for an array of values         |
//+------------------------------------------------------------------+
double stddev(double &values[], int size)
  {
// Calculate the mean of the values
   double mean = 0;
   for(int i = 0; i < size; i++)
     {
      mean += values[i];
     }
   mean /= size;

// Calculate the variance
   double variance = 0;
   for(int j = 0; j < size; j++)
     {
      variance += MathPow(values[j] - mean, 2);
     }
   variance /= size;

// Return the standard deviation (square root of variance)
   return MathSqrt(variance);
  }

//Function to get Random Number Within a Range
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
int RandNum()
  {
//loop keeps running until it finds a random number less than bounds
   for(int n = 0; n < 1; n++)
     {
      RandomNumber = MathRand();
      if(RandomNumber > 1 || RandomNumber < 0)
        {
         n--;
        }
     };
   return RandomNumber;
  };


//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
int getBarSize(int time=1, int period=0)
  {
   return(
            MathAbs(
               (iOpen(Symbol(),setTimeFrame(time),period))
               -(iClose(Symbol(),setTimeFrame(time),period))
            )*10
         );
  }


//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
bool allBullish()
  {
   return isThisBarBULLISH() && isThisBarBULLISH(5) && isThisBarBULLISH(15) && isThisBarBULLISH(30) && isThisBarBULLISH(60) && isThisBarBULLISH(240);
  }

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
bool allBearish()
  {
   return isThisBarBEARISH() && isThisBarBEARISH(5) && isThisBarBEARISH(15) && isThisBarBEARISH(30) && isThisBarBEARISH(60) && isThisBarBEARISH(240);
  }
//+------------------------------------------------------------------+


//+------------------------------------------------------------------+
//|                                                      ProjectName |
//|                                      Copyright 2020, CompanyName |
//|                                       http://www.companyname.net |
//+------------------------------------------------------------------+

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
double getBearP_1(const int index=0)
  {
   double bp[1];
// reset error code
   ResetLastError();
// fill a part of the ma array with values from the indicator buffer that has 0 index
   if(CopyBuffer(BearsPowerHandle_1,0,index,1,bp) < 0)
     {
      // if the copying fails, tell the error code
      PrintFormat("Failed to copy data from the indicator, error code %d",GetLastError());
      // quit with zero result - it means that the indicator is considered as not calculated
      return(0);
     }
   return(bp[0]);
  }

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
double getBullP_1(const int index=0)
  {
   double bp[1];
// reset error code
   ResetLastError();
// fill a part of the ma array with values from the indicator buffer that has 0 index
   if(CopyBuffer(BullsPowerHandle_1,0,index,1,bp) < 0)
     {
      // if the copying fails, tell the error code
      PrintFormat("Failed to copy data from the indicator, error code %d",GetLastError());
      // quit with zero result - it means that the indicator is considered as not calculated
      return(0);
     }
   return(bp[0]);
  }

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
double getBearP_5(const int index=0)
  {
   double bp[1];
// reset error code
   ResetLastError();
// fill a part of the ma array with values from the indicator buffer that has 0 index
   if(CopyBuffer(BearsPowerHandle_5,0,index,1,bp) < 0)
     {
      // if the copying fails, tell the error code
      PrintFormat("Failed to copy data from the indicator, error code %d",GetLastError());
      // quit with zero result - it means that the indicator is considered as not calculated
      return(0);
     }
   return(bp[0]);
  }

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
double getBullP_5(const int index=0)
  {
   double bp[1];
// reset error code
   ResetLastError();
// fill a part of the ma array with values from the indicator buffer that has 0 index
   if(CopyBuffer(BullsPowerHandle_5,0,index,1,bp) < 0)
     {
      // if the copying fails, tell the error code
      PrintFormat("Failed to copy data from the indicator, error code %d",GetLastError());
      // quit with zero result - it means that the indicator is considered as not calculated
      return(0);
     }
   return(bp[0]);
  }

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
double getBearP_15(const int index=0)
  {
   double bp[1];
// reset error code
   ResetLastError();
// fill a part of the ma array with values from the indicator buffer that has 0 index
   if(CopyBuffer(BearsPowerHandle_15,0,index,1,bp) < 0)
     {
      // if the copying fails, tell the error code
      PrintFormat("Failed to copy data from the indicator, error code %d",GetLastError());
      // quit with zero result - it means that the indicator is considered as not calculated
      return(0);
     }
   return(bp[0]);
  }

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
double getBullP_15(const int index=0)
  {
   double bp[1];
// reset error code
   ResetLastError();
// fill a part of the ma array with values from the indicator buffer that has 0 index
   if(CopyBuffer(BullsPowerHandle_15,0,index,1,bp) < 0)
     {
      // if the copying fails, tell the error code
      PrintFormat("Failed to copy data from the indicator, error code %d",GetLastError());
      // quit with zero result - it means that the indicator is considered as not calculated
      return(0);
     }
   return(bp[0]);
  }

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
double getRSI_1_14(const int index=0)
  {
   double rsi[1];
// reset error code
   ResetLastError();
// fill a part of the ma array with values from the indicator buffer that has 0 index
   if(CopyBuffer(RSIHandle_1_14,0,index,1,rsi) < 0)
     {
      // if the copying fails, tell the error code
      PrintFormat("Failed to copy data from the iMA indicator, error code %d",GetLastError());
      // quit with zero result - it means that the indicator is considered as not calculated
      return(0);
     }
   return(rsi[0]);
  }


//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
double getRSI_5_14(const int index=0)
  {
   double rsi[1];
// reset error code
   ResetLastError();
// fill a part of the ma array with values from the indicator buffer that has 0 index
   if(CopyBuffer(RSIHandle_5_14,0,index,1,rsi) < 0)
     {
      // if the copying fails, tell the error code
      PrintFormat("Failed to copy data from the iMA indicator, error code %d",GetLastError());
      // quit with zero result - it means that the indicator is considered as not calculated
      return(0);
     }
   return(rsi[0]);
  }

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
double getRSI_15_14(const int index=0)
  {
   double rsi[1];
// reset error code
   ResetLastError();
// fill a part of the ma array with values from the indicator buffer that has 0 index
   if(CopyBuffer(RSIHandle_15_14,0,index,1,rsi) < 0)
     {
      // if the copying fails, tell the error code
      PrintFormat("Failed to copy data from the iMA indicator, error code %d",GetLastError());
      // quit with zero result - it means that the indicator is considered as not calculated
      return(0);
     }
   return(rsi[0]);
  }

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
double getRSI_30_14(const int index=0)
  {
   double rsi[1];
// reset error code
   ResetLastError();
// fill a part of the ma array with values from the indicator buffer that has 0 index
   if(CopyBuffer(RSIHandle_30_14,0,index,1,rsi) < 0)
     {
      // if the copying fails, tell the error code
      PrintFormat("Failed to copy data from the iMA indicator, error code %d",GetLastError());
      // quit with zero result - it means that the indicator is considered as not calculated
      return(0);
     }
   return(rsi[0]);
  }


//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
double getRSI_60_14(const int index=0)
  {
   double rsi[1];
// reset error code
   ResetLastError();
// fill a part of the ma array with values from the indicator buffer that has 0 index
   if(CopyBuffer(RSIHandle_60_14,0,index,1,rsi) < 0)
     {
      // if the copying fails, tell the error code
      PrintFormat("Failed to copy data from the RSI 60 indicator, error code %d",GetLastError());
      // quit with zero result - it means that the indicator is considered as not calculated
      return(0);
     }
   return(rsi[0]);
  }


//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
double getRSI_240_14(const int index=0)
  {
   double rsi[1];
// reset error code
   ResetLastError();
// fill a part of the ma array with values from the indicator buffer that has 0 index
   if(CopyBuffer(RSIHandle_240_14,0,index,1,rsi) < 0)
     {
      // if the copying fails, tell the error code
      PrintFormat("Failed to copy data from the RSI 240 indicator, error code %d",GetLastError());
      // quit with zero result - it means that the indicator is considered as not calculated
      return(0);
     }
   return(rsi[0]);
  }

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
double getRSI_999_14(const int index=0)
  {
   double rsi[1];
// reset error code
   ResetLastError();
// fill a part of the ma array with values from the indicator buffer that has 0 index
   if(CopyBuffer(RSIHandle_999_14,0,index,1,rsi) < 0)
     {
      // if the copying fails, tell the error code
      PrintFormat("Failed to copy data from the RSI Daily indicator, error code %d",GetLastError());
      // quit with zero result - it means that the indicator is considered as not calculated
      return(0);
     }
   return(rsi[0]);
  }


//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
double getRSI_9997_14(const int index=0)
  {
   double rsi[1];
// reset error code
   ResetLastError();
// fill a part of the ma array with values from the indicator buffer that has 0 index
   if(CopyBuffer(RSIHandle_9997_14,0,index,1,rsi) < 0)
     {
      // if the copying fails, tell the error code
      PrintFormat("Failed to copy data from the RSI Weekly indicator, error code %d",GetLastError());
      // quit with zero result - it means that the indicator is considered as not calculated
      return(0);
     }
   return(rsi[0]);
  }


//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
double getRSI_99930_14(const int index=0)
  {
   double rsi[1];
// reset error code
   ResetLastError();
// fill a part of the ma array with values from the indicator buffer that has 0 index
   if(CopyBuffer(RSIHandle_99930_14,0,index,1,rsi) < 0)
     {
      // if the copying fails, tell the error code
      PrintFormat("Failed to copy data from the RSI Monthly indicator, error code %d",GetLastError());
      // quit with zero result - it means that the indicator is considered as not calculated
      return(0);
     }
   return(rsi[0]);
  }

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
double getMA_240_200(const int index=0)
  {
   double ma[1];
// reset error code
   ResetLastError();
// fill a part of the ma array with values from the indicator buffer that has 0 index
   if(CopyBuffer(MAHandle_240_200,0,index,1,ma) < 0)
     {
      // if the copying fails, tell the error code
      PrintFormat("Failed to copy data from the iMA indicator, error code %d",GetLastError());
      // quit with zero result - it means that the indicator is considered as not calculated
      return(0);
     }
   return(ma[0]);
  }

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
double getMA_240_50(const int index=0)
  {
   double ma[1];
// reset error code
   ResetLastError();
// fill a part of the ma array with values from the indicator buffer that has 0 index
   if(CopyBuffer(MAHandle_240_50,0,index,1,ma) < 0)
     {
      // if the copying fails, tell the error code
      PrintFormat("Failed to copy data from the iMA indicator, error code %d",GetLastError());
      // quit with zero result - it means that the indicator is considered as not calculated
      return(0);
     }
   return(ma[0]);
  }

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
double getMA_240_20(const int index=0)
  {
   double ma[1];
// reset error code
   ResetLastError();
// fill a part of the ma array with values from the indicator buffer that has 0 index
   if(CopyBuffer(MAHandle_240_20,0,index,1,ma) < 0)
     {
      // if the copying fails, tell the error code
      PrintFormat("Failed to copy data from the iMA indicator, error code %d",GetLastError());
      // quit with zero result - it means that the indicator is considered as not calculated
      return(0);
     }
   return(ma[0]);
  }

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
double getMA_240(const int index=0)
  {
   double ma[1];
// reset error code
   ResetLastError();
// fill a part of the ma array with values from the indicator buffer that has 0 index
   if(CopyBuffer(MAHandle_240,0,index,1,ma) < 0)
     {
      // if the copying fails, tell the error code
      PrintFormat("Failed to copy data from the iMA indicator, error code %d",GetLastError());
      // quit with zero result - it means that the indicator is considered as not calculated
      return(0);
     }
   return(ma[0]);
  }


//
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
double getMA_60_200(const int index=0)
  {
   double ma[1];
// reset error code
   ResetLastError();
// fill a part of the ma array with values from the indicator buffer that has 0 index
   if(CopyBuffer(MAHandle_60_200,0,index,1,ma) < 0)
     {
      // if the copying fails, tell the error code
      PrintFormat("Failed to copy data from the iMA indicator, error code %d",GetLastError());
      // quit with zero result - it means that the indicator is considered as not calculated
      return(0);
     }
   return(ma[0]);
  }

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
double getMA_60_50(const int index=0)
  {
   double ma[1];
// reset error code
   ResetLastError();
// fill a part of the ma array with values from the indicator buffer that has 0 index
   if(CopyBuffer(MAHandle_60_50,0,index,1,ma) < 0)
     {
      // if the copying fails, tell the error code
      PrintFormat("Failed to copy data from the iMA indicator, error code %d",GetLastError());
      // quit with zero result - it means that the indicator is considered as not calculated
      return(0);
     }
   return(ma[0]);
  }

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
double getMA_60_20(const int index=0)
  {
   double ma[1];
// reset error code
   ResetLastError();
// fill a part of the ma array with values from the indicator buffer that has 0 index
   if(CopyBuffer(MAHandle_60_20,0,index,1,ma) < 0)
     {
      // if the copying fails, tell the error code
      PrintFormat("Failed to copy data from the iMA indicator, error code %d",GetLastError());
      // quit with zero result - it means that the indicator is considered as not calculated
      return(0);
     }
   return(ma[0]);
  }

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
double getMA_60(const int index=0)
  {
   double ma[1];
// reset error code
   ResetLastError();
// fill a part of the ma array with values from the indicator buffer that has 0 index
   if(CopyBuffer(MAHandle_60,0,index,1,ma) < 0)
     {
      // if the copying fails, tell the error code
      PrintFormat("Failed to copy data from the iMA indicator, error code %d",GetLastError());
      // quit with zero result - it means that the indicator is considered as not calculated
      return(0);
     }
   return(ma[0]);
  }

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
double getMA_30_200(const int index=0)
  {
   double ma[1];
// reset error code
   ResetLastError();
// fill a part of the ma array with values from the indicator buffer that has 0 index
   if(CopyBuffer(MAHandle_30_200,0,index,1,ma) < 0)
     {
      // if the copying fails, tell the error code
      PrintFormat("Failed to copy data from the iMA indicator, error code %d",GetLastError());
      // quit with zero result - it means that the indicator is considered as not calculated
      return(0);
     }
   return(ma[0]);
  }

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
double getMA_30_50(const int index=0)
  {
   double ma[1];
// reset error code
   ResetLastError();
// fill a part of the ma array with values from the indicator buffer that has 0 index
   if(CopyBuffer(MAHandle_30_50,0,index,1,ma) < 0)
     {
      // if the copying fails, tell the error code
      PrintFormat("Failed to copy data from the iMA indicator, error code %d",GetLastError());
      // quit with zero result - it means that the indicator is considered as not calculated
      return(0);
     }
   return(ma[0]);
  }

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
double getMA_30_20(const int index=0)
  {
   double ma[1];
// reset error code
   ResetLastError();
// fill a part of the ma array with values from the indicator buffer that has 0 index
   if(CopyBuffer(MAHandle_30_20,0,index,1,ma) < 0)
     {
      // if the copying fails, tell the error code
      PrintFormat("Failed to copy data from the iMA indicator, error code %d",GetLastError());
      // quit with zero result - it means that the indicator is considered as not calculated
      return(0);
     }
   return(ma[0]);
  }

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
double getMA_30(const int index=0)
  {
   double ma[1];
// reset error code
   ResetLastError();
// fill a part of the ma array with values from the indicator buffer that has 0 index
   if(CopyBuffer(MAHandle_30,0,index,1,ma) < 0)
     {
      // if the copying fails, tell the error code
      PrintFormat("Failed to copy data from the iMA indicator, error code %d",GetLastError());
      // quit with zero result - it means that the indicator is considered as not calculated
      return(0);
     }
   return(ma[0]);
  }

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
double getMA_15_200(const int index=0)
  {
   double ma[1];
// reset error code
   ResetLastError();
// fill a part of the ma array with values from the indicator buffer that has 0 index
   if(CopyBuffer(MAHandle_15_200,0,index,1,ma) < 0)
     {
      // if the copying fails, tell the error code
      PrintFormat("Failed to copy data from the iMA indicator, error code %d",GetLastError());
      // quit with zero result - it means that the indicator is considered as not calculated
      return(0);
     }
   return(ma[0]);
  }

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
double getMA_15_50(const int index=0)
  {
   double ma[1];
// reset error code
   ResetLastError();
// fill a part of the ma array with values from the indicator buffer that has 0 index
   if(CopyBuffer(MAHandle_15_50,0,index,1,ma) < 0)
     {
      // if the copying fails, tell the error code
      PrintFormat("Failed to copy data from the iMA indicator, error code %d",GetLastError());
      // quit with zero result - it means that the indicator is considered as not calculated
      return(0);
     }
   return(ma[0]);
  }

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
double getMA_15_20(const int index=0)
  {
   double ma[1];
// reset error code
   ResetLastError();
// fill a part of the ma array with values from the indicator buffer that has 0 index
   if(CopyBuffer(MAHandle_15_20,0,index,1,ma) < 0)
     {
      // if the copying fails, tell the error code
      PrintFormat("Failed to copy data from the iMA indicator, error code %d",GetLastError());
      // quit with zero result - it means that the indicator is considered as not calculated
      return(0);
     }
   return(ma[0]);
  }

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
double getMA_15(const int index=0)
  {
   double ma[1];
// reset error code
   ResetLastError();
// fill a part of the ma array with values from the indicator buffer that has 0 index
   if(CopyBuffer(MAHandle_15,0,index,1,ma) < 0)
     {
      // if the copying fails, tell the error code
      PrintFormat("Failed to copy data from the iMA indicator, error code %d",GetLastError());
      // quit with zero result - it means that the indicator is considered as not calculated
      return(0);
     }
   return(ma[0]);
  }

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
double getMA_5_200(const int index=0)
  {
   double ma[1];
// reset error code
   ResetLastError();
// fill a part of the ma array with values from the indicator buffer that has 0 index
   if(CopyBuffer(MAHandle_5_200,0,index,1,ma) < 0)
     {
      // if the copying fails, tell the error code
      PrintFormat("Failed to copy data from the iMA indicator, error code %d",GetLastError());
      // quit with zero result - it means that the indicator is considered as not calculated
      return(0);
     }
   return(ma[0]);
  }

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
double getMA_5(const int index=0)
  {
   double ma[1];
// reset error code
   ResetLastError();
// fill a part of the ma array with values from the indicator buffer that has 0 index
   if(CopyBuffer(MAHandle_5,0,index,1,ma) < 0)
     {
      // if the copying fails, tell the error code
      PrintFormat("Failed to copy data from the iMA indicator, error code %d",GetLastError());
      // quit with zero result - it means that the indicator is considered as not calculated
      return(0);
     }
   return(ma[0]);
  }

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
double getMA_5_20(const int index=0)
  {
   double ma[1];
// reset error code
   ResetLastError();
// fill a part of the ma array with values from the indicator buffer that has 0 index
   if(CopyBuffer(MAHandle_5_20,0,index,1,ma) < 0)
     {
      // if the copying fails, tell the error code
      PrintFormat("Failed to copy data from the iMA indicator, error code %d",GetLastError());
      // quit with zero result - it means that the indicator is considered as not calculated
      return(0);
     }
   return(ma[0]);
  }

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
double getMA_5_9(const int index=0)
  {
   double ma[1];
// reset error code
   ResetLastError();
// fill a part of the ma array with values from the indicator buffer that has 0 index
   if(CopyBuffer(MAHandle_5_9,0,index,1,ma) < 0)
     {
      // if the copying fails, tell the error code
      PrintFormat("Failed to copy data from the iMA indicator, error code %d",GetLastError());
      // quit with zero result - it means that the indicator is considered as not calculated
      return(0);
     }
   return(ma[0]);
  }


//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
double getMA_1_9(const int index=0)
  {
   double ma[1];
// reset error code
   ResetLastError();
// fill a part of the ma array with values from the indicator buffer that has 0 index
   if(CopyBuffer(MAHandle_1_9,0,index,1,ma) < 0)
     {
      // if the copying fails, tell the error code
      PrintFormat("Failed to copy data from the iMA indicator, error code %d",GetLastError());
      // quit with zero result - it means that the indicator is considered as not calculated
      return(0);
     }
   return(ma[0]);
  }

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
double getMA_1_20(const int index=0)
  {
   double ma[1];
// reset error code
   ResetLastError();
// fill a part of the ma array with values from the indicator buffer that has 0 index
   if(CopyBuffer(MAHandle_1_20,0,index,1,ma) < 0)
     {
      // if the copying fails, tell the error code
      PrintFormat("Failed to copy data from the iMA indicator, error code %d",GetLastError());
      // quit with zero result - it means that the indicator is considered as not calculated
      return(0);
     }
   return(ma[0]);
  }

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
double getMA_1_50(const int index=0)
  {
   double ma[1];
// reset error code
   ResetLastError();
// fill a part of the ma array with values from the indicator buffer that has 0 index
   if(CopyBuffer(MAHandle_1_50,0,index,1,ma) < 0)
     {
      // if the copying fails, tell the error code
      PrintFormat("Failed to copy data from the iMA indicator, error code %d",GetLastError());
      // quit with zero result - it means that the indicator is considered as not calculated
      return(0);
     }
   return(ma[0]);
  }

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
double getMA_1_200(const int index=0)
  {
   double ma[1];
// reset error code
   ResetLastError();
// fill a part of the ma array with values from the indicator buffer that has 0 index
   if(CopyBuffer(MAHandle_1_200,0,index,1,ma) < 0)
     {
      // if the copying fails, tell the error code
      PrintFormat("Failed to copy data from the iMA 1_200 indicator, error code %d",GetLastError());
      // quit with zero result - it means that the indicator is considered as not calculated
      return(0);
     }
   return(ma[0]);
  }


//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
double getMA_1_500(const int index=0)
  {
   double ma[1];
// reset error code
   ResetLastError();
// fill a part of the ma array with values from the indicator buffer that has 0 index
   if(CopyBuffer(MAHandle_1_500,0,index,1,ma) < 0)
     {
      // if the copying fails, tell the error code
      PrintFormat("Failed to copy data from the iMA 1_500 indicator, error code %d",GetLastError());
      // quit with zero result - it means that the indicator is considered as not calculated
      return(0);
     }
   return(ma[0]);
  }

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
double getMA_5_500(const int index=0)
  {
   double ma[1];
// reset error code
   ResetLastError();
// fill a part of the ma array with values from the indicator buffer that has 0 index
   if(CopyBuffer(MAHandle_5_500,0,index,1,ma) < 0)
     {
      // if the copying fails, tell the error code
      PrintFormat("Failed to copy data from the iMA 5_500 indicator, error code %d",GetLastError());
      // quit with zero result - it means that the indicator is considered as not calculated
      return(0);
     }
   return(ma[0]);
  }

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
double getMA_15_500(const int index=0)
  {
   double ma[1];
// reset error code
   ResetLastError();
// fill a part of the ma array with values from the indicator buffer that has 0 index
   if(CopyBuffer(MAHandle_15_500,0,index,1,ma) < 0)
     {
      // if the copying fails, tell the error code
      PrintFormat("Failed to copy data from the iMA 5_500 indicator, error code %d",GetLastError());
      // quit with zero result - it means that the indicator is considered as not calculated
      return(0);
     }
   return(ma[0]);
  }


//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
double getMA_30_500(const int index=0)
  {
   double ma[1];
// reset error code
   ResetLastError();
// fill a part of the ma array with values from the indicator buffer that has 0 index
   if(CopyBuffer(MAHandle_30_500,0,index,1,ma) < 0)
     {
      // if the copying fails, tell the error code
      PrintFormat("Failed to copy data from the iMA 5_500 indicator, error code %d",GetLastError());
      // quit with zero result - it means that the indicator is considered as not calculated
      return(0);
     }
   return(ma[0]);
  }


//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
double getMA_60_500(const int index=0)
  {
   double ma[1];
// reset error code
   ResetLastError();
// fill a part of the ma array with values from the indicator buffer that has 0 index
   if(CopyBuffer(MAHandle_60_500,0,index,1,ma) < 0)
     {
      // if the copying fails, tell the error code
      PrintFormat("Failed to copy data from the iMA 5_500 indicator, error code %d",GetLastError());
      // quit with zero result - it means that the indicator is considered as not calculated
      return(0);
     }
   return(ma[0]);
  }


//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
double getMA_240_500(const int index=0)
  {
   double ma[1];
// reset error code
   ResetLastError();
// fill a part of the ma array with values from the indicator buffer that has 0 index
   if(CopyBuffer(MAHandle_240_500,0,index,1,ma) < 0)
     {
      // if the copying fails, tell the error code
      PrintFormat("Failed to copy data from the iMA 5_500 indicator, error code %d",GetLastError());
      // quit with zero result - it means that the indicator is considered as not calculated
      return(0);
     }
   return(ma[0]);
  }

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
double getStochastic_Main(int time=0)
  {
   double K[];
   ArraySetAsSeries(K,true);
   int stochastic_output = iStochastic(_Symbol,PERIOD_M1,5,3,3,MODE_SMA,STO_LOWHIGH);
   CopyBuffer(stochastic_output,0,0,15,K);
   return NormalizeDouble(K[time],1);
  }

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
double getStochastic_Signal(int time=0)
  {
   double D[];
   ArraySetAsSeries(D,true);
   int stochastic_output = iStochastic(_Symbol,PERIOD_M1,5,3,3,MODE_SMA,STO_LOWHIGH);
   CopyBuffer(stochastic_output,1,0,15,D);
   if(D[time] < 0)
      D[time]=0;
   return NormalizeDouble(D[time],1);
  }

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
double getStochastic_Main_5(int time=0)
  {
   double K[];
   ArraySetAsSeries(K,true);
   int stochastic_output = iStochastic(_Symbol,PERIOD_M5,5,3,3,MODE_SMA,STO_LOWHIGH);
   CopyBuffer(stochastic_output,0,0,15,K);
   return NormalizeDouble(K[time],1);
  }

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
double getStochastic_Signal_5(int time=0)
  {
   double D[];
   ArraySetAsSeries(D,true);
   int stochastic_output = iStochastic(_Symbol,PERIOD_M5,5,3,3,MODE_SMA,STO_LOWHIGH);
   CopyBuffer(stochastic_output,1,0,15,D);
   if(D[time] < 0)
      D[time]=0;
   return NormalizeDouble(D[time],1);
  }

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
double getStochastic_Main_15(int time=0)
  {
   double K[];
   ArraySetAsSeries(K,true);
   int stochastic_output = iStochastic(_Symbol,PERIOD_M15,5,3,3,MODE_SMA,STO_LOWHIGH);
   CopyBuffer(stochastic_output,0,0,15,K);
   return NormalizeDouble(K[time],1);
  }

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
double getStochastic_Signal_15(int time=0)
  {
   double D[];
   ArraySetAsSeries(D,true);
   int stochastic_output = iStochastic(_Symbol,PERIOD_M15,5,3,3,MODE_SMA,STO_LOWHIGH);
   CopyBuffer(stochastic_output,1,0,15,D);
   if(D[time] < 0)
      D[time]=0;
   return NormalizeDouble(D[time],1);
  }


//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
double getStochastic_Main_30(int time=0)
  {
   double K[];
   ArraySetAsSeries(K,true);
   int stochastic_output = iStochastic(_Symbol,PERIOD_M30,5,3,3,MODE_SMA,STO_LOWHIGH);
   CopyBuffer(stochastic_output,0,0,15,K);
   return NormalizeDouble(K[time],1);
  }

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
double getStochastic_Signal_30(int time=0)
  {
   double D[];
   ArraySetAsSeries(D,true);
   int stochastic_output = iStochastic(_Symbol,PERIOD_M30,5,3,3,MODE_SMA,STO_LOWHIGH);
   CopyBuffer(stochastic_output,1,0,15,D);
   if(D[time] < 0)
      D[time]=0;
   return NormalizeDouble(D[time],1);
  }


//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
double getStochastic_Main_60(int time=0)
  {
   double K[];
   ArraySetAsSeries(K,true);
   int stochastic_output = iStochastic(_Symbol,PERIOD_H1,5,3,3,MODE_SMA,STO_LOWHIGH);
   CopyBuffer(stochastic_output,0,0,15,K);
   return NormalizeDouble(K[time],1);
  }

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
double getStochastic_Signal_60(int time=0)
  {
   double D[];
   ArraySetAsSeries(D,true);
   int stochastic_output = iStochastic(_Symbol,PERIOD_H1,5,3,3,MODE_SMA,STO_LOWHIGH);
   CopyBuffer(stochastic_output,1,0,15,D);
   if(D[time] < 0)
      D[time]=0;
   return NormalizeDouble(D[time],1);
  }


//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
double getStochastic_Main_240(int time=0)
  {
   double K[];
   ArraySetAsSeries(K,true);
   int stochastic_output = iStochastic(_Symbol,PERIOD_H4,5,3,3,MODE_SMA,STO_LOWHIGH);
   CopyBuffer(stochastic_output,0,0,15,K);
   return NormalizeDouble(K[time],1);
  }

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
double getStochastic_Signal_240(int time=0)
  {
   double D[];
   ArraySetAsSeries(D,true);
   int stochastic_output = iStochastic(_Symbol,PERIOD_H4,5,3,3,MODE_SMA,STO_LOWHIGH);
   CopyBuffer(stochastic_output,1,0,15,D);
   if(D[time] < 0)
      D[time]=0;
   return NormalizeDouble(D[time],1);
  }


//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
double getStochastic_Main_999(int time=0)
  {
   double K[];
   ArraySetAsSeries(K,true);
   int stochastic_output = iStochastic(_Symbol,PERIOD_D1,5,3,3,MODE_SMA,STO_LOWHIGH);
   CopyBuffer(stochastic_output,0,0,15,K);
   return NormalizeDouble(K[time],1);
  }

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
double getStochastic_Signal_999(int time=0)
  {
   double D[];
   ArraySetAsSeries(D,true);
   int stochastic_output = iStochastic(_Symbol,PERIOD_D1,5,3,3,MODE_SMA,STO_LOWHIGH);
   CopyBuffer(stochastic_output,1,0,15,D);
   if(D[time] < 0)
      D[time]=0;
   return NormalizeDouble(D[time],1);
  }


//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
bool allMAUp()
  {
   double pdValue1 = 0.01;

   if(
      getMA_1_9() > currentHigh_M1 && percdiff(currentHigh_M1, getMA_1_9()) > pdValue1
      && getMA_1_20() > currentHigh_M1 && percdiff(currentHigh_M1, getMA_1_20()) > pdValue1
      && getMA_1_50() > currentHigh_M1 && percdiff(currentHigh_M1, getMA_1_50()) > pdValue1
      && getMA_1_200() > currentHigh_M1 && percdiff(currentHigh_M1, getMA_1_200()) > pdValue1
      && getMA_5_9() > currentHigh_M5 && percdiff(currentHigh_M5, getMA_5_9()) > pdValue1
      && getMA_5_20() > currentHigh_M5 && percdiff(currentHigh_M5, getMA_5_20()) > pdValue1
      && getMA_5() > currentHigh_M5 && percdiff(currentHigh_M5, getMA_5()) > pdValue1
      && getMA_5_200() > currentHigh_M5 && percdiff(currentHigh_M5, getMA_5_200()) > pdValue1
      && getMA_15() > currentHigh_M15 && percdiff(currentHigh_M15, getMA_15()) > pdValue1
      && getMA_15_20() > currentHigh_M15 && percdiff(currentHigh_M15, getMA_15_20()) > pdValue1
      && getMA_15_50() > currentHigh_M15 && percdiff(currentHigh_M15, getMA_15_50()) > pdValue1
      && getMA_15_200() > currentHigh_M15 && percdiff(currentHigh_M15, getMA_15_200()) > pdValue1
      && getMA_30() > currentHigh_M30 && percdiff(currentHigh_M30, getMA_30()) > pdValue1
      && getMA_30_20() > currentHigh_M30 && percdiff(currentHigh_M30, getMA_30_20()) > pdValue1
      && getMA_30_50() > currentHigh_M30 && percdiff(currentHigh_M30, getMA_30_50()) > pdValue1
      && getMA_30_200() > currentHigh_M30 && percdiff(currentHigh_M30, getMA_30_200()) > pdValue1
      && getMA_60() > currentHigh_H1 && percdiff(currentHigh_H1, getMA_60()) > pdValue1
      && getMA_60_20() > currentHigh_H1 && percdiff(currentHigh_H1, getMA_60_20()) > pdValue1
      && getMA_60_50() > currentHigh_H1 && percdiff(currentHigh_H1, getMA_60_50()) > pdValue1
      && getMA_60_200() > currentHigh_H1 && percdiff(currentHigh_H1, getMA_60_200()) > pdValue1
   )
     {
      return true;
     }
   return false;
  }

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
bool allMADown()
  {
   double pdValue1 = 0.01;
   if(
      getMA_1_9() < currentLow_M1 && percdiff(getMA_1_9(), currentLow_M1) > pdValue1
      && getMA_1_20() < currentLow_M1 && percdiff(getMA_1_20(), currentLow_M1) > pdValue1
      && getMA_1_50() < currentLow_M1 && percdiff(getMA_1_50(), currentLow_M1) > pdValue1
      && getMA_1_200() < currentLow_M1 && percdiff(getMA_1_200(), currentLow_M1) > pdValue1
      && getMA_5_9() < currentLow_M5 && percdiff(getMA_5_9(), currentLow_M5) > pdValue1
      && getMA_5_20() < currentLow_M5 && percdiff(getMA_5_20(), currentLow_M5) > pdValue1
      && getMA_5() < currentLow_M5 && percdiff(getMA_5(), currentLow_M5) > pdValue1
      && getMA_5_200() < currentLow_M5 && percdiff(getMA_5_200(), currentLow_M5) > pdValue1
      && getMA_15() < currentLow_M15 && percdiff(getMA_15(), currentLow_M15) > pdValue1
      && getMA_15_20() < currentLow_M15 && percdiff(getMA_15_20(), currentLow_M15) > pdValue1
      && getMA_15_50() < currentLow_M15 && percdiff(getMA_15_50(), currentLow_M15) > pdValue1
      && getMA_15_200() < currentLow_M15 && percdiff(getMA_15_200(), currentLow_M15) > pdValue1
      && getMA_30() < currentLow_M30 && percdiff(getMA_30(), currentLow_M30) > pdValue1
      && getMA_30_20() < currentLow_M30 && percdiff(getMA_30_20(), currentLow_M30) > pdValue1
      && getMA_30_50() < currentLow_M30 && percdiff(getMA_30_50(), currentLow_M30) > pdValue1
      && getMA_30_200() < currentLow_M30 && percdiff(getMA_30_200(), currentLow_M30) > pdValue1
      && getMA_60() < currentLow_H1 && percdiff(getMA_60(), currentLow_H1) > pdValue1
      && getMA_60_20() < currentLow_H1 && percdiff(getMA_60_20(), currentLow_H1) > pdValue1
      && getMA_60_50() < currentLow_H1 && percdiff(getMA_60_50(), currentLow_H1) > pdValue1
      && getMA_60_200() < currentLow_H1 && percdiff(getMA_60_200(), currentLow_H1) > pdValue1
   )
     {
      return true;
     }
   return false;

  }


//+------------------------------------------------------------------+


//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
double getHighestPrice(int time=1, int period=0)
  {
   return iHigh(NULL,setTimeFrame(time),iHighest(NULL, setTimeFrame(time), MODE_HIGH, period, 0));
  }

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
double getLowestPrice(int time=1, int period=0)
  {
   return iLow(NULL,setTimeFrame(time),iLowest(NULL, setTimeFrame(time), MODE_LOW, period, 0));
  }

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
bool priceRelativelyHigh()
  {
   if(percdiff(currentPrice, priceHighest_M1) < 0.5 && percdiff(currentPrice, priceHighest_M1_75) < 0.5)
     {
      // Alert(percdiff(currentPrice, priceHighest_M1_75));
      return true;
     }
   return false;
  }

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
bool priceRelativelyLow()
  {
   if(percdiff(priceLowest_M1, currentPrice) < 0.5 || percdiff(currentPrice, priceLowest_M1_75) < 0.5)
     {
      // Alert(percdiff(currentPrice, priceLowest_M1_75));
      return true;
     }
   return false;
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
bool priceTrendingUp_1()
  {
   if(currentPrice > iClose(Symbol(),PERIOD_M1,1)
      && currentPrice > iClose(Symbol(),PERIOD_M1,5)
      && currentPrice > iClose(Symbol(),PERIOD_M1,10)
      && isThisBarBULLISH()
     )
      return true;
   return false;
  }

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
bool priceTrendingDown_1()
  {
   if(currentPrice < iClose(Symbol(),PERIOD_M1,1)
      && currentPrice < iClose(Symbol(),PERIOD_M1,5)
      && currentPrice < iClose(Symbol(),PERIOD_M1,10)
      && isThisBarBEARISH()
     )
      return true;
   return false;
  }

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
bool priceTrendingUp_5()
  {
   if(iClose(Symbol(),PERIOD_M5,0) > iClose(Symbol(),PERIOD_M5,1)
      && iClose(Symbol(),PERIOD_M5,0) > iClose(Symbol(),PERIOD_M5,2)
      && isThisBarBULLISH(5,0)
      && isThisBarBULLISH(5,1)
     )
      return true;
   return false;
  }

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
bool priceTrendingDown_5()
  {
   if(iClose(Symbol(),PERIOD_M5,0) < iClose(Symbol(),PERIOD_M5,1)
      && iClose(Symbol(),PERIOD_M5,0) < iClose(Symbol(),PERIOD_M5,2)
      && isThisBarBEARISH(5,0)
      && isThisBarBEARISH(5,1)
     )
      return true;
   return false;
  }

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
bool priceTrendingUp_15()
  {
   if(iClose(Symbol(),PERIOD_M15,0) > iClose(Symbol(),PERIOD_M15,1)
      && iClose(Symbol(),PERIOD_M15,0) > iClose(Symbol(),PERIOD_M15,2)
      && isThisBarBULLISH(15,0)
      && isThisBarBULLISH(15,1)
     )
      return true;
   return false;
  }

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
bool priceTrendingDown_15()
  {
   if(iClose(Symbol(),PERIOD_M15,0) < iClose(Symbol(),PERIOD_M15,1)
      && iClose(Symbol(),PERIOD_M15,0) < iClose(Symbol(),PERIOD_M15,2)
      && isThisBarBEARISH(15,0)
      && isThisBarBEARISH(15,1)
     )
      return true;
   return false;
  }

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void calcPriceHistory()
  {
   int ARRAY_LENGTH = 50;
   for(int p=50; p>0; p--)
     {
      priceHistory[p] = priceHistory[p-1];
     }
   priceHistory[0] = currentPrice;
  }

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
double getPriceHistory(int i)
  {
   return priceHistory[i];
  }

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
bool priceHistoryGoingUp(int i)
  {
   int count=0;
   for(int j=0; j<i; j++)
     {
      if(getPriceHistory(j) != 0 && getPriceHistory(j+1) !=0)
        {
         if(getPriceHistory(j) > getPriceHistory(j+1))
           {
            count++;
            //     Alert("true ",count);
           }
        }
     }
   if(count==i)
      return true;
   return false;
  }

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
double getPriceHistoryDiff(int period = 20)
  {
   if(getPriceHistory(period) == 0)
     {
      return 0;
     }
   return getPriceHistory(0) - getPriceHistory(period);
  }
//+------------------------------------------------------------------+


//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
bool priceHistoryGoingDown(int i)
  {
   int count=0;
   for(int j=0; j<i; j++)
     {
      if(getPriceHistory(j) != 0 && getPriceHistory(j+1) !=0)
        {
         if(getPriceHistory(j) < getPriceHistory(j+1))
           {
            count++;
            //  Alert("true ",count);
           }
        }
     }
   if(count==i)
      return true;
   return false;
  }


//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void calcRSI1History()
  {
   for(int p=500; p>0; p--)
     {
      rsi1History[p][0] = rsi1History[p-1][0];
      rsi1History[p][1] = rsi1History[p-1][1];
     }
   rsi1History[0][0] = getRSI_1_14();
   rsi1History[0][1] = TimeCurrent();
  }

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
double getRSI1History(int i)
  {
   return rsi1History[i][0];
  }

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void calcRSI5History()
  {
   for(int p=10; p>0; p--)
     {
      rsi5History[p][0] = rsi5History[p-1][0];
      rsi5History[p][1] = rsi5History[p-1][1];
     }
   rsi5History[0][0] = getRSI_5_14();
   rsi5History[0][1] = TimeCurrent();
  }

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
double getRSI5History(int i)
  {
   return rsi5History[i][0];
  }

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void calcPriceHistoryTrend()
  {
   for(int p=100; p>0; p--)
     {
      if(priceHistoryTrend[p-1][0] != 0)
        {
         priceHistoryTrend[p][0] = priceHistoryTrend[p-1][0];
         priceHistoryTrend[p][1] = priceHistoryTrend[p-1][1];
        }
     }
   priceHistoryTrend[0][0] = currentPrice;
   priceHistoryTrend[0][1] = TimeCurrent();
  }

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
double getPriceHistoryTrend(int i)
  {
   return priceHistoryTrend[i][0];
  }


//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
string getCurrentPriceHistoryTrend()
  {
   int sellers =0;
   int buyers = 0;
   for(int p=100; p>0; p--)
     {
      if(priceHistoryTrend[p][0] < priceHistoryTrend[p-1][0] && priceHistoryTrend[0][0] != 0 && priceHistoryTrend[100][0] !=0)
        {
         buyers++;
        }
      if(priceHistoryTrend[p][0] > priceHistoryTrend[p-1][0] && priceHistoryTrend[0][0] != 0 && priceHistoryTrend[100][0] !=0)
        {
         sellers++;
        }
     }
   if(buyers > sellers && buyers - sellers >= 9
      && ((
             priceHistoryTrend[0][0] > priceHistoryTrend[1][0] && priceHistoryTrend[1][0] > priceHistoryTrend[2][0]
//      && priceHistoryTrend[2] > priceHistoryTrend[3] && priceHistoryTrend[3] > priceHistoryTrend[4]
          )
          || (
             isThisBarBULLISH()
             && isThisBarBULLISH(5)
             && isThisBarBULLISH(15)
             && isThisBarBULLISH(30)
             && isThisBarBULLISH(60)
             && isThisBarBULLISH(240)
          )
         )
     )
     {
      //   if(getRSI_1_14() < 45 || howClosetoHigh_5_10 > 3)
      // Alert("BUYERS beat sellers in 100 ticks ", buyers, " ", sellers);
      return("GOING UP");
     }
   if(sellers > buyers && sellers - buyers >= 9
      && ((
             priceHistoryTrend[0][0] < priceHistoryTrend[1][0] && priceHistoryTrend[1][0] < priceHistoryTrend[2][0]
//  && priceHistoryTrend[2] < priceHistoryTrend[3] && priceHistoryTrend[3] < priceHistoryTrend[4]
          )
          || (
             isThisBarBEARISH()
             && isThisBarBEARISH(5)
             && isThisBarBEARISH(15)
             && isThisBarBEARISH(30)
             && isThisBarBEARISH(60)
             && isThisBarBEARISH(240)
          )
         )
     )
     {
      // if(getRSI_1_14() > 45 || howClosetoLow_5_10 > 3)
      // Alert("SELLERS beat buyers in 100 ticks ", sellers, " ", buyers);
      return("GOING DOWN");
     }
   return("NOT ENOUGH INFORMATION");
  }


//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void calcPriceHistoryTrend500()
  {
   for(int p=500; p>0; p--)
     {
      if(priceHistoryTrend2[p-1][0] != 0)
        {
         priceHistoryTrend2[p][0] = priceHistoryTrend2[p-1][0];
         priceHistoryTrend2[p][1] = priceHistoryTrend2[p-1][1];
        }
     }
   priceHistoryTrend2[0][0] = currentPrice;
   priceHistoryTrend2[0][1] = TimeCurrent();
  }

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
double getPriceHistoryTrend500(int i)
  {
   return priceHistoryTrend2[i][0];
  }


//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
string getCurrentPriceHistoryTrend500()
  {
   int sellersTrend500 = 0;
   int buyersTrend500 = 0;
   for(int p=500; p>0; p--)
     {
      if(priceHistoryTrend2[p][0] < priceHistoryTrend2[p-1][0] && priceHistoryTrend2[0][0] != 0 && priceHistoryTrend2[500][0] !=0)
        {
         buyersTrend500++;
         // Alert(buyersTrend500);
        }
      if(priceHistoryTrend2[p][0] > priceHistoryTrend2[p-1][0] && priceHistoryTrend2[0][0] != 0 && priceHistoryTrend2[500][0] !=0)
        {
         sellersTrend500++;
        }
     }
   if(buyersTrend500 > sellersTrend500 && buyersTrend500 - sellersTrend500 >= 15
      && priceHistoryTrend2[0][0] > priceHistoryTrend2[1][0] && priceHistoryTrend2[1][0] > priceHistoryTrend2[2][0])
     {
      //   if(getRSI_1_14() < 45 || howClosetoHigh_5_10 > 3 || getStochastic_Main() < 20)
      // Alert("BUYERS beat sellers in 500 ticks ", buyersTrend500, " ", sellersTrend500);
      return("GOING UP 500");
     }
   if(sellersTrend500 > buyersTrend500 && sellersTrend500 - buyersTrend500 >= 15 && priceHistoryTrend2[0][0] < priceHistoryTrend2[1][0] && priceHistoryTrend2[1][0] < priceHistoryTrend2[2][0])
     {
      //  if(getRSI_1_14() > 45 || howClosetoLow_5_10 > 3 || getStochastic_Main() > 80)
      // Alert("SELLERS beat buyers in 500 ticks: ", sellersTrend500, " ", buyersTrend500);
      return("GOING DOWN 500");
     }
   return("NOT ENOUGH INFORMATION");
  }


//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
int checkOccurenceSell(double price, int time, int periods)
  {
   int calc=0;
//   if(_Symbol == "Boom 1000 Index")
//   {

   for(int count=0; count<=periods; count++) //
     {
      double priceCheckUp = iHigh(_Symbol,setTimeFrame(time),count);
      double priceCheckDown = iLow(_Symbol,setTimeFrame(time),count);
      //     Alert(price," ",priceCheckUp," ",priceCheckDown);
      if(price > priceCheckUp)
        {
         //      Alert(price > priceCheckUp, " up ",count);
         calc++;
        }
      if(price > priceCheckDown)
        {
         //    Alert(price > priceCheckDown," down ",count);
         calc++;
        }
     }
//Alert("sell calc ",calc);
// Sleep(5000);
//}
   return(calc);
  }


//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
int checkOccurenceBuy(double price, int time, int periods)
  {
   int calc=0;
//  if(_Symbol == "Boom 1000 Index")
// {

   for(int count=0; count<=periods; count++) //
     {
      double priceCheckUp = iHigh(_Symbol,setTimeFrame(time),count);
      double priceCheckDown = iLow(_Symbol,setTimeFrame(time),count);
      //  Alert(price," ",priceCheckUp," ",priceCheckDown);
      if(price < priceCheckUp)
        {
         //   Alert(price < priceCheckUp, " up ",count);
         calc++;
        }
      if(price < priceCheckDown)
        {
         //   Alert(price < priceCheckDown," down ",count);
         calc++;
        }
     }
//Alert("buy calc ",calc);
//    Sleep(5000);
//   }
   return(calc);
  }



//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
double calculateVelocity(double val1, double val2, datetime timeOfVal2)
  {
// Assuming val1 occurs at the current time and val2 at a previous time
   if(val1 == val2 || val1 == 0 || val2 == 0 || timeOfVal2 == 0)
     {
      //   Alert(val1, " ", val2);
      return 0;
     }
   val1 = NormalizeDouble(val1, 4);
   val2 = NormalizeDouble(val2, 4);
   double valueDiff = NormalizeDouble(MathAbs(val1) - MathAbs(val2),4);

   datetime timeOfVal1 = TimeCurrent();
   int timeDiff = (timeOfVal1 - timeOfVal2);
//  Alert(timeOfVal1, " ", timeOfVal2);
//Alert("TIME DIFF ", timeDiff, " "," VALUE DIFF ", valueDiff, " val1 ",val1, " val2 ",val2);
   return (NormalizeDouble(valueDiff/(timeDiff == 0 ? 1 : timeDiff),4))*100;
  }
//+------------------------------------------------------------------+


//+------------------------------------------------------------------+
//|                                                      ProjectName |
//|                                      Copyright 2020, CompanyName |
//|                                       http://www.companyname.net |
//+------------------------------------------------------------------+
#define MILLIONDOLLARBOT  20240112

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
int calculateByComment(string comment)
  {
   int orders = 0;
   for(int i=PositionsTotal()-1; i>=0; i--) // returns the number of current positions
      if(m_position.SelectByIndex(i))     // selects the position by index for further access to its properties
         if(m_position.Symbol()==Symbol() && m_position.Comment() == comment)
           {
            orders++;
           }
// Alert(m_position.Comment());

   return orders;
  }

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
int calculatePendingByComment(string comment)
  {
   int orders = 0;

   for(int i=0; i<OrdersTotal(); i++)
     {
      if(OrderSelect(i,SELECT_BY_POS,MODE_TRADES)==false)
         return orders;
      if(OrderSymbol()==Symbol())
        {
         if(OrderGetString(ORDER_COMMENT) == comment)
           {
            //  Alert("more pending by comment++");
            orders++;

           }
        }
     }
   return orders;
  }

//+------------------------------------------------------------------+
//| Calculate open BUY positions                                         |
//+------------------------------------------------------------------+
int calculateBuyOrders()
  {
   int buys=0;
   double SYMBOL_BUY_Profit=0;
   for(int i=PositionsTotal()-1; i>=0; i--) // returns the number of current positions
      if(m_position.SelectByIndex(i))     // selects the position by index for further access to its properties
         if(m_position.Symbol()==Symbol() && m_position.PositionType() == POSITION_TYPE_BUY && m_position.Comment() != "algorithm.V_BUYHODL")
           {
            curBuys[i] = m_position.Profit();
            SYMBOL_BUY_Profit = SYMBOL_BUY_Profit + m_position.Profit();
            //   Alert("SYMBOL_BUY_Profit ",SYMBOL_BUY_Profit);
            buys++;
           }
   return buys;

  }

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
int calculateBuyHODLOrders()
  {
   int buys=0;
   double SYMBOL_BUY_Profit=0;
   for(int i=PositionsTotal()-1; i>=0; i--) // returns the number of current positions
      if(m_position.SelectByIndex(i))     // selects the position by index for further access to its properties
         if(m_position.Symbol()==Symbol() && m_position.PositionType() == POSITION_TYPE_BUY && m_position.Comment() == "algorithm.V_BUYHODL")
           {
            curBuys[i] = m_position.Profit();
            SYMBOL_BUY_Profit = SYMBOL_BUY_Profit + m_position.Profit();
            //   Alert("SYMBOL_BUY_Profit ",SYMBOL_BUY_Profit);
            buys++;
           }
   return buys;

  }

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
double calculateBuyOrdersProfit()
  {
   int buys=0;
   double SYMBOL_BUY_Profit=0;
   for(int i=PositionsTotal()-1; i>=0; i--) // returns the number of current positions
      if(m_position.SelectByIndex(i))     // selects the position by index for further access to its properties
         if(m_position.Symbol()==Symbol() && m_position.PositionType() == POSITION_TYPE_BUY && m_position.Comment() != "algorithm.V_BUYHODL")
           {
            curBuys[i] = m_position.Profit();
            SYMBOL_BUY_Profit = SYMBOL_BUY_Profit + m_position.Profit();
            //   Alert("SYMBOL_BUY_Profit ",SYMBOL_BUY_Profit);
            // Alert("pos profit ",m_position.Profit(), " ", SYMBOL_BUY_Profit);
            buys++;
           }
   return SYMBOL_BUY_Profit;

  }

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
double calculateBuyHODLOrdersProfit()
  {
   int buys=0;
   double SYMBOL_BUY_Profit=0;
   for(int i=PositionsTotal()-1; i>=0; i--) // returns the number of current positions
      if(m_position.SelectByIndex(i))     // selects the position by index for further access to its properties
         if(m_position.Symbol()==Symbol() && m_position.PositionType() == POSITION_TYPE_BUY && m_position.Comment() == "algorithm.V_BUYHODL")
           {
            curBuys[i] = m_position.Profit();
            SYMBOL_BUY_Profit = SYMBOL_BUY_Profit + m_position.Profit();
            //   Alert("SYMBOL_BUY_Profit ",SYMBOL_BUY_Profit);
            buys++;
           }
   return SYMBOL_BUY_Profit;

  }




//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
int calculateALLBuyOrders()
  {
   int buys=0;

   for(int i=PositionsTotal()-1; i>=0; i--) // returns the number of current positions
      if(m_position.SelectByIndex(i))     // selects the position by index for further access to its properties
         if(m_position.PositionType() == POSITION_TYPE_BUY)
            buys++;
   return(buys);

  }


//+------------------------------------------------------------------+
//| Calculate open BUYSTOP positions                                         |
//+------------------------------------------------------------------+
int calculateBuyStopOrders()
  {
   int buystops=0;

   for(int i=0; i<OrdersTotal(); i++)
     {
      if(OrderSelect(i,SELECT_BY_POS,MODE_TRADES)==false)
         break;
      if(OrderSymbol()==Symbol() && OrderMagicNumber()==333)
        {
         if(OrderGetInteger(ORDER_TYPE) == OP_BUYSTOP)
           {
            // Alert("more buy stop++");
            buystops++;
           }
        }
     }

   return(buystops);

  }



//+------------------------------------------------------------------+
//| Calculate open BUYLIMIT positions                                         |
//+------------------------------------------------------------------+
int calculateBuyLimitOrders()
  {
   int buylimits=0;

   for(int i=0; i<OrdersTotal(); i++)
     {
      if(OrderSelect(i,SELECT_BY_POS,MODE_TRADES)==false)
         break;
      if(OrderSymbol()==Symbol())
        {
         if(OrderGetInteger(ORDER_TYPE) == OP_BUYLIMIT)
           {
            //  Alert("more buy limit++");
            buylimits++;
           }
        }
     }

   return(buylimits);

  }

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
int calculateSellLimitOrders()
  {
   int selllimits=0;

   for(int i=0; i<OrdersTotal(); i++)
     {
      if(OrderSelect(i,SELECT_BY_POS,MODE_TRADES)==false)
         break;
      if(OrderSymbol()==Symbol())
        {
         if(OrderGetInteger(ORDER_TYPE) == OP_SELLLIMIT)
           {
            // Alert("more sell limit++");
            selllimits++;
           }
        }
     }

   return(selllimits);

  }

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
int calculateSellStopOrders()
  {
   int sellstops=0;

   for(int i=0; i<OrdersTotal(); i++)
     {
      if(OrderSelect(i,SELECT_BY_POS,MODE_TRADES)==false)
         break;
      if(OrderSymbol()==Symbol() && OrderMagicNumber()==444)
        {
         if(OrderGetInteger(ORDER_TYPE) == OP_SELLSTOP)
           {
            //  Alert("more sell stop++");
            sellstops++;
           }
        }
     }

   return(sellstops);

  }
//+------------------------------------------------------------------+
//| Calculate open SELL positions                                         |
//+------------------------------------------------------------------+
int calculateSellOrders()
  {
   int sells=0;
   double SYMBOL_SELL_Profit=0;
   for(int i=PositionsTotal()-1; i>=0; i--) // returns the number of current positions
      if(m_position.SelectByIndex(i))     // selects the position by index for further access to its properties
         if(m_position.Symbol()==Symbol() && m_position.PositionType() == POSITION_TYPE_SELL && m_position.Comment() != "algorithm.V_SELLHODL")
           {
            curSells[i] = m_position.Profit();
            SYMBOL_SELL_Profit = SYMBOL_SELL_Profit + m_position.Profit();
            //   Alert("SYMBOL_SELL_Profit ",SYMBOL_SELL_Profit);
            sells++;
           }
   return(sells);

  }


//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
int calculateSellHODLOrders()
  {
   int sells=0;
   double SYMBOL_SELL_Profit=0;
   for(int i=PositionsTotal()-1; i>=0; i--) // returns the number of current positions
      if(m_position.SelectByIndex(i))     // selects the position by index for further access to its properties
         if(m_position.Symbol()==Symbol() && m_position.PositionType() == POSITION_TYPE_SELL && m_position.Comment() == "algorithm.V_SELLHODL")
           {
            curSells[i] = m_position.Profit();
            SYMBOL_SELL_Profit = SYMBOL_SELL_Profit + m_position.Profit();
            //   Alert("SYMBOL_SELL_Profit ",SYMBOL_SELL_Profit);
            sells++;
           }
   return(sells);

  }

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
double calculateSellOrdersProfit()
  {
   int sells=0;
   double SYMBOL_SELL_Profit=0;
   for(int i=PositionsTotal()-1; i>=0; i--) // returns the number of current positions
      if(m_position.SelectByIndex(i))     // selects the position by index for further access to its properties
         if(m_position.Symbol()==Symbol() && m_position.PositionType() == POSITION_TYPE_SELL && m_position.Comment() != "algorithm.V_SELLHODL")
           {
            curSells[i] = m_position.Profit();
            SYMBOL_SELL_Profit = SYMBOL_SELL_Profit + m_position.Profit();
            //   Alert("SYMBOL_SELL_Profit ",SYMBOL_SELL_Profit);
            sells++;
           }
   return(SYMBOL_SELL_Profit);
  }

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
double calculateSellHODLOrdersProfit()
  {
   int sells=0;
   double SYMBOL_SELL_Profit=0;
   for(int i=PositionsTotal()-1; i>=0; i--) // returns the number of current positions
      if(m_position.SelectByIndex(i))     // selects the position by index for further access to its properties
         if(m_position.Symbol()==Symbol() && m_position.PositionType() == POSITION_TYPE_SELL && m_position.Comment() == "algorithm.V_SELLHODL")
           {
            curSells[i] = m_position.Profit();
            SYMBOL_SELL_Profit = SYMBOL_SELL_Profit + m_position.Profit();
            //   Alert("SYMBOL_SELL_Profit ",SYMBOL_SELL_Profit);
            sells++;
           }
   return(SYMBOL_SELL_Profit);
  }


//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
int calculateALLSellOrders()
  {
   int sells=0;

   for(int i=PositionsTotal()-1; i>=0; i--) // returns the number of current positions
      if(m_position.SelectByIndex(i))     // selects the position by index for further access to its properties
         if(m_position.PositionType() == POSITION_TYPE_SELL)
            sells++;
   return(sells);

  }

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
double checkCurrentBuyStopPrice()
  {
   double SYMBOL_buystopprice,gap;
   double potentialOrderPrice = (Bid+0.61);
//Alert("test");
   for(int i=0; i<OrdersTotal(); i++)
     {
      if(OrderSelect(i,SELECT_BY_POS,MODE_TRADES)==false)
         break;
      if(OrderSymbol()==Symbol() && OrderMagicNumber()==MILLIONDOLLARBOT)
        {
         if(OrderType()==OP_BUYSTOP)
           {
            SYMBOL_buystopprice=OrderOpenPrice();
            gap = percdiff(potentialOrderPrice, SYMBOL_buystopprice);
           }
        }
     }

   return(gap);

  }


//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
int calculateNewOrders()
  {
   int news=0;
   datetime tm = TimeCurrent();

   for(int i=PositionsTotal()-1; i>=0; i--) // returns the number of current positions
      if(m_position.SelectByIndex(i))     // selects the position by index for further access to its properties
        {
         datetime posTime = m_position.Time();
         datetime tenmin = posTime+600;
         datetime fivemin = posTime+300;
         if(fivemin > tm && m_position.Symbol() == _Symbol) // orders from 5 minutes ago
            news++;
         // Alert(StringToTime(tm), StringToTime(posTime));

        }

   return(news);
  }




//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
int calculateNewBUYOrders()
  {
   int news=0;
   datetime tm = TimeCurrent();

   for(int i=PositionsTotal()-1; i>=0; i--) // returns the number of current positions
      if(m_position.SelectByIndex(i))     // selects the position by index for further access to its properties
        {
         datetime posTime = m_position.Time();
         datetime tenmin = posTime+600;
         datetime min = posTime+120;
         if(min > tm && m_position.Symbol() == _Symbol && m_position.PositionType() == POSITION_TYPE_BUY) // orders from 10 minutes ago
            news++;
         // Alert(StringToTime(tm), StringToTime(posTime));

        }

   return(news);
  }


//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
int calculateNewSELLOrders()
  {
   int news=0;
   datetime tm = TimeCurrent();

   for(int i=PositionsTotal()-1; i>=0; i--) // returns the number of current positions
      if(m_position.SelectByIndex(i))     // selects the position by index for further access to its properties
        {
         datetime posTime = m_position.Time();
         datetime tenmin = posTime+600;
         datetime min = posTime+120;
         if(min > tm && m_position.Symbol() == _Symbol && m_position.PositionType() == POSITION_TYPE_SELL) // orders from 10 minutes ago
            news++;
         // Alert(StringToTime(tm), StringToTime(posTime));

        }

   return(news);
  }

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
int calculateNewBUYOrdersLong()
  {
   int news=0;
   datetime tm = TimeCurrent();

   for(int i=PositionsTotal()-1; i>=0; i--) // returns the number of current positions
      if(m_position.SelectByIndex(i))     // selects the position by index for further access to its properties
        {
         datetime posTime = m_position.Time();
         datetime tenmin = posTime+600;
         datetime min = posTime+3600;
         if(min > tm && m_position.Symbol() == _Symbol && m_position.PositionType() == POSITION_TYPE_BUY) // orders from 10 minutes ago
            news++;
         // Alert(StringToTime(tm), StringToTime(posTime));

        }

   return(news);
  }


//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
int calculateNewSELLOrdersLong()
  {
   int news=0;
   datetime tm = TimeCurrent();

   for(int i=PositionsTotal()-1; i>=0; i--) // returns the number of current positions
      if(m_position.SelectByIndex(i))     // selects the position by index for further access to its properties
        {
         datetime posTime = m_position.Time();
         datetime tenmin = posTime+600;
         datetime min = posTime+3600;
         if(min > tm && m_position.Symbol() == _Symbol && m_position.PositionType() == POSITION_TYPE_SELL) // orders from 10 minutes ago
            news++;
         // Alert(StringToTime(tm), StringToTime(posTime));

        }

   return(news);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
int calculateOldOrders()
  {
   int olds=0;
   datetime tm = TimeCurrent();

   for(int i=PositionsTotal()-1; i>=0; i--) // returns the number of current positions
      if(m_position.SelectByIndex(i))     // selects the position by index for further access to its properties
        {
         datetime posTime = m_position.Time();
         datetime tenmin = posTime+600;
         datetime fivemin = posTime+300;
         if(tenmin < tm && m_position.Symbol() == _Symbol) // orders from more than 10 minutes ago
            olds++;
         // Alert(StringToTime(tm), StringToTime(posTime));

        }

   return(olds);
  }



//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
double calculateSymbolLoss()
  {
   double profit=0;
   for(int i=PositionsTotal()-1; i>=0; i--) // returns the number of current positions
      if(m_position.SelectByIndex(i))     // selects the position by index for further access to its properties
        {
         if(m_position.Symbol() == _Symbol && m_position.Profit() < 0)
           {
            profit = profit + m_position.Profit();
           }
        }
// Alert("profit, symbol: ", _Symbol, " ",profit);
   return(profit);
  }


//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
double calculateSymbolMaxLoss()
  {
   double profit=0;
   for(int i=PositionsTotal()-1; i>=0; i--) // returns the number of current positions
      if(m_position.SelectByIndex(i))     // selects the position by index for further access to its properties
        {
         if(m_position.Symbol() == _Symbol && m_position.Profit() < 0)
           {
            profit = MathMin(profit,m_position.Profit());
           }
        }
// Alert("profit, symbol: ", _Symbol, " ",profit);
   return(profit);
  }


//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
double calculateSymbolBuyLowestPrice()
  {
   double lowestprice=9999999;
   for(int i=PositionsTotal()-1; i>=0; i--) // returns the number of current positions
      if(m_position.SelectByIndex(i))     // selects the position by index for further access to its properties
        {
         if(m_position.Symbol() == _Symbol && m_position.PositionType() == POSITION_TYPE_BUY)
           {
            lowestprice = MathMin(lowestprice,m_position.PriceOpen());
           }
        }
// Alert("profit, symbol: ", _Symbol, " ",profit);
   return(lowestprice);
  }


//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
double calculateSymbolSellHighestPrice()
  {
   double highestPrice=0;
   for(int i=PositionsTotal()-1; i>=0; i--) // returns the number of current positions
      if(m_position.SelectByIndex(i))     // selects the position by index for further access to its properties
        {
         if(m_position.Symbol() == _Symbol && m_position.PositionType() == POSITION_TYPE_SELL)
           {
            highestPrice = MathMax(highestPrice,m_position.PriceOpen());
           }
        }
// Alert("profit, symbol: ", _Symbol, " ",profit);
   return(highestPrice);
  }

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
double calculateSymbolMaxLossEntry()
  {
   double entry=0;
   double profit=0;
   for(int i=PositionsTotal()-1; i>=0; i--) // returns the number of current positions
      if(m_position.SelectByIndex(i))     // selects the position by index for further access to its properties
        {
         if(m_position.Symbol() == _Symbol && m_position.Profit() < 0)
           {
            if(m_position.Profit() < profit)
              {
               profit = m_position.Profit();
               entry = m_position.PriceOpen();
              }
           }
        }
// Alert("profit, symbol: ", _Symbol, " ",profit);
   return(entry);
  }


//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
double calculateSymbolProfit()
  {
   double profit=0;
   for(int i=PositionsTotal()-1; i>=0; i--) // returns the number of current positions
      if(m_position.SelectByIndex(i))     // selects the position by index for further access to its properties
        {
         if(m_position.Symbol() == _Symbol && m_position.Profit() > 0)
           {
            profit = profit + m_position.Profit();
           }
        }
// Alert("profit, symbol: ", _Symbol, " ",profit);
   return(profit);
  }


//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
double calculateSymbolBUYProfitLoss()
  {
   double profit=0;
   for(int i=PositionsTotal()-1; i>=0; i--) // returns the number of current positions
      if(m_position.SelectByIndex(i))     // selects the position by index for further access to its properties
        {
         if(m_position.Symbol() == _Symbol && m_position.PositionType() == POSITION_TYPE_BUY)
           {
            profit = profit + m_position.Profit();
           }
        }
// Alert("profit, symbol: ", _Symbol, " ",profit);
   return(profit);
  }



//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
double calculateSymbolSELLProfitLoss()
  {
   double profit=0;
   for(int i=PositionsTotal()-1; i>=0; i--) // returns the number of current positions
      if(m_position.SelectByIndex(i))     // selects the position by index for further access to its properties
        {
         if(m_position.Symbol() == _Symbol && m_position.PositionType() == POSITION_TYPE_SELL)
           {
            profit = profit + m_position.Profit();
           }
        }
// Alert("profit, symbol: ", _Symbol, " ",profit);
   return(profit);
  }


//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void closeSymbolInProfit()
  {
   if(calculateSymbolProfit() > 0.1)
     {
      for(int i=PositionsTotal()-1; i>=0; i--) // returns the number of current positions
         if(m_position.SelectByIndex(i))     // selects the position by index for further access to its properties
           {
            if(m_position.Symbol() == _Symbol && m_position.Profit() > 2 && (m_position.Comment() != "algorithm.V_BUYHODL" && m_position.Comment() != "algorithm.V_SELLHODL"))
              {
               m_trade.PositionClose(m_position.Ticket());
              }
           }
     }
   return;
  }


//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
double calculateAllSymbolProfit()
  {
   double profit=0;
   for(int i=PositionsTotal()-1; i>=0; i--) // returns the number of current positions
      if(m_position.SelectByIndex(i))     // selects the position by index for further access to its properties
        {

         profit = profit + m_position.Profit();

        }
// Alert("profit, symbol: ", _Symbol, " ",profit);
   return(profit);
  }


//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
double calculateAllSymbolProfitPlus()
  {
   double profit=0;
   for(int i=PositionsTotal()-1; i>=0; i--) // returns the number of current positions
      if(m_position.SelectByIndex(i))     // selects the position by index for further access to its properties
        {
         if(m_position.Profit() > 0 && (m_position.Comment() != "algorithm.V_BUYHODL" && m_position.Comment() != "algorithm.V_SELLHODL") && (m_position.Comment() != "algorithm.V_REVERSALBUY" && m_position.Comment() != "algorithm.V_REVERSALSELL") && (m_position.Comment() != "algorithm.V_REVERSALBUYHOLD" && m_position.Comment() != "algorithm.V_REVERSALSELLHOLD"))
           {
            profit = profit + m_position.Profit();
           }
        }
// Alert("profit, symbol: ", _Symbol, " ",profit);
   return(profit);
  }


//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
double calculateSymbolProfitRecent()
  {
   double profit=0;
   datetime tm = TimeCurrent();
   datetime mostrecent = tm - 300000; // 5 min
   for(int i=PositionsTotal()-1; i>=0; i--) // returns the number of current positions
      if(m_position.SelectByIndex(i))     // selects the position by index for further access to its properties
        {
         if(m_position.Symbol() == _Symbol)// && (m_position.Comment() != "algorithm.V_BUYHODL" && m_position.Comment() != "algorithm.V_SELLHODL") && (m_position.Comment() != "algorithm.V_REVERSALBUY" && m_position.Comment() != "algorithm.V_REVERSALSELL") && (m_position.Comment() != "algorithm.V_REVERSALBUYHOLD" && m_position.Comment() != "algorithm.V_REVERSALSELLHOLD"))
           {
            if(m_position.Time() > mostrecent)
               profit = m_position.Profit();
            mostrecent = m_position.Time();
            calcProfitCache = profit;
           }
        }
// Alert("profit, symbol: ", _Symbol, " ",profit, " mostrecent ", mostrecent);
   return(profit);
  }



//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
double calculateSymbolProfitRecentHODL()
  {
   double profit=0;
   datetime tm = TimeCurrent();
   datetime mostrecent = tm - 10000000000;
   for(int i=PositionsTotal()-1; i>=0; i--) // returns the number of current positions
      if(m_position.SelectByIndex(i))     // selects the position by index for further access to its properties
        {
         if(m_position.Symbol() == _Symbol && (m_position.Comment() == "algorithm.V_BUYHODL" || m_position.Comment() == "algorithm.V_SELLHODL"))
           {
            if(m_position.Time() > mostrecent)
               profit = m_position.Profit();
            mostrecent = m_position.Time();
           }
        }
// Alert("profit, symbol: ", _Symbol, " ",profit, " mostrecent ", mostrecent);
   return(profit);
  }




//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+

//+------------------------------------------------------------------+
//| Calculate optimal lot size                                       |
//+------------------------------------------------------------------+

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
double calculateLots(int orderType)
  {
   double maxLot = lotOrder; // set by maxLotSize inputs
// Assumming a $1000 account can normally take a "0.5" lot size and a $50,000 account can normally take a "5" lot size
   double accountLotCalculator = MathMin(NormalizeDouble(AccountBalance() / (1000 * 2),1), maxLot);
   double lot = accountLotCalculator;
//Alert("Calculated lot size thus far ",lot, " order type ",orderType);

   if(!enableHighLotSize)
     {
      // Apply Lot Overrides
      // ACCOUNT BALANCE LIMITS, LOT OVERRIDES
      if(AccountBalance() > 3000)
        {
         lot = 1;
        }
      if(AccountBalance() <= 3000)
        {
         lot = 0.8;
        }
      if(AccountBalance() <= 2000)
        {
         lot = 0.5;
        }
      if(AccountBalance() <= 1000)
        {
         lot = 0.2;
        }
      if(AccountBalance() <= 500)
        {
         lot = 0.2;
        }
      if(AccountBalance() <= 300)
        {
         lot = 0.1;
        }


      if(lot > 2) // MAX Lots
        {
         lot = 2;
        }

      if(lot< 0.2) // MIN Lots
        {
         lot = 0.2;
        }
      //lot = 0.2;

      if(calculateMaxOrders(orderType) == 1)
        {
         lot = MathMax(lot/2, 0.1);
        }

      if(orderType == OP_BUY)
        {
         if(
            (howClosetoHigh_60 < 10 || howClosetoLow_60 > 40)
            && (
               getMA_60_20() > currentPrice
               || getMA_30_20() > currentPrice
               || getMA_15_20() > currentPrice
               || getMA_5_20() > currentPrice
               || getMA_1_20() > currentPrice
            )

         )
           {
            lot = MathMax(lot/2, 0.1);
           }
         // End Buy Order Type,
        }

      if(orderType == OP_SELL)
        {
         if(
            (howClosetoLow_60 < 10 || howClosetoHigh_60 > 40)
            && (
               getMA_60_20() < currentPrice
               || getMA_30_20() < currentPrice
               || getMA_15_20() < currentPrice
               || getMA_5_20() < currentPrice
               || getMA_1_20() < currentPrice
            )

         )
           {
            lot = MathMax(lot/2, 0.1);
           }
         // End Sell Order Type
        }

      // Alert("calculated lot  after overrides ", lot, " order type ",orderType);
     }

// set lot to 0.1 unless in profit
   double buyProfit = SYMBOL_BUY_Profit + SYMBOL_BUY_HODL_Profit;
   double sellProfit = SYMBOL_SELL_Profit + SYMBOL_SELL_HODL_Profit;

   if((buyProfit <= 0) && orderType == OP_BUY)
     {
      // Alert("Buy Profit ",buyProfit);
      lot = 0.1;
     }

   if((sellProfit <= 0) && orderType == OP_SELL)
     {
      lot = 0.1;
     }

   lot=0.1;

   return(lot);
  }

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
int calculateMaxOrders(int orderType)
  {
   MAXOrders = 1; // 5

   if(
      (
         (
            (isThisBarBEARISH(240) && getBarSize(240) > 40)
            || getMA_1_20() > currentPrice
            || getMA_5_9() > currentPrice
            || getMA_5_20() > currentPrice
            || getMA_5() > currentPrice
            || getMA_15_20() > currentPrice
            || getMA_30_20() > currentPrice

         )
         && orderType == OP_BUY
      )
      ||
      (
         (
            (isThisBarBULLISH(240) && getBarSize(240) > 40)
            || getMA_1_20() < currentPrice
            || getMA_5_9() < currentPrice
            || getMA_5_20() < currentPrice
            || getMA_5() < currentPrice
            || getMA_15_20() < currentPrice
            || getMA_30_20() < currentPrice
         )
         && orderType == OP_SELL
      )
      || howClosetoHigh_5 < 5
      || howClosetoHigh < 5
      || howClosetoHigh_60 < 5
      || howClosetoHigh_240 < 5
      || howClosetoLow_5 < 5
      || howClosetoLow < 5
      || howClosetoLow_60 < 5
      || howClosetoLow_240 < 5
   )
     {
      MAXOrders = 0;
      if(calculateSymbolProfit() > 0
         || (calculateNewBUYOrders() < 1 && orderType == OP_BUY)
         || (calculateNewSELLOrders() < 1 && orderType == OP_SELL)
         || calculateNewOrders() < 1
        )
         MAXOrders = 1;
     }

   if(AccountBalance() > 200
      && ((percdiff(currentPrice, priceHighest_M5) < 5
           && percdiff(currentPrice, priceHighest_M15) < 5
           && percdiff(currentPrice, priceHighest_M30) < 5
           && percdiff(priceLowest_M1, currentPrice) > 2
           && percdiff(priceLowest_M1_75, currentPrice) > 2
           && percdiff(priceLowest_M30, currentPrice) > 2
          )))
     {
      if(((MAStatus_15_200 == "ABOVE"
           && MAStatus_15 == "ABOVE"
           && MAStatus_5 == "ABOVE"
           && MAStatus_1_50 == "ABOVE")
          || (percdiff(currentPrice, priceHighest_M15) < 2))
         && isThisBarBEARISH(60)
         && (isThisBarBEARISH(240)
             || isThisBarBEARISH(999))
        )
        {
         MAXOrders = MAXOrders * 1; // 2
         orderCount = orderCount * 1; // 2
        }
     }
   return MAXOrders;
  }
//+------------------------------------------------------------------+


//+------------------------------------------------------------------+

//+------------------------------------------------------------------+


//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void setTakeBuyOrder(int magic)
  {
   Alert("Setting should take buy order ", magic);
   if(magic != 0)
     {
      if((calculateNewBUYOrders() < 1 || calculateSymbolProfitRecent() > (3 * lotOrder))
         && (calculateNewBUYOrdersLong() < 2 || calculateSymbolProfitRecent() > (3 * lotOrder))
         // && howClosetoHigh_60 > 10
         // && howClosetoHigh_999 > 20
         // && (howClosetoHigh_5_10 >= 2 || (isThisBarBULLISH(1,1) && isThisBarBULLISH(1,2) && isThisBarBULLISH(1,1)) || (isThisBarBULLISH(240) && isThisBarBULLISH(60) && isThisBarBULLISH(5) && getBarSize(240) > 20))
         //   && (isThisBarBULLISH(15) || isThisBarBULLISH(30) || isThisBarBULLISH(60))
         //   && !(isThisBarBEARISH(999) && isThisBarBEARISH(240) && (isThisBarBEARISH(15) || isThisBarBEARISH(30)))
         //    && !(isThisBarBEARISH(30) && isThisBarBEARISH(30,1))
         //   && getBarSize(60) > 20
         //   && (!(calculateSymbolSellHighestPrice() < currentPrice && (AccountInfoDouble(ACCOUNT_MARGIN_LEVEL) < 1000 || AccountInfoDouble(ACCOUNT_PROFIT) < -500)) || calculateSellOrders() < 1)
         //     && (!(calculateSymbolBuyLowestPrice() < currentPrice && (AccountInfoDouble(ACCOUNT_MARGIN_LEVEL) < 5000 || AccountInfoDouble(ACCOUNT_PROFIT) < -100)) || calculateBuyOrders() < 1)
         //     && !(isThisBarBEARISH(30) && isThisBarBEARISH(5))
        )
        {
         Alert("SHOULD TAKE BUY ORDER ", magic);
         placeBuyOrder(calculateLots(OP_BUY), "algorithm.V_BUYSTEP_1_" + magic, magic);
        }
     }
  }

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void setTakeSellOrder(int magic)
  {
   Alert("Setting should take sell order ", magic);
   if(magic != 0)
     {
      if((calculateNewSELLOrders() < 1 || calculateSymbolProfitRecent() > (3*lotOrder))
         && (calculateNewSELLOrdersLong() < 2 || calculateSymbolProfitRecent() > (3 * lotOrder))
         // && howClosetoLow_60 > 10
         // && howClosetoLow_999 > 20
         // && (howClosetoLow_5_10 >= 2 || (isThisBarBEARISH(1,1) && isThisBarBEARISH(1,2) && isThisBarBEARISH(1,1)) || (isThisBarBEARISH(240) && isThisBarBEARISH(60) && isThisBarBEARISH(5) && getBarSize(240) > 20))
         //    && (isThisBarBEARISH(15) || isThisBarBEARISH(30) || isThisBarBEARISH(60))
         //    && !(isThisBarBULLISH(999) && isThisBarBULLISH(240) && (isThisBarBULLISH(15) || isThisBarBULLISH(30)))
         //    && !(isThisBarBULLISH(30) && isThisBarBULLISH(30,1))
         //    && getBarSize(60) > 20
         //      && (!(calculateSymbolBuyLowestPrice() > currentPrice && (AccountInfoDouble(ACCOUNT_MARGIN_LEVEL) < 1000 || AccountInfoDouble(ACCOUNT_PROFIT) < -500)) || calculateBuyOrders() < 1)
         //    && (!(calculateSymbolSellHighestPrice() < currentPrice && (AccountInfoDouble(ACCOUNT_MARGIN_LEVEL) < 5000 || AccountInfoDouble(ACCOUNT_PROFIT) < -100)) || calculateSellOrders() < 1)
         //      && !(isThisBarBULLISH(30) && isThisBarBULLISH(5))
        )
        {
         Alert("SHOULD TAKE SELL ORDER ", magic);
         placeSellOrder(calculateLots(OP_SELL), "algorithm.V_SELLSTEP_1_" + magic, magic);
        }
     }
  }


//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
bool isThrottledPrice(double price, double lastOrderPrice, int gapAmt = 1, string comment = "")
  {
   double gap = gapAmt*Point;

   if(lastOrderPrice != 0)
     {
      //   Alert("gap ", gap);
      //   Alert("last order price ", lastOrderPrice, " currentPrice ", price);
      //   Alert("last order price + ", lastOrderPrice + gap);
      //   Alert("last order price - ", lastOrderPrice - gap);
     }

   bool isLastPriceZero = lastOrderPrice == 0;
   bool isCurrentPriceHigherThanLast = price > (lastOrderPrice + gap);
   bool isCurrentPriceLowerThanLast = price < (lastOrderPrice - gap);
// Alert(isLastPriceZero, " ", isCurrentPriceHigherThanLast, " ", isCurrentPriceLowerThanLast);

   int maxByComment = 1;
   return ((isLastPriceZero || isCurrentPriceHigherThanLast || isCurrentPriceLowerThanLast) && (calculatePendingByComment(comment) < maxByComment));
  }

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
int placeBuyOrder(double lotSize, string comment, int magic, int gapAmt = 1)
  {
   int orderPlaced;
   double price = Ask;
   int maxBuyOrdersToTake = AccountInfoDouble(ACCOUNT_EQUITY) > 500 ? 3 : 1;
   bool canTakeMoreOrders = (AccountInfoDouble(ACCOUNT_MARGIN_LEVEL) > 50000 || calculateBuyOrdersProfit() > 0) && AccountInfoDouble(ACCOUNT_EQUITY) > 500;
// Alert("is throttled price ", isThrottledPrice(price, lastPriceBuyOrder, gapAmt));
   if(canTakeMoreOrders && (calculateBuyOrders()) < maxBuyOrdersToTake && isThrottledPrice(price, lastPriceBuyOrder, gapAmt) && (calculateBuyOrders() < 1 || calculateBuyOrdersProfit() > 2))
     {
      if((getRSI_1_14() < 80 || getRSI_5_14() < 80) || priceVelocity > 3 || currentPrice - getMA_1_200() > 2)// && priceVelocity > -1 && howClosetoHigh_240 > 45 && isThisBarBULLISH(60))
        {
         orderPlaced = OrderSend(_Symbol,OP_BUY,lotSize,Ask,3,0,0,comment,magic,0,Blue);
         lastPriceBuyOrder = price;
         //  Alert("Placing buy order ", lastPriceBuyOrder);
         // SendNotification("BUY Order @ " + lastPriceBuyOrder);
        }
     }
// recordAnalytics("BUY",lotSize,magic);
   return orderPlaced;
  }
//+------------------------------------------------------------------+

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
int placeBuyStopOrder(double lotSize, string comment, int magic, int gapAmt = 1)
  {
   int orderPlaced;
   double price = Ask+(17*Point);
// Alert("calc buy ", calculateBuyOrders(), " calc buy stop ", calculateBuyStopOrders());
// Alert("is throttled price ", isThrottledPrice(price, lastPriceBuyStopOrder, gapAmt));
   int maxBuyOrdersToTake = AccountInfoDouble(ACCOUNT_EQUITY) > 500 ? 3 : 1;
   bool canTakeMoreOrders = (AccountInfoDouble(ACCOUNT_MARGIN_LEVEL) > 50000 || calculateBuyOrdersProfit() > 0) && AccountInfoDouble(ACCOUNT_EQUITY) > 500;
   if(calculatePendingByComment(comment) == 0 && (calculateBuyOrders() + calculateBuyStopOrders()) < maxBuyOrdersToTake && isThrottledPrice(price, lastPriceBuyStopOrder, gapAmt))
      if(getRSI_1_14() <= 70 || getRSI_5_14() <= 70 || priceVelocity > 2 || currentPrice - getMA_1_200() > 2)
        {
         if(lotSize < 1)
           {
            lotSize = 1;
           }
         orderPlaced = OrderSend(_Symbol,OP_BUY,lotSize,price,3,0,0,comment,magic,0,Blue);
         lastPriceBuyStopOrder = price;
         // Alert("Placing buy stop order ", lastPriceBuyStopOrder);
         //   SendNotification("BUY STOP Order @ " + lastPriceBuyStopOrder);
        }
// recordAnalytics("BUY",lotSize,magic);
   return orderPlaced;
  }
//+------------------------------------------------------------------+

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
int placeBuyLimitOrder(double lotSize, string comment, int magic, int gapAmt = 1, double orderPrice = 0)
  {
   int orderPlaced;
   double price = orderPrice != 0 ? orderPrice : (Bid - (30* Point));
// Alert("buy price ", price);
// Alert("calc buy ", calculateBuyOrders(), " calc buy stop ", calculateBuyLimitOrders());
// Alert("is throttled price ", isThrottledPrice(price, lastPriceBuyLimitOrder, gapAmt));
   int maxBuyOrdersToTake = AccountInfoDouble(ACCOUNT_EQUITY) > 500 ? 3 : 1;
   bool canTakeMoreOrders = (AccountInfoDouble(ACCOUNT_MARGIN_LEVEL) > 50000 || calculateBuyOrders() < 3 || calculateBuyOrdersProfit() > 0);
   if(canTakeMoreOrders && calculatePendingByComment(comment) < 20 && (calculateBuyOrders() + calculateBuyStopOrders()) < maxBuyOrdersToTake && calculateBuyLimitOrders() < 3 && isThrottledPrice(price, lastPriceBuyLimitOrder, (gapAmt+10), comment))
     {
      if(getRSI_1_14() <= 70 || getRSI_5_14() <= 70 || currentPrice - getMA_1_200() > 2)
        {
         orderPlaced = OrderSend(_Symbol,OP_BUYLIMIT,lotSize,price,3,0,0,comment,magic,0,Blue);
         lastPriceBuyLimitOrder = price;
         //  Alert("Placing buy limit order ", lastPriceBuyLimitOrder);
         //   SendNotification("BUY LIMIT Order @ " + lastPriceBuyLimitOrder);
        }
     }
// recordAnalytics("BUY",lotSize,magic);
   return orderPlaced;
  }

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
int placeSellOrder(double lotSize, string comment, int magic, int gapAmt = 1)
  {
   bool canSellMore = (AccountInfoDouble(ACCOUNT_MARGIN_LEVEL) > 2000 || (calculateSellOrders()  + calculateSellLimitOrders() + calculateSellStopOrders() < 1));
   int orderPlaced;
   double price = Bid;
   int maxSellOrdersToTake = AccountInfoDouble(ACCOUNT_EQUITY) > 500 ? 3 : 1;
   bool canTakeMoreOrders = (AccountInfoDouble(ACCOUNT_MARGIN_LEVEL) > 50000 || calculateSellOrdersProfit() > 0) && AccountInfoDouble(ACCOUNT_EQUITY) > 500;
//  Alert("is throttled price ", isThrottledPrice(price, lastPriceSellOrder, gapAmt));
//if(canTakeMoreOrders && (calculateSellOrders() + calculateSellStopOrders() + calculateSellLimitOrders()) < maxSellOrdersToTake && isThrottledPrice(price, lastPriceSellOrder, gapAmt) && (calculateSellOrders() < 1 || calculateSellOrdersProfit() > 2))
//  {
   Alert("taking sell order");
// if((getRSI_1_14() > 50 || getRSI_5_14() > 50) || priceVelocity < -3 || getMA_1_200() - currentPrice > 2)// && priceVelocity < 1 && howClosetoLow_240 > 45)
//  {
   if(lotSize < 1)
     {
      lotSize = 1;
     }
   orderPlaced = OrderSend(_Symbol,OP_SELL,lotSize,Bid,3,0,0,comment,magic,0,Red);
   lastPriceSellOrder = price;
// Alert("Placing sell order ", lastPriceSellOrder);
//  SendNotification("SELL Order @ " + lastPriceSellOrder);
//   }
//}
// recordAnalytics("SELL",lotSize,magic);
   return orderPlaced;
  }
//+------------------------------------------------------------------+


//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
int placeSellStopOrder(double lotSize, string comment, int magic, int gapAmt = 1)
  {
   int orderPlaced;
   double price = Bid - (17* Point);
//Alert("calc sell ", calculateSellOrders(), " calc sell stop ", calculateSellStopOrders());
//  Alert("is throttled price ", isThrottledPrice(price, lastPriceSellStopOrder, gapAmt));
   int maxSellOrdersToTake = AccountInfoDouble(ACCOUNT_EQUITY) > 500 ? 3 : 1;
   bool canTakeMoreOrders = (AccountInfoDouble(ACCOUNT_MARGIN_LEVEL) > 50000 || calculateSellOrdersProfit() > 0) && AccountInfoDouble(ACCOUNT_EQUITY) > 500;
//Alert("calc sell ", calculateSellOrders(), " calc sell stop ", calculateSellStopOrders());
//  Alert("is throttled price ", isThrottledPrice(price, lastPriceSellStopOrder, gapAmt));
   if(calculatePendingByComment(comment) == 0 && (calculateSellOrders() + calculateSellStopOrders()) < maxSellOrdersToTake && isThrottledPrice(price, lastPriceSellStopOrder, gapAmt)) // +10
     {
      if(getRSI_1_14() > 50 || getRSI_5_14() > 50 || priceVelocity < -2 || getMA_1_200() - currentPrice > 2)// && howClosetoHigh_240 > 45)
        {
         orderPlaced = OrderSend(_Symbol,OP_SELLSTOP,lotSize,price,3,0,0,comment,magic,0,Red);
         lastPriceSellStopOrder = price;
         // Alert("Placing sell stop order ", lastPriceSellStopOrder);
         // SendNotification("SELL STOP Order @ " + lastPriceSellStopOrder);
        }
     }
// recordAnalytics("SELL",lotSize,magic);
   return orderPlaced;
  }
//+------------------------------------------------------------------+


//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
int placeSellLimitOrder(double lotSize, string comment, int magic, int gapAmt = 1, double orderPrice = 0)
  {
   int orderPlaced;
   double price = orderPrice != 0 ? orderPrice : (Ask+(30*Point));
// Alert("sell price", price, " ", orderPrice);
//Alert("calc sell ", calculateSellOrders(), " calc sell limit ", calculateSellLimitOrders());
//  Alert("is throttled price ", isThrottledPrice(price, lastPriceSellLimitOrder, gapAmt));
   int maxSellOrdersToTake = AccountInfoDouble(ACCOUNT_EQUITY) > 500 ? 3 : 1; // (maxSellOrders * 10); // was original setting
   bool canTakeMoreOrders = (AccountInfoDouble(ACCOUNT_MARGIN_LEVEL) > 50000 || calculateSellOrders() < 3 || calculateSellOrdersProfit() > 0);
   if(canTakeMoreOrders && calculatePendingByComment(comment) < 20 && (calculateSellOrders() + calculateSellStopOrders()) < maxSellOrdersToTake && calculateSellLimitOrders() < 3 && isThrottledPrice(price, lastPriceSellLimitOrder, (gapAmt+10), comment))
     {
      if(getRSI_1_14() >= 20 || getRSI_5_14() >= 20 || getMA_1_200() - currentPrice > 2)
        {
         orderPlaced = OrderSend(_Symbol,OP_SELLLIMIT,lotSize,price,3,0,0,comment,magic,0,Red);
         lastPriceSellLimitOrder = price;
         // Alert("Placing sell limit order ", lastPriceSellLimitOrder);
         //  SendNotification("SELL LIMIT Order @ " + lastPriceSellLimitOrder);
        }
     }
// recordAnalytics("SELL",lotSize,magic);
   return orderPlaced;
  }


//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void HandleReversals()
  {
   int numberOfBuyOrders = calculateBuyOrders() + calculateBuyStopOrders() + calculateBuyLimitOrders();
   int numberOfSellOrders = calculateSellOrders() + calculateSellStopOrders() + calculateSellLimitOrders();
   bool shouldTakeMoreReversalBuy = numberOfBuyOrders < maxReverseBuyOrders && !(getRSI_30_14() >= 45 && numberOfBuyOrders > 0) && !(getStochastic_Main_30() >= 75 && numberOfBuyOrders > 0);
   bool shouldTakeMoreReversalSell = numberOfSellOrders < maxReverseSellOrders && !(getRSI_30_14() <= 65 && numberOfSellOrders > 0) && !(getStochastic_Signal_30() <= 25 && numberOfSellOrders > 0);

   for(int i=PositionsTotal()-1; i>=0; i--) // returns the number of current position
      if(m_position.SelectByIndex(i) && m_position.Symbol() == _Symbol)     // selects the position by index for further access to its properties
        {
         datetime tm = TimeCurrent();
         datetime posTime = m_position.Time();
         datetime posTimeAlarm = posTime + 60;
         int diff = tm - posTime;
         // Print("REVERSAL TIMING ",diff);
         if(m_position.Profit() < -(3*m_position.Volume())) // && diff > 2440000)
           {

            if(m_position.PositionType() == POSITION_TYPE_SELL)
              {
               if(currentPrice > priceLast
                  //    && isPriceGoingUpx2 // new
                  && isThisBarBULLISH(1)
                  && isThisBarBULLISH(5)
                  //    && isThisBarBULLISH(5,1) // new
                  //  && (isThisBarBULLISH(1,1) || priceHistoryGoingUp(4))
                  && isThisBarBULLISH(15)
                  && isThisBarBULLISH(30)
                  && isThisBarBULLISH(60)
                 )
                 {
                  if(getBarSize(240) > 20
                     && getBarSize(60) > 40
                     && getBarSize(30) > 30
                     && isThisBarBULLISH()
                     && isThisBarBULLISH(1,1)
                     && isThisBarBULLISH(1,2)
                     && isThisBarBULLISH(5)
                     && isThisBarBULLISH(5,1)
                     && isThisBarBULLISH(15)
                     && isThisBarBULLISH(15,1)
                     //   && isThisBarBULLISH(30)
                     //   && isThisBarBULLISH(30,1)
                     //   && isThisBarBULLISH(30,2)
                     //  && isThisBarBULLISH(60)
                     //  && isThisBarBULLISH(60,1)
                     //     && isThisBarBULLISH(60,2)
                     //  && isThisBarBULLISH(240)
                     // && isThisBarBULLISH(999)
                     //   && getRSI_1_14() < 60
                     //&& (!isMA200Up || priceVelocity > 5 || rsiVelocity > 15)
                    )
                    {
                     //   if(isPriceGoingUpx2)
                     //     m_trade.PositionClose(m_position.Ticket());
                     //    Alert("Closing sell due to reversal");
                     //    Alert("POS Type: ", m_position.PositionType(), " SELL ", POSITION_TYPE_SELL, " BUY ", POSITION_TYPE_BUY);
                    }


                  if(shouldTakeMoreReversalBuy && getRSI_5_14() < 60 && getRSI_1_14() < 60)
                    {
                     //  Alert("should take more reversal buy orders ", shouldTakeMoreReversalBuy);
                     placeBuyStopOrder(calculateLots(OP_BUY),"algorithm.V_REVERSALBUY",333, 3);
                    }

                  if(shouldTakeMoreReversalBuy
                     && priceHistoryGoingUp(4)
                     // && getBarSize(240) > 50
                     // && getBarSize(60) > 40
                     // && isThisBarBULLISH()
                     // && isThisBarBULLISH(1,1)
                     // && isThisBarBULLISH(1,2)
                     // && isThisBarBULLISH(5)
                     // && isThisBarBULLISH(5,1)
                     // && isThisBarBULLISH(15)
                     // && isThisBarBULLISH(15,1)
                     // && isThisBarBULLISH(30)
                     //   && isThisBarBULLISH(30,1)
                     // && isThisBarBULLISH(60)
                     //   && isThisBarBULLISH(60,1)
                     //&& isThisBarBULLISH(240)
                     && getRSI_5_14() < 25
                     && getRSI_15_14() < 30
                     && getRSI_30_14() < 40
                     && getRSI_60_14() < 40
                     && (AccountInfoDouble(ACCOUNT_MARGIN_LEVEL) > 10000 || (calculateBuyOrders() + calculateBuyLimitOrders() + calculateBuyStopOrders() < 1))
                    )
                    {
                     placeBuyOrder(calculateLots(OP_BUY),"algorithm.V_BUYHODL",334);
                    }
                 }
              }


            if(m_position.PositionType() == POSITION_TYPE_BUY)
              {
               if(currentPrice < priceLast
                  //       && isPriceGoingDownx2 // new
                  && isThisBarBEARISH(1)
                  && isThisBarBEARISH(5)
                  //      && isThisBarBEARISH(5,1) // new
                  //  && (isThisBarBEARISH(1,1) || priceHistoryGoingDown(4))
                  && isThisBarBEARISH(15)
                  && isThisBarBEARISH(30)
                  && isThisBarBEARISH(60)
                 )
                 {
                  if(getBarSize(240) > 50
                     && getBarSize(60) > 40
                     && getBarSize(30) > 30
                     && isThisBarBEARISH()
                     && isThisBarBEARISH(1,1)
                     && isThisBarBEARISH(1,2)
                     && isThisBarBEARISH(5)
                     && isThisBarBEARISH(5,1)
                     && isThisBarBEARISH(15)
                     && isThisBarBEARISH(15,1)
                     //   && isThisBarBEARISH(30)
                     // && isThisBarBEARISH(30,1)
                     //    && isThisBarBEARISH(30,2)
                     //  && isThisBarBEARISH(60)
                     //     && isThisBarBEARISH(60,1)
                     //    && isThisBarBEARISH(60,2)
                     //  && isThisBarBEARISH(240)
                     //  && isThisBarBEARISH(999)
                     //    && getRSI_1_14() > 40
                     //  && (isMA200Up || priceVelocity < -5 || rsiVelocity < -15)
                     //  && false
                    )
                    {
                     //     if(isPriceGoingDownx2)
                     //       m_trade.PositionClose(m_position.Ticket());
                     //     Alert("Closing buy due to reversal");
                     //     Alert("POS Type: ", m_position.PositionType(), " SELL ", POSITION_TYPE_SELL, " BUY ", POSITION_TYPE_BUY);
                    }


                  if(shouldTakeMoreReversalSell && getRSI_5_14() > 40 && getRSI_1_14() > 40)
                    {
                     //   Alert("should take more reversal sell orders ", shouldTakeMoreReversalSell);
                     placeSellStopOrder(calculateLots(OP_SELL),"algorithm.V_REVERSALSELL",444, 3);
                    }
                  if(shouldTakeMoreReversalSell
                     && priceHistoryGoingDown(4)
                     //   && getBarSize(240) > 50
                     // && getBarSize(60) > 40
                     // && isThisBarBEARISH()
                     // && isThisBarBEARISH(1,1)
                     // && isThisBarBEARISH(1,2)
                     // && isThisBarBEARISH(5)
                     // && isThisBarBEARISH(5,1)
                     // && isThisBarBEARISH(15)
                     // && isThisBarBEARISH(15,1)
                     // && isThisBarBEARISH(30)
                     // && isThisBarBEARISH(30,1)
                     // && isThisBarBEARISH(60)
                     // && isThisBarBEARISH(60,1)
                     //  && isThisBarBEARISH(240)
                     && getRSI_5_14() > 75
                     && getRSI_15_14() > 70
                     && getRSI_30_14() > 60
                     && getRSI_60_14() > 60
                     && (AccountInfoDouble(ACCOUNT_MARGIN_LEVEL) > 10000 || (calculateSellOrders()  + calculateSellLimitOrders() + calculateSellStopOrders() < 1))
                    )
                    {
                     placeSellOrder(calculateLots(OP_SELL),"algorithm.V_SELLHODL",445);
                    }
                 }
              }
           }
        }
  }

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void HandleStopLoss()
  {
   for(int i=PositionsTotal()-1; i>=0; i--) // returns the number of current position
      if(m_position.SelectByIndex(i) && m_position.Symbol() == _Symbol)     // selects the position by index for further access to its properties
        {
         datetime tm = TimeCurrent();
         datetime posTime = m_position.Time();
         datetime posTimeAlarm = posTime + 60;
         int diff = tm - posTime;
         // Print("STOP LOSS TIMING ",diff);

         if(m_position.Profit() < -(9*m_position.Volume()) && diff > 72000999)
           {
            if(m_position.PositionType() == POSITION_TYPE_SELL
               //      && getMA_60_50() < currentPrice && getMA_5_20() < currentPrice
               && isThisBarBULLISH(60) && isThisBarBULLISH(240) && isThisBarBULLISH(15) && isThisBarBULLISH(30) && isThisBarBULLISH(999)
               && isThisBarBULLISH()
               && isThisBarBULLISH(5)
               && ((isPriceGoingDownx2
                    && getBarSize(5) > 10
                    && (!isMA200Up || priceVelocity > 5 || rsiVelocity > 15))
                   || diff > 2400000)
              )
              {
               // m_trade.PositionClose(m_position.Ticket());
               Alert("STOP LOSS!! #SELL ", m_position.Profit());
              }


            if(m_position.PositionType() == POSITION_TYPE_BUY
               //    && getMA_60_50() > currentPrice && getMA_5_20() > currentPrice
               && isThisBarBEARISH(60) && isThisBarBEARISH(240)  && isThisBarBEARISH(15) && isThisBarBEARISH(30) && isThisBarBEARISH(999)
               && isPriceGoingUpx2
               && isThisBarBEARISH()
               && isThisBarBEARISH(5)
               && ((isPriceGoingUpx2
                    && getBarSize(5) > 10
                    && (isMA200Up || priceVelocity < -5 || rsiVelocity < -15))
                   || diff > 2400000)
              )
              {
               //  m_trade.PositionClose(m_position.Ticket());
               Alert("STOP LOSS!! #BUY ", m_position.Profit());
              }
           }
        }
  }

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void closeHODLOrders()
  {
   double symbolProfit = calculateSymbolProfit();
   for(int i=PositionsTotal()-1; i>=0; i--) // returns the number of current positions
      if(m_position.SelectByIndex(i))     // selects the position by index for further access to its properties
        {
         if(m_position.Comment() == "algorithm.V_BUYHODL" || m_position.Comment() == "algorithm.V_SELLHODL")
           {
            double takeProfit = 20 * m_position.Volume();
            bool areOrdersAtProfit = symbolProfit >= takeProfit;
            // Alert(m_position.Comment(), " profit ", symbolProfit, areOrdersAtProfit, " ");

            if(m_position.Comment() == "algorithm.V_SELLHODL")
              {
               bool isTrendReversed = isPriceGoingUpx2 || isThisBarBULLISH();

               if(areOrdersAtProfit || isTrendReversed)
                 {
                  Alert("closing SELL HODL orders soon..", " orders at profit ", areOrdersAtProfit, " trend reverse ", isTrendReversed);
                  //  SendNotification("closing HODL orders soon..");
                  Alert("here ", isPriceGoingUp, " ", isThisBarBULLISH());

                  if(isPriceGoingUp
                     || isThisBarBULLISH()
                    )
                    {
                     if(m_position.Profit() > 0)
                        m_trade.PositionClose(m_position.Ticket());
                     //Alert("Closing all symbols in profit SELL HODL");
                    }
                 }
              }

            if(m_position.Comment() == "algorithm.V_BUYHODL")
              {
               bool isTrendReversed = isPriceGoingDownx2 || isThisBarBEARISH();

               if(areOrdersAtProfit || isTrendReversed)
                 {
                  Alert("closing BUY HODL orders soon..", " orders at profit ", areOrdersAtProfit, " trend reverse ", isTrendReversed);
                  // SendNotification("closing HODL orders soon..");
                  Alert("here2 ", isPriceGoingUp, " ", isThisBarBULLISH());

                  if(isPriceGoingDown
                     || isThisBarBEARISH()
                     //  && isThisBarBEARISH()
                    )
                    {
                     if(m_position.Profit() > 0)
                        m_trade.PositionClose(m_position.Ticket());
                     Alert("Closing all symbols in profit BUY HODL");
                    }
                 }
              }
           }
        }
  }


//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void closeAllSymbolsInProfit()
  {
   if(calculateSymbolProfit() >= 0.5 || calculateAllSymbolProfitPlus() >= 0.6)
     {
      for(int i=PositionsTotal()-1; i>=0; i--) // returns the number of current positions
         if(m_position.SelectByIndex(i))     // selects the position by index for further access to its properties
           {
            if(m_position.Profit() > 0.5 && (m_position.Comment() != "algorithm.V_BUYHODL" && m_position.Comment() != "algorithm.V_SELLHODL") && m_position.Symbol() == _Symbol)
              {
               if(m_position.PositionType() == POSITION_TYPE_SELL)
                 {
                  if(
                     (
                        getMA_1_200() < currentPrice
                        || getMA_1_50() < currentPrice
                        || getMA_5() < currentPrice
                        || isThisBarBULLISH(60)
                        || isThisBarBULLISH(240)
                        || steps > 10
                        || getRSI_1_14() < 32
                        || getRSI_5_14() < 32
                     )

                     //  && howClosetoLow_5 < 5
                     //   && isThisBarBULLISH()
                  )
                    {
                     m_trade.PositionClose(m_position.Ticket());
                     //Alert("Closing all symbols in profit SELL");
                    }
                 }

               if(m_position.PositionType() == POSITION_TYPE_BUY)
                 {
                  if(
                     (
                        getMA_1_200() > currentPrice
                        || getMA_1_50() > currentPrice
                        || getMA_5() > currentPrice
                        || isThisBarBEARISH(60)
                        || isThisBarBEARISH(240)
                        || steps > 10
                        || getRSI_1_14() > 68
                        || getRSI_5_14() > 68
                     )
                     //    && howClosetoHigh_5 < 5
                     //  && isThisBarBEARISH()
                  )
                    {
                     m_trade.PositionClose(m_position.Ticket());
                     Alert("Closing all symbols in profit BUY");
                    }
                 }
              }
           }
     }
  }



//+------------------------------------------------------------------+
//| Check for close order conditions                                 |
//+------------------------------------------------------------------+
void CheckForEarlyClose()
  {
   for(int i=PositionsTotal()-1; i>=0; i--) // returns the number of current position
      if(m_position.SelectByIndex(i))     // selects the position by index for further access to its properties
        {
         if((m_position.Comment() != "algorithm.V_BUYHODL" && m_position.Comment() != "algorithm.V_SELLHODL"))
           {
            if(lowestProf[i][0] != NormalizeDouble(m_position.Ticket(),2))
              {
               lowestProf[i][0] = StringToInteger(m_position.Ticket());
               lowestProf[i][1] = m_position.Profit();
               // Print(lowestProf[i][0]);
               //
              }

            if(lowestProf[i][0] == NormalizeDouble(m_position.Ticket(),2) && m_position.Profit() < lowestProf[i][1])
              {
               //Print("lowering lowest profit");
               lowestProf[i][1] = m_position.Profit();
               //Alert(lowestProf[i][0]," ",lowestProf[i][1]);
              }

            if(lowestProf[i][0] == NormalizeDouble(m_position.Ticket(),2) && lowestProf[i][1] < (-10*m_position.Volume()))
              {
               //   Alert("lowestProfit found",lowestProf[i][1], " ticket ", lowestProf[i][0]);
               // Print("Lowest Profit found ",lowestProf[i][1], " ticket ", lowestProf[i][0]);

               if(m_position.Profit() >= 0.7) // absolute least profit
                 {
                  Alert("Lowest Profit found ",lowestProf[i][1], " closing ticket ", lowestProf[i][0]);
                  Print("Lowest Profit found ",lowestProf[i][1], " closing ticket ", lowestProf[i][0]);
                  if(m_position.PositionType() == POSITION_TYPE_SELL)
                    {
                     if(
                        (getPriceHistory(0) > getPriceHistory(1)
                         && getPriceHistory(1) > getPriceHistory(2)
                         && getPriceHistory(2) > getPriceHistory(3)
                         && getPriceHistory(3) > getPriceHistory(4)
                         && isThisBarBULLISH())
                        || getMA_1_200() < currentLow_M1
                     )
                       {
                        Alert("Price history that closed trade ", getPriceHistory(0), " ", getPriceHistory(1), " ", getPriceHistory(2), " ", getPriceHistory(3), " ", getPriceHistory(4), " ", getPriceHistory(5));
                        m_trade.PositionClose(m_position.Ticket());
                        lowestProf[i][1] = 0;
                       }
                    }

                  if(m_position.PositionType() == POSITION_TYPE_BUY)
                    {
                     if(
                        (getPriceHistory(0) < getPriceHistory(1)
                         && getPriceHistory(1) < getPriceHistory(2)
                         && getPriceHistory(2) < getPriceHistory(3)
                         && getPriceHistory(3) < getPriceHistory(4)
                         && isThisBarBEARISH())
                        || getMA_1_200() > currentHigh_M1
                     )
                       {
                        Alert("Price history that closed trade ", getPriceHistory(0), " ", getPriceHistory(1), " ", getPriceHistory(2), " ", getPriceHistory(3), " ", getPriceHistory(4), " ", getPriceHistory(5));
                        m_trade.PositionClose(m_position.Ticket());
                        lowestProf[i][1] = 0;
                       }
                    }

                 }
              }

            datetime tm = TimeCurrent();
            datetime posTime = m_position.Time();
            datetime posTimeAlarm = posTime + 60;
            //Alert(posTimeAlarm, " ", posTime, " ",tm);
            if(
               (
                  posTimeAlarm < tm
                  || howClosetoLow_999 < 10
                  || howClosetoHigh_999 < 10
                  //  || howClosetoHigh_999_10 < 1
                  //   || howClosetoLow_999_10 < 1
                  || howClosetoLow_240 < 5
                  || howClosetoHigh_240 < 5
                  //  || howClosetoHigh_240_10 < 1
                  //  || howClosetoLow_240_10 < 1
                  || howClosetoLow_60 < 5
                  || howClosetoHigh_60 < 5
                  //   || howClosetoHigh_60_10 < 1
                  //   || howClosetoLow_60_10 < 1
                  || howClosetoLow_30 < 5
                  || howClosetoHigh_30 < 5
                  //  || howClosetoHigh_30_10 < 1
                  //  || howClosetoLow_30_10 < 1
                  || howClosetoLow_15 < 5
                  || howClosetoHigh_15 < 5
                  //   || howClosetoHigh_15_10 < 0.5
                  //   || howClosetoLow_15_10 < 0.5
                  || howClosetoHigh_5 < 5
                  || howClosetoLow_5 < 5
                  //   || howClosetoHigh_5_10 < 0.5
                  //    || howClosetoLow_5_10 < 0.5
                  || howClosetoHigh < 2
                  || howClosetoLow < 2
                  //    || howClosetoHigh_1_10 < 0.2
                  //    || howClosetoLow_1_10 < 0.2
                  || (m_position.PositionType() == POSITION_TYPE_SELL && ((isThisBarBULLISH() && isThisBarBULLISH(1,1) && isThisBarBULLISH(5)) || (isThisBarBULLISH(15) && isThisBarBULLISH(15,1))))
                  || (m_position.PositionType() == POSITION_TYPE_BUY && ((isThisBarBEARISH() && isThisBarBEARISH(1,1) && isThisBarBEARISH(5)) || (isThisBarBULLISH(15) && isThisBarBULLISH(15,1))))
               )
               && m_position.Profit() >= 0.7 // absolute least profit
            )
              {
               bool isLowProfit = m_position.Profit() > (m_position.Volume() * 1) && m_position.Profit() < (m_position.Volume() * 3);

               if(m_position.PositionType() == POSITION_TYPE_SELL)
                 {
                  if(
                     isPriceGoingUpx2

                     //        && isThisBarBULLISH()
                     || getMA_1_200() < currentLow_M1
                     || howClosetoLow_240 < 5
                     || getRSI_1_14() < 20
                     || (posTimeAlarm < tm && currentPrice > priceLast && isLowProfit)
                     || ((isThisBarBULLISH() && isThisBarBULLISH(1,1) && isThisBarBULLISH(5)) || (isThisBarBULLISH(15) && isThisBarBULLISH(15,1)))
                  )
                    {
                     Alert("Closing SELL trade after some time ",m_position.Ticket());
                     Alert("Price history that closed trade ", getPriceHistory(0), " ", getPriceHistory(1), " ", getPriceHistory(2), " ", getPriceHistory(3), " ", getPriceHistory(4), " ", getPriceHistory(5));
                     if(currentPrice > priceLast)
                        m_trade.PositionClose(m_position.Ticket());
                    }
                 }

               if(m_position.PositionType() == POSITION_TYPE_BUY)
                 {
                  if(
                     isPriceGoingDownx2
                     //    && isThisBarBEARISH()
                     || getMA_1_200() > currentHigh_M1
                     || howClosetoHigh_240 < 5
                     || getRSI_1_14() > 80
                     || (posTimeAlarm < tm && currentPrice < priceLast && isLowProfit)
                     || ((isThisBarBEARISH() && isThisBarBEARISH(1,1) && isThisBarBEARISH(5)) || (isThisBarBULLISH(15) && isThisBarBULLISH(15,1)))
                  )
                    {
                     Alert("Closing BUY trade after some time ",m_position.Ticket());
                     Alert("Price history that closed trade ", getPriceHistory(0), " ", getPriceHistory(1), " ", getPriceHistory(2), " ", getPriceHistory(3), " ", getPriceHistory(4), " ", getPriceHistory(5));
                     if(currentPrice < priceLast)
                        m_trade.PositionClose(m_position.Ticket());
                    }
                 }
              }
           }
        }
  }



//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void TrailingStop()
  {
   double Start_TrailingStop_Profit = 0.5; //4.5*calculateLots();
   stopLossPoints = 4;

// Move trailing stop towards profit.
   double stopLoss = stopLossPoints * Point;
   uint PositionsCount = PositionsTotal();
   if(PositionsCount > 0)
     {
      for(int i = PositionsCount-1; i >= 0; i--)
        {
         if(m_position.SelectByIndex(i) && position.Symbol() == Symbol())
           {
            if((m_position.Comment() != "algorithm.V_BUYHODL" && m_position.Comment() != "algorithm.V_SELLHODL"))
              {
               ENUM_POSITION_TYPE type = m_position.PositionType();
               double CurrentSL = m_position.StopLoss();
               double CurrentTP = m_position.TakeProfit();
               double CurrentPrice = m_position.PriceCurrent();
               double CurrentProfit = m_position.Profit();

               if(CurrentProfit > 20)
                 {
                  stopLossPoints = 2;
                 }

               if(type == POSITION_TYPE_BUY)
                 {


                  Start_TrailingStop_Profit = 9*(m_position.Volume());
                  if(m_position.Profit() >= Start_TrailingStop_Profit)
                    {
                     Alert("TL buy");
                     //   Alert(m_position.Profit() > Start_TrailingStop_Profit, " ", CurrentSL, " ", CurrentPrice, " ", stopLoss);
                     //if(percdiff(currentPrice, priceHighest_M1) < 1 || getMA_1_9() > currentHigh_M1 || getMA_1_20() > currentHigh_M1 || getMA_1_50() > currentHigh_M1 || getMA_1_200() > currentHigh_M1 || (isThisBarBEARISH() && isThisBarBEARISH(1,1)))
                     //  {
                     //   Start_TrailingStop_Profit = 7*calculateLots(OP_BUY);
                     //   stopLossPoints = 4;
                     //  }
                     if((CurrentPrice - stopLoss > CurrentSL || CurrentSL == 0.0) && m_position.Profit() >= Start_TrailingStop_Profit)
                       {
                        //  Alert("Wer here!");
                        m_trade.PositionModify(position.Ticket(), NormalizeDouble((CurrentPrice - stopLoss), Digits), 0);
                       }

                    }
                 }
               if(type == POSITION_TYPE_SELL)
                 {
                  Start_TrailingStop_Profit = 9*(m_position.Volume());
                  if(m_position.Profit() >= Start_TrailingStop_Profit)
                    {
                     Alert("TL sell");
                     // Alert(m_position.Profit() > Start_TrailingStop_Profit, " ", CurrentSL, " ", CurrentPrice, " ", stopLoss);

                     //if(percdiff(priceLowest_M1, currentPrice) < 1 || getMA_1_9() < currentLow_M1 || getMA_1_20() < currentLow_M1 || getMA_1_50() < currentLow_M1 || getMA_1_200() < currentLow_M1 || (isThisBarBULLISH() && isThisBarBULLISH(1,1)))
                     //  {
                     //   Start_TrailingStop_Profit = 7*calculateLots(OP_SELL);
                     //   stopLossPoints = 4;
                     //  }
                     if((CurrentPrice + stopLoss < CurrentSL || CurrentSL == 0.0) && m_position.Profit() >= Start_TrailingStop_Profit)
                       {
                        m_trade.PositionModify(position.Ticket(), NormalizeDouble((CurrentPrice + stopLoss), Digits), 0);
                       }
                    }
                 }
              }
           }
        }
     }
  }




//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void doubleUpOrders()
  {
   int numSellOrders = calculateSellOrders();
   int numBuyOrders = calculateBuyOrders();
   int newSellOrders = calculateNewSELLOrders();
   int newBuyOrders = calculateNewBUYOrders();

   for(int i=PositionsTotal()-1; i>=0; i--) // returns the number of current positions
      if(m_position.SelectByIndex(i))     // selects the position by index for further access to its properties
         if(m_position.Symbol()==Symbol())
           {

            // Double Up
            bool readyToDoubleUpSell = (
                                          isThisBarBEARISH()
                                          && getStochastic_Main() > 40
                                          && getStochastic_Main_5() > 30
                                          && howClosetoLow > 20
                                          // && getMA_1_200() > currentPrice
                                          //      && getMA_1_50() > getMA_1_20()
                                          //     && getMA_1_20() > getMA_1_9()
                                          //    && getMA_1_20() > currentHigh_M1
                                       );

            bool readyToDoubleUpBuy = (
                                         isThisBarBULLISH()
                                         && getStochastic_Main() < 70
                                         && getStochastic_Main_5() < 80
                                         && howClosetoHigh > 20
                                         //&& getMA_1_200() < currentPrice
                                         //     && getMA_1_50() < getMA_1_20()
                                         //     && getMA_1_20() < getMA_1_9()
                                         //    && getMA_1_20() < currentLow_M1
                                      );

            if(m_position.Profit() >= 0.1 && AccountInfoDouble(ACCOUNT_PROFIT) > -500)
              {
               // Alert("DOUBLING UP");
               // Print("DOUBLING UP");
               if(m_position.PositionType() == POSITION_TYPE_SELL && newSellOrders < 20 && numSellOrders < 300 && readyToDoubleUpSell)
                 {
                  placeSellOrder(calculateLots(OP_SELL),"algorithm.V_SELLSTEP_2",999);
                 }
               if(m_position.PositionType() == POSITION_TYPE_BUY && newBuyOrders < 20 && numBuyOrders < 300 && readyToDoubleUpBuy)
                 {
                  placeBuyOrder(calculateLots(OP_BUY),"algorithm.V_BUYSTEP_2",999);
                 }
              }

            if(m_position.Profit() >= 2 && AccountInfoDouble(ACCOUNT_PROFIT) > -500)
              {
               //  Alert("DOUBLING UP**$$**");
               //  Print("DOUBLING UP**$$**");
               if(m_position.PositionType() == POSITION_TYPE_SELL && newSellOrders < 30 && numSellOrders < 400 && readyToDoubleUpSell)
                 {
                  placeSellOrder(calculateLots(OP_SELL),"algorithm.V_SELLSTEP_3",999);
                 }
               if(m_position.PositionType() == POSITION_TYPE_BUY && newBuyOrders < 30 && numBuyOrders < 400 && readyToDoubleUpBuy)
                 {
                  placeBuyOrder(calculateLots(OP_BUY),"algorithm.V_BUYSTEP_3",999);
                 }
              }
            // End Double Up
           }
  }





//+------------------------------------------------------------------+
//| Close All Orders                                                 |
//+------------------------------------------------------------------+
void closeAllOrders()
  {
   for(int i=PositionsTotal()-1; i>=0; i--) // returns the number of current positions
      if(m_position.SelectByIndex(i))     // selects the position by index for further access to its properties
         if(m_position.Symbol()==Symbol() && m_position.Profit() > 0)
            m_trade.PositionClose(m_position.Ticket()); // close a position by the specified symbol
  }

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void closeAllOrdersALL(int type)
  {
   for(int i=PositionsTotal()-1; i>=0; i--) // returns the number of current positions
      if(m_position.SelectByIndex(i))     // selects the position by index for further access to its properties
         if(m_position.Symbol()==Symbol() && m_position.PositionType() == type)
           {
            m_trade.PositionClose(m_position.Ticket()); // close a position by the specified symbol
           }
  }



//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void getComment()
  {

   for(int i=PositionsTotal()-1; i>=0; i--) // returns the number of current positions
      if(m_position.SelectByIndex(i))     // selects the position by index for further access to its properties
         if(m_position.Symbol()==Symbol())
            Alert(m_position.Comment());
  }
//+------------------------------------------------------------------+



//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void deleteAllPendingBuyLimit()
  {
   int ord_total=OrdersTotal();
   if(ord_total > 0)
     {
      for(int i=ord_total-1; i>=0; i--)
        {
         ulong ticket=OrderGetTicket(i);

         if(OrderSelect(ticket) && OrderGetString(ORDER_SYMBOL)==Symbol() && OrderGetInteger(ORDER_TYPE) == 2)
           {
            m_trade.OrderDelete(ticket);
           }
        }
     }
  }

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void deleteAllPendingBuyStop()
  {
   int ord_total=OrdersTotal();
   if(ord_total > 0)
     {
      for(int i=ord_total-1; i>=0; i--)
        {
         ulong ticket=OrderGetTicket(i);
         //  Alert("order type ", OrderGetInteger(ORDER_TYPE));

         if(OrderSelect(ticket) && OrderGetString(ORDER_SYMBOL)==Symbol() && OrderGetInteger(ORDER_TYPE) == 4)
           {
            m_trade.OrderDelete(ticket);
           }
        }
     }
  }

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void deleteAllPendingSellLimit()
  {
   int ord_total=OrdersTotal();
   if(ord_total > 0)
     {
      for(int i=ord_total-1; i>=0; i--)
        {
         ulong ticket=OrderGetTicket(i);

         if(OrderSelect(ticket) && OrderGetString(ORDER_SYMBOL)==Symbol() && OrderGetInteger(ORDER_TYPE) == 3)
           {
            m_trade.OrderDelete(ticket);
           }
        }
     }
  }


//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void deleteAllPendingSellStop()
  {
   int ord_total=OrdersTotal();
   if(ord_total > 0)
     {
      for(int i=ord_total-1; i>=0; i--)
        {
         ulong ticket=OrderGetTicket(i);
         //  Alert("order type ", OrderGetInteger(ORDER_TYPE));

         if(OrderSelect(ticket) && OrderGetString(ORDER_SYMBOL)==Symbol() && OrderGetInteger(ORDER_TYPE) == 5)
           {
            m_trade.OrderDelete(ticket);
           }
        }
     }
  }

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void deleteAllPending()
  {
   int ord_total=OrdersTotal();
   if(ord_total > 0)
     {
      for(int i=ord_total-1; i>=0; i--)
        {
         ulong ticket=OrderGetTicket(i);
         if(OrderSelect(ticket) && OrderGetString(ORDER_SYMBOL)==Symbol())
           {
            m_trade.OrderDelete(ticket);
           }
        }
     }
  }

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void deletePendingScalp()
  {
   int ord_total=OrdersTotal();
   if(ord_total > 0)
     {
      for(int i=ord_total-1; i>=0; i--)
        {
         ulong ticket=OrderGetTicket(i);
         if(OrderSelect(ticket) && OrderGetString(ORDER_SYMBOL)==Symbol() && (OrderComment()== "algorithm.V_BUYSTOP" || OrderComment()== "algorithm.V_SELLSTOP"))
           {
            m_trade.OrderDelete(ticket);
           }
        }
     }
  }

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void deletePendingHODL()
  {
   int ord_total=OrdersTotal();
   if(ord_total > 0)
     {
      for(int i=ord_total-1; i>=0; i--)
        {
         ulong ticket=OrderGetTicket(i);
         if(OrderSelect(ticket) && OrderGetString(ORDER_SYMBOL)==Symbol() && (OrderComment()== "algorithm.V_BUYONE" || OrderComment()== "algorithm.V_BUYTWO"))
           {
            m_trade.OrderDelete(ticket);
           }
        }
     }
  }


//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void checkPendingOrdersTrend()
  {
   int ord_total=OrdersTotal();
   if(ord_total > 0)
     {
      for(int i=ord_total-1; i>=0; i--)
        {
         ulong ticket=OrderGetTicket(i);
         //  Alert("order type ", OrderGetInteger(ORDER_TYPE));

         if(OrderSelect(ticket) && OrderGetString(ORDER_SYMBOL)==Symbol())
           {

            // if close to pending order
            double orderOpenPrice = OrderGetDouble(ORDER_PRICE_OPEN);
            double pendingPriceDiff = MathAbs(currentPrice - orderOpenPrice);

            if(pendingPriceDiff < 1.2)
              {
               // Alert("price pending diff ", pendingPriceDiff, " ", orderOpenPrice, " ", currentPrice);
               if((OrderGetInteger(ORDER_TYPE) == 2)) // buy limit
                 {
                  //

                  //    Alert("buy limit @ ", OrderGetDouble(ORDER_PRICE_OPEN));
                  if(
                     ((isThisBarBEARISH(60) && isThisBarBEARISH(30) && isThisBarBEARISH(240) && isThisBarBEARISH(15))
                      || priceVelocity < -5)
                     && priceVelocity < -2
                  )
                    {
                     deleteAllPendingBuyLimit();
                    }
                 }

               if((OrderGetInteger(ORDER_TYPE) == 3)) // sell limit
                 {
                  //
                  //  Alert("sell limit @ ", OrderGetDouble(ORDER_PRICE_OPEN));
                  if(
                     ((isThisBarBULLISH(60) && isThisBarBULLISH(30) && isThisBarBULLISH(240) && isThisBarBULLISH(15))
                      || priceVelocity > 5)
                     && priceVelocity > 2
                  )
                    {
                     deleteAllPendingSellLimit();
                    }
                 }

               if((OrderGetInteger(ORDER_TYPE) == 4)) // buy stop
                 {
                  //
                  //    Alert("buy stop @ ", OrderGetDouble(ORDER_PRICE_OPEN));
                  if(
                     ((isThisBarBEARISH(60) && isThisBarBEARISH(30) && isThisBarBEARISH(240) && isThisBarBEARISH(15))
                      || priceVelocity < -5)
                     && priceVelocity < -2
                  )
                    {
                     deleteAllPendingBuyStop();
                    }
                 }

               if((OrderGetInteger(ORDER_TYPE) == 5)) // sell stop
                 {
                  //

                  //     Alert("sell stop @ ", OrderGetDouble(ORDER_PRICE_OPEN));
                  if(
                     ((isThisBarBULLISH(60) && isThisBarBULLISH(30) && isThisBarBULLISH(240) && isThisBarBULLISH(15))
                      || priceVelocity > 5)
                     && priceVelocity > 2
                  )
                    {
                     deleteAllPendingSellStop();
                    }
                 }
              }
           }
        }
     }
  }

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
bool checkPendingOrders()
  {
   int ord_total=OrdersTotal();
   if(ord_total > 0)
     {
      for(int i=ord_total-1; i>=0; i--)
        {
         ulong ticket=OrderGetTicket(i);
         if(OrderSelect(ticket))
           {

            if(OrderGetString(ORDER_COMMENT) == "algorithm.V_REVERSALBUY" || OrderGetString(ORDER_COMMENT) == "algorithm.V_REVERSALSELL" || OrderGetString(ORDER_COMMENT) == "BUY_ORDER" || OrderGetString(ORDER_COMMENT) == "SELL_ORDER")
              {
               double orderPrice = OrderGetDouble(ORDER_PRICE_OPEN);
               double gap = 8*Point;

               if((orderPrice > (currentPrice+gap) && isThisBarBEARISH())
                  || (orderPrice < (currentPrice-gap) && isThisBarBULLISH()))
                 {
                  m_trade.OrderDelete(ticket);
                  return false;
                 }
              }

            if(OrderGetString(ORDER_COMMENT) == "algorithm.V_BUYLIMIT" || OrderGetString(ORDER_COMMENT) == "algorithm.V_BUYLIMIT2" || OrderGetString(ORDER_COMMENT) == "algorithm.V_BUYLIMITS3")
              {


               double orderPrice = OrderGetDouble(ORDER_PRICE_OPEN);
               double gap = 8*Point;

               double lowestPriceLast15 = getLowestPrice(15,1);
               // Alert("buy limit price ", orderPrice, " ", lowestPriceLast15, " ", getStochastic_Main_60(), " ", getStochastic_Signal_60());

               if(rsiVelocity < -15)
                 {
                  Alert("deleting pending buy, rsi going down ");
                  deleteAllPendingBuyLimit();
                 }

               if(priceVelocity < -5)
                 {
                  Alert("deleting pending buy, price going down ");
                  deleteAllPendingBuyLimit();
                 }


               if(howClosetoHigh_999 < 40 || howClosetoHigh_240 < 40)
                 {
                  Alert("deleting pending buy, price too high ");
                  deleteAllPendingBuyLimit();
                 }

               if(isThisBarBEARISH(5,1) && getBarSize(5,1) > 5 && isThisBarBEARISH(5,2) && getBarSize(5,2) > 5 && isThisBarBEARISH(5,1) && getBarSize(5,1) > 5 && getMA_1_9() > currentPrice && getMA_1_20() > getMA_1_9())
                 {
                  Alert("deleting pending buy, price trending down ");
                  deleteAllPendingBuyLimit();
                 }

               if(calculateBuyOrdersProfit() < -20 && getRSI_1_14() > 25 && isThisBarBEARISH()&& isPriceGoingDown)
                 {
                  Alert("deleting pending buy, profit low ");
                  deleteAllPendingBuyLimit();
                 }

               if(getStochastic_Main_240() >= 65)
                 {
                  Alert("delete pending buy limit, stochastic overbought 4hr");
                  deleteAllPendingBuyLimit();
                 }

               if(getStochastic_Main_60() >= 65 && getStochastic_Main_30() >= 80)
                 {
                  Alert("delete pending buy limit, stochastic overbought 1hr");
                  deleteAllPendingBuyLimit();
                 }

               if(getStochastic_Main() >= 70 && getStochastic_Main_5() >= 70)
                 {
                  Alert("delete pending buy limit, stochastic oversold 1,5min");
                  deleteAllPendingBuyLimit();
                 }
               if(currentPrice < orderPrice)
                 {
                  Alert("price is lower than buy limit");
                  m_trade.OrderDelete(ticket);
                  deleteAllPendingBuyLimit();
                 }

               if(getMA_15_20() < currentPrice && getMA_30() < currentPrice && getMA_5() < currentPrice && getBarSize(1) < 20 && getBarSize(5) < 22)
                 {
                  //  Alert("skipping buy limit close due to MA");
                  return false;
                 }
               if(isThisBarBEARISH()
                  && isThisBarBEARISH(1,1)
                  // && isThisBarBEARISH(1,2)
                  && isThisBarBEARISH(5)
                  // && isThisBarBEARISH(5,1)
                  && isThisBarBEARISH(15)
                  && isThisBarBEARISH(30)
                  && isThisBarBEARISH(60)
                  && isThisBarBEARISH(240)
                  && getMA_60_20() > getHighestPrice(60))
                 {
                  Alert("closing buy limit isBearish ");
                  m_trade.OrderDelete(ticket);
                 }

               if(getRSI_1_14() > 70)
                 {
                  Alert("closing buy limit rsi1_14 > 70 ");
                  m_trade.OrderDelete(ticket);
                 }

               if(getRSI_5_14() > 70)
                 {
                  Alert("closing buy limit rsi5_14 > 70 ");
                  m_trade.OrderDelete(ticket);
                 }

               if(getRSI_15_14() > 70)
                 {
                  Alert("closing buy limit rsi15_14 > 70 ");
                  m_trade.OrderDelete(ticket);
                 }

               if(getRSI_30_14() > 70)
                 {
                  Alert("closing buy limit rsi30_14 > 70 ");
                  m_trade.OrderDelete(ticket);
                 }

               if(getRSI_60_14() > 70)
                 {
                  Alert("closing buy limit rsi60_14 > 70 ");
                  m_trade.OrderDelete(ticket);
                 }

               if(getBarSize(1) > 20 && isThisBarBEARISH())
                 {
                  Alert("closing buy limit getBarSize 1 ");
                  m_trade.OrderDelete(ticket);
                 }

               if(priceVelocity < -7)
                 {
                  Alert("closing buy limit priceVelocity ");
                  m_trade.OrderDelete(ticket);
                 }

               if(rsiVelocity < -14)
                 {
                  Alert("closing buy limit rsiVelocity ");
                  m_trade.OrderDelete(ticket);
                 }

               if(isThisBarBEARISH() && isThisBarBEARISH(1,1) && getBarSize(1,0) > 15 && getBarSize(1,1) > 20)
                 {
                  Alert("closing buy limit isBearish1! ");
                  m_trade.OrderDelete(ticket);
                 }

               if(isThisBarBEARISH(1,1) && isThisBarBEARISH(1,2)  && getBarSize(1,0) > 15 && getBarSize(1,1) > 15 && getBarSize(1,2) > 15)
                 {
                  Alert("closing buy limit isBearish1,2 ");
                  m_trade.OrderDelete(ticket);
                 }

               if(isThisBarBEARISH() && isThisBarBEARISH(1,1) && isThisBarBEARISH(1,2) && isThisBarBEARISH(1,1) && getBarSize(1,0) > 15)
                 {
                  Alert("closing buy limit isbearish1,2,3 ");
                  m_trade.OrderDelete(ticket);
                 }

               if(isThisBarBEARISH(5) && getBarSize(5,0) > 22 && priceVelocity < -4)
                 {
                  Alert("closing buy limit isBearish5! ");
                  m_trade.OrderDelete(ticket);
                 }

               if(isPriceGoingDownx2 && isThisBarBEARISH() && getBarSize(1,0) > 25)
                 {
                  Alert("closing buy limit isgoingdown ");
                  m_trade.OrderDelete(ticket);
                 }

               if(getStochastic_Main_60() > 60)
                 {
                  Alert("closing buy limit stochastic 1 ");
                  m_trade.OrderDelete(ticket);
                 }

               if(getStochastic_Main_60() < getStochastic_Signal_60() && getStochastic_Main_15() > 65)
                 {
                  Alert("closing buy limit stochastic 2 ");
                  m_trade.OrderDelete(ticket);
                  deleteAllPendingBuyLimit();
                 }

               //if((currentPrice < (orderPrice+gap) && isThisBarBEARISH())
               //   || (currentPrice > (orderPrice+gap) && isThisBarBULLISH())
               //  )
               //  {
               //   //    Alert("closing buy limit..");
               //   //    m_trade.OrderDelete(ticket);
               //   return false;
               //  }
              }

            if(OrderGetString(ORDER_COMMENT) == "algorithm.V_SELLLIMIT" || OrderGetString(ORDER_COMMENT) == "algorithm.V_SELLLIMIT2" || OrderGetString(ORDER_COMMENT) == "algorithm.V_SELLLIMITS3")
              {
               double orderPrice = OrderGetDouble(ORDER_PRICE_OPEN);
               double gap = 8*Point;

               double highestPriceLast15 = getHighestPrice(15,1);
               //  Alert("sell limit price ", orderPrice, " ", highestPriceLast15);
               if(getMA_15_20() > currentPrice && getMA_30() > currentPrice && getMA_5() > currentPrice && getBarSize(1) < 40 && getBarSize(5) < 40)
                 {
                  //  Alert("skipping sell limit close due to MA");
                  return false;
                 }

               if(rsiVelocity > 15)
                 {
                  Alert("deleting pending sell, rsi going up ");
                  deleteAllPendingSellLimit();
                 }
               if(priceVelocity > 5)
                 {
                  Alert("deleting pending sell, price going up ");
                  deleteAllPendingSellLimit();
                 }
               if(howClosetoLow_999 < 40 || howClosetoLow_240 < 40)
                 {
                  Alert("deleting pending sell, price too low ");
                  deleteAllPendingSellLimit();
                 }
               if(isThisBarBULLISH(5,1) && getBarSize(5,1) > 5 && isThisBarBULLISH(5,2) && getBarSize(5,2) > 5 && isThisBarBULLISH(5,1) && getBarSize(5,1) > 5 && getMA_1_9() < currentPrice && getMA_1_20() < getMA_1_9())
                 {
                  Alert("deleting pending sell, price trending up ");
                  deleteAllPendingSellLimit();
                 }

               if(calculateSellOrdersProfit() < -20 && getRSI_1_14() < 75 && isThisBarBULLISH() && isPriceGoingUp)
                 {
                  Alert("deleting pending sell, profit low ");
                  deleteAllPendingSellLimit();
                 }
               if(getStochastic_Main_240() <= 35)
                 {
                  Alert("delete pending sell limit, stochastic oversold 4hr");
                  deleteAllPendingSellLimit();
                 }

               if(getStochastic_Main_60() <= 35 && getStochastic_Main_30() <= 20)
                 {
                  Alert("delete pending sell limit, stochastic oversold 1hr,30");
                  deleteAllPendingSellLimit();
                 }


               if(currentPrice > orderPrice)
                 {
                  Alert("price is lower than sell limit");
                  m_trade.OrderDelete(ticket);
                  deleteAllPendingSellLimit();
                 }

               if(isThisBarBULLISH()
                  && isThisBarBULLISH(1,1)
                  // && isThisBarBULLISH(1,2)
                  && isThisBarBULLISH(5)
                  // && isThisBarBULLISH(5,1)
                  && isThisBarBULLISH(15)
                  && isThisBarBULLISH(30)
                  && isThisBarBULLISH(60)
                  && isThisBarBULLISH(240)
                  && getMA_60_20() < getLowestPrice(60))
                 {
                  Alert("closing sell limit isBullish ");
                  m_trade.OrderDelete(ticket);
                 }

               if(getRSI_1_14() < 30)
                 {
                  Alert("closing sell limit rsi1_14 < 30 ");
                  m_trade.OrderDelete(ticket);
                 }

               if(getRSI_5_14() < 30)
                 {
                  Alert("closing sell limit rsi5_14 < 30 ");
                  m_trade.OrderDelete(ticket);
                 }

               if(getRSI_15_14() < 30)
                 {
                  Alert("closing sell limit rsi15_14 < 30 ");
                  m_trade.OrderDelete(ticket);
                 }

               if(getRSI_30_14() < 30)
                 {
                  Alert("closing sell limit rsi30_14 < 30 ");
                  m_trade.OrderDelete(ticket);
                 }

               if(getRSI_60_14() < 30)
                 {
                  Alert("closing sell limit rsi60_14 < 30 ");
                  m_trade.OrderDelete(ticket);
                 }

               if(getBarSize(1) > 40 && isThisBarBULLISH())
                 {
                  Alert("closing sell limit getBarSize 1 ");
                  m_trade.OrderDelete(ticket);
                 }

               if(priceVelocity > 7)
                 {
                  Alert("closing sell limit priceVelocity ");
                  m_trade.OrderDelete(ticket);
                 }

               if(rsiVelocity > 14)
                 {
                  Alert("closing sell limit rsiVelocity ");
                  m_trade.OrderDelete(ticket);
                 }

               if(isThisBarBULLISH() && isThisBarBULLISH(1,1) && getBarSize(1,0) > 15 && getBarSize(1,1) > 20)
                 {
                  Alert("closing sell limit isBullish1! ");
                  m_trade.OrderDelete(ticket);
                 }

               if(isThisBarBULLISH() && isThisBarBULLISH(1,1) && isThisBarBULLISH(1,2) && getBarSize(1,0) > 15 && getBarSize(1,1) > 15 && getBarSize(1,2) > 15)
                 {
                  Alert("closing sell limit isBullish1,2 ");
                  m_trade.OrderDelete(ticket);
                 }

               if(isThisBarBULLISH(1,1) && isThisBarBULLISH(1,2) && isThisBarBULLISH(1,1) && getBarSize(1,0) > 15)
                 {
                  Alert("closing sell limit isBullish1,2,3 ");
                  m_trade.OrderDelete(ticket);
                 }

               if(isThisBarBULLISH(5) && getBarSize(5,0) > 22 && priceVelocity > 4)
                 {
                  Alert("closing sell limit isBullish5! ");
                  m_trade.OrderDelete(ticket);
                 }

               if(isPriceGoingUpx2 && isThisBarBULLISH() && getBarSize(1,0) > 25)
                 {
                  Alert("closing sell limit isgoingup ");
                  m_trade.OrderDelete(ticket);
                 }

               if(getStochastic_Main_60() < 30)
                 {
                  Alert("closing sell limit stochastic 1 ");
                  m_trade.OrderDelete(ticket);
                 }

               if(getStochastic_Main_60() > getStochastic_Signal_60() && getStochastic_Main_15() < 35)
                 {
                  Alert("closing sell limit stochastic 2 ");
                  m_trade.OrderDelete(ticket);
                  deleteAllPendingSellLimit();
                 }


               //if((currentPrice < (orderPrice+gap) && isThisBarBEARISH())
               //   || (currentPrice > (orderPrice+gap) && isThisBarBULLISH())
               //  )
               //  {
               //   //  Alert("closing sell limit..");
               //   //  m_trade.OrderDelete(ticket);
               //   return false;
               //  }
              }

           }
        }
     }
   return true;
  }
//+------------------------------------------------------------------+

//+------------------------------------------------------------------+


//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void CheckLevels()
  {
// Alert(calculateSymbolBuyLowestPrice(), " ", calculateSymbolSellHighestPrice());
//Alert(clock.min);
   calcPriceHistory();
   calcPriceHistoryTrend();
//calcPriceHistoryTrend500();
//getCurrentPriceHistoryTrend500();
   calcRSI1History();
   currentPrice=iClose(Symbol(),PERIOD_M1,0);
   rsiVelocity = NormalizeDouble(calculateVelocity(rsi1History[0][0],rsi1History[100][0],rsi1History[100][1]),4);
   priceVelocity = NormalizeDouble(calculateVelocity(priceHistoryTrend[0][0],priceHistoryTrend[100][0],priceHistoryTrend[100][1]),4);

   if(rsiVelocity > 10)
     {
      //Alert(rsiVelocity, "mRSI surging up! #BUY", " h: ",highestrsi, " l: ",lowestrsi);
      // SendNotification(rsiVelocity + " RSI surging up! #BUY"+ " h: "+highestrsi+ " l: "+lowestrsi);
     }
   if(rsiVelocity < -10)
     {
      //Alert(rsiVelocity, " RSI surging down! #SELL", " h: ",highestrsi, " l: ",lowestrsi);
      //SendNotification(rsiVelocity + " RSI surging down! #SELL"+ " h: "+highestrsi+ " l: "+lowestrsi);
     }

   if(priceVelocity > 2)
     {
      //Alert(priceVelocity + " Price surging up! #BUY", " h: ",highestprice, " l: ",lowestprice);
      //SendNotification(priceVelocity + " Price surging up! #BUY"+ " h: "+highestprice+ " l: "+lowestprice);
     }
   if(priceVelocity < -2)
     {
      //Alert(priceVelocity + " Price surging down! #SELL", " h: ",highestprice, " l: ",lowestprice);
      //SendNotification(priceVelocity + " Price surging down! #SELL"+ " h: "+highestprice+ " l: "+lowestprice);
     }

   highestrsi = NormalizeDouble(MathMax(highestrsi, rsiVelocity),4);
   lowestrsi = NormalizeDouble(MathMin(lowestrsi,rsiVelocity),4);
   highestprice=NormalizeDouble(MathMax(highestprice,priceVelocity),4);
   lowestprice=NormalizeDouble(MathMin(lowestprice,priceVelocity),4);
   howClosetoLow = NormalizeDouble(percdiff(currentPrice, getLowestPrice(1, 200)),2);
   howClosetoHigh = NormalizeDouble(percdiff(getHighestPrice(1, 200), currentPrice),2);
   howClosetoLow_5 = NormalizeDouble(percdiff(currentPrice, getLowestPrice(5, 200)),2);
   howClosetoHigh_5 = NormalizeDouble(percdiff(getHighestPrice(5, 200), currentPrice),2);
   howClosetoLow_15 = NormalizeDouble(percdiff(currentPrice, getLowestPrice(15, 200)),2);
   howClosetoHigh_15 = NormalizeDouble(percdiff(getHighestPrice(15, 200), currentPrice),2);
   howClosetoLow_30 = NormalizeDouble(percdiff(currentPrice, getLowestPrice(30, 200)),2);
   howClosetoHigh_30 = NormalizeDouble(percdiff(getHighestPrice(30, 200), currentPrice),2);
   howClosetoLow_60 = NormalizeDouble(percdiff(currentPrice, getLowestPrice(60, 200)),2);
   howClosetoHigh_60 = NormalizeDouble(percdiff(getHighestPrice(60, 200), currentPrice),2);
   howClosetoLow_240 = NormalizeDouble(percdiff(currentPrice, getLowestPrice(240, 200)),2);
   howClosetoHigh_240 = NormalizeDouble(percdiff(getHighestPrice(240, 200), currentPrice),2);
   howClosetoLow_999 = NormalizeDouble(percdiff(currentPrice, getLowestPrice(999, 200)),2);
   howClosetoHigh_999 = NormalizeDouble(percdiff(getHighestPrice(999, 200), currentPrice),2);
   howClosetoLow_1_10 = NormalizeDouble(percdiff(currentPrice, getLowestPrice(1, 10)),2);
   howClosetoHigh_1_10 = NormalizeDouble(percdiff(getHighestPrice(1, 10), currentPrice),2);
   howClosetoLow_5_10 = NormalizeDouble(percdiff(currentPrice, getLowestPrice(5, 10)),2);
   howClosetoHigh_5_10 = NormalizeDouble(percdiff(getHighestPrice(5, 10), currentPrice),2);
   howClosetoLow_15_10 = NormalizeDouble(percdiff(currentPrice, getLowestPrice(15, 10)),2);
   howClosetoHigh_15_10 = NormalizeDouble(percdiff(getHighestPrice(15, 10), currentPrice),2);
   howClosetoLow_30_10 = NormalizeDouble(percdiff(currentPrice, getLowestPrice(30, 10)),2);
   howClosetoHigh_30_10 = NormalizeDouble(percdiff(getHighestPrice(30, 10), currentPrice),2);
   howClosetoLow_60_10 = NormalizeDouble(percdiff(currentPrice, getLowestPrice(60, 10)),2);
   howClosetoHigh_60_10 = NormalizeDouble(percdiff(getHighestPrice(60, 10), currentPrice),2);
   howClosetoLow_240_10 = NormalizeDouble(percdiff(currentPrice, getLowestPrice(240, 10)),2);
   howClosetoHigh_240_10 = NormalizeDouble(percdiff(getHighestPrice(240, 10), currentPrice),2);
   howClosetoLow_999_10 = NormalizeDouble(percdiff(currentPrice, getLowestPrice(999, 10)),2);
   howClosetoHigh_999_10 = NormalizeDouble(percdiff(getHighestPrice(999, 10), currentPrice),2);
   howClose = NormalizeDouble(howClosetoHigh - howClosetoLow, 2);
   howClose_5 = NormalizeDouble(howClosetoHigh_5 - howClosetoLow_5, 2);
   howClose_15 = NormalizeDouble(howClosetoHigh_15 - howClosetoLow_15, 2);
   howClose_30 = NormalizeDouble(howClosetoHigh_30 - howClosetoLow_30, 2);
   howClose_60 = NormalizeDouble(howClosetoHigh_60 - howClosetoLow_60, 2);
   howClose_240 = NormalizeDouble(howClosetoHigh_240 - howClosetoLow_240, 2);
   howClose_999 = NormalizeDouble(howClosetoHigh_999 - howClosetoLow_999, 2);

   currentLow_M1=iLow(Symbol(),PERIOD_M1,0);
   currentLow_M5=iLow(Symbol(),PERIOD_M5,0);
   currentLow_M15=iLow(Symbol(),PERIOD_M15,0);
   currentLow_M30=iLow(Symbol(),PERIOD_M30,0);
   currentLow_H1=iLow(Symbol(),PERIOD_H1,0);
   currentHigh_M1=iHigh(Symbol(),PERIOD_M1,0);
   currentHigh_M5=iHigh(Symbol(),PERIOD_M5,0);
   currentHigh_M15=iHigh(Symbol(),PERIOD_M15,0);
   currentHigh_M30=iHigh(Symbol(),PERIOD_M30,0);
   currentHigh_H1=iHigh(Symbol(),PERIOD_H1,0);
   steps = getStepsLastBull(1);
   barSize=MathAbs((iOpen(Symbol(),PERIOD_M1,0)-currentPrice)*100);
   highestPrice3Day=getHighestPrice(999,3);
   lowestPrice3Day=getLowestPrice(999,3);
   highestPrice3Day_diff=percdiff(currentPrice,getHighestPrice(999,3));
   lowestPrice3Day_diff=percdiff(getLowestPrice(999,3),currentPrice);
   priceHighest_M1=getHighestPrice(1,300);
   priceHighest_M1_75=getHighestPrice(1,75);
   priceHighest_M1_37=getHighestPrice(1,37);
   priceLowest_M1=getLowestPrice(1,300);
   priceLowest_M1_75=getLowestPrice(1,75);
   priceLowest_M1_37=getLowestPrice(1,37);
   priceHighest_M5=getHighestPrice(5,300);
   priceHighest_M5_75=getHighestPrice(5,75);
   priceHighest_M5_37=getHighestPrice(5,37);
   priceLowest_M5=getLowestPrice(5,300);
   priceLowest_M5_75=getLowestPrice(5,75);
   priceLowest_M5_37=getLowestPrice(5,37);
   priceHighest_M15=getHighestPrice(15,300);
   priceLowest_M15=getLowestPrice(15,300);
   priceHighest_M30=getHighestPrice(30,300);
   priceLowest_M30=getLowestPrice(30,300);
   priceDiff5Min = NormalizeDouble(currentPrice - iClose(Symbol(),PERIOD_M5,1),3);
   priceDiff15Min = NormalizeDouble(currentPrice - iClose(Symbol(),PERIOD_M15,1),3);
   priceDiff30Min = NormalizeDouble(currentPrice - iClose(Symbol(),PERIOD_M30,1),3);
   priceDiff1Hr = NormalizeDouble(currentPrice - iClose(Symbol(),PERIOD_H1,1),3);
   priceDiff4Hr = NormalizeDouble(currentPrice - iClose(Symbol(),PERIOD_H4,1),3);
   priceDiff1Day = NormalizeDouble(currentPrice - iClose(Symbol(),PERIOD_D1,1),3);

//   if(priceDiff5Min > 2)
//     {
//      Alert("price going up 5 min " + priceDiff5Min);
//      SendNotification("price going up 5 min " + priceDiff5Min);
//     }
//
//   if(priceDiff5Min < -2)
//     {
//      Alert("price going down 5 min " + priceDiff5Min);
//      SendNotification("price going down 5 min " + priceDiff5Min);
//     }
//
//   if(priceDiff15Min > 3)
//     {
//      Alert("price going up 15 min " + priceDiff15Min);
//      SendNotification("price going up 15 min " + priceDiff15Min);
//     }
//
//   if(priceDiff15Min < -3)
//     {
//      Alert("price going down 15 min " + priceDiff15Min);
//      SendNotification("price going down 15 min " + priceDiff15Min);
//     }
//
//   if(priceDiff30Min > 5)
//     {
//      Alert("price going up 30 min " + priceDiff30Min);
//      SendNotification("price going up 30 min " + priceDiff30Min);
//     }
//
//   if(priceDiff30Min < -5)
//     {
//      Alert("price going down 30 min " + priceDiff30Min);
//      SendNotification("price going down 30 min " + priceDiff30Min);
//     }



// Bears and Bulls Power
//currentBearP_1 = NormalizeDouble(MathAbs(getBearP_1()),1);
//currentBullP_1 = NormalizeDouble(MathAbs(getBullP_1()),1);
//currentBearP_5 = NormalizeDouble(MathAbs(getBearP_5()),1);
//currentBullP_5 = NormalizeDouble(MathAbs(getBullP_5()),1);
//currentBearP_15 = NormalizeDouble(MathAbs(getBearP_15()),1);
//currentBullP_15 = NormalizeDouble(MathAbs(getBullP_15()),1);

// Pending Orders
// checkPendingOrders();
// last Bulls
   lastBull1 = getStepsLastBull(1,0) - 1;
   lastBull2 = lastBull1 + (getStepsLastBull(1,lastBull1 + 1));
   lastBull3 = lastBull2 + (getStepsLastBull(1,lastBull2 + 1));
   lastBull4 = lastBull3 + (getStepsLastBull(1,lastBull3 + 1));
   lastBull5 = lastBull4 + (getStepsLastBull(1,lastBull4 + 1));
   lastBull6 = lastBull5 + (getStepsLastBull(1,lastBull5 + 1));
   lastBull7 = lastBull6 + (getStepsLastBull(1,lastBull6 + 1));
   lastBull8 = lastBull7 + (getStepsLastBull(1,lastBull7 + 1));
   lastBull9 = lastBull8 + (getStepsLastBull(1,lastBull8 + 1));
   lastBull10 = lastBull9 + (getStepsLastBull(1,lastBull9 + 1));

// Price History Trends
//   isPriceGoingUp = getPriceHistory(0) > getPriceHistory(1) && getPriceHistory(1) > getPriceHistory(2) && getPriceHistory(2) > getPriceHistory(3) && getPriceHistory(3) != 0;
//   isPriceGoingUpx2 = (isPriceGoingUp && getPriceHistory(3) > getPriceHistory(4) && getPriceHistory(4) > getPriceHistory(5) && getPriceHistory(5) > getPriceHistory(6) && getPriceHistory(6) != 0) || rsiVelocity > 10 || priceVelocity > 2;
//
//   isPriceGoingDown = getPriceHistory(0) < getPriceHistory(1) && getPriceHistory(1) < getPriceHistory(2) && getPriceHistory(2) < getPriceHistory(3) && getPriceHistory(3) != 0;
//   isPriceGoingDownx2 = (isPriceGoingDown && getPriceHistory(3) < getPriceHistory(4) && getPriceHistory(4) < getPriceHistory(5) && getPriceHistory(5) < getPriceHistory(6) && getPriceHistory(6) != 0) || rsiVelocity < -10 || priceVelocity < -2;
//
//   canTakeMoreSellOrders = calculateNewSELLOrders() < calculateMaxOrders(OP_SELL);
//   canTakeMoreBuyOrders = calculateNewBUYOrders() < calculateMaxOrders(OP_BUY);
//
//   SYMBOL_BUY_Profit = NormalizeDouble(calculateBuyOrdersProfit(),2);
//   SYMBOL_BUY_HODL_Profit = NormalizeDouble(calculateBuyHODLOrdersProfit(),2);
//   SYMBOL_SELL_Profit = NormalizeDouble(calculateSellOrdersProfit(),2);
//   SYMBOL_SELL_HODL_Profit = NormalizeDouble(calculateSellHODLOrdersProfit(),2);

   isMarketRanging = (
                        ((rsiVelocity > 0 && rsiVelocity < 3) || (rsiVelocity < 0 && rsiVelocity > -3))
                        || ((isThisBarBULLISH(5) && isThisBarBEARISH(5,1) && getBarSize(5,1) > 5)
                            || (isThisBarBEARISH(5) && isThisBarBULLISH(5,1) && getBarSize(5,1) > 5))
                        || ((isThisBarBULLISH(15) && isThisBarBEARISH(15,1) && getBarSize(15,1) > 5)
                            || (isThisBarBEARISH(15) && isThisBarBULLISH(15,1) && getBarSize(15,1) > 5))

                     );

   isMarketTrending = true;
   isMarketTrendingUp = isMarketTrending && true;
   isMarketTrendingDown = isMarketTrending && true;

//if(clock.sec % 30 == 0) // every x seconds
//  {
//   Alert("IsRanging ",isMarketRanging);
//   Alert("IsTrending ",isMarketTrending);
//   Alert("IsTrendingUp ",isMarketTrendingUp);
//   Alert("IsTrendingDown ",isMarketTrendingDown);
//  }
//Print("rsiVelocity ", rsiVelocity, " priceVelocity ",priceVelocity);
//Print("Buy Profit ",SYMBOL_BUY_Profit);
//Print("Buy HODL Profit ",SYMBOL_BUY_HODL_Profit);
//Print("Sell Profit ",SYMBOL_SELL_Profit);
//Print("Sell HODL Profit ",SYMBOL_SELL_HODL_Profit);
//Print(howClosetoLow_1_10, " ", howClosetoHigh_1_10, " How Close_1_10 for low/high", _Symbol);
//Print(howClosetoLow_5_10, " ", howClosetoHigh_5_10, " How Close_5_10 for low/high", _Symbol);
//Print(howClosetoLow, " ", howClosetoHigh, " How Close for low/high", _Symbol);
//Print(howClosetoLow_5, " ", howClosetoHigh_5, " How Close_5 for low/high", _Symbol);
//Print(howClosetoLow_60, " ", howClosetoHigh_60, " How Close_60 for low/high", _Symbol);
//Print(howClosetoLow_240, " ", howClosetoHigh_240, " How Close_240 for low/high", _Symbol);
//Print(howClosetoLow_999, " ", howClosetoHigh_999, " How Close_999 for low/high", _Symbol);
//Print(allMADown(), " ", allMAUp(), " ma down up ");
//Print(getBarSize(15), " getBarSize15 ", getBarSize(15,1), " getBarSize15,1");
//Print(getBarSize(5), " getBarSize5 ", getBarSize(5,1), " getBarSize5,1");
//Print(getBarSize(1), " getBarSize1 ", getBarSize(1,1), " getBarSize1,1");
//Print(getPriceHistory(0), " 1: ", getPriceHistory(1), " 5: ", getPriceHistory(5), " 10: ", getPriceHistory(10), " 20: ", getPriceHistory(20), " 60: ", getPriceHistory(60)," priceHistory ", "diff ",getPriceHistoryDiff());
//Print(getRSI1History(0), " ", getRSI1History(1), " ", getRSI1History(2), " rsihistory1");
//Print("5min: ",priceDiff5Min, " 15min: ", priceDiff15Min, " 30min: ",priceDiff30Min, " 1hr: ", priceDiff1Hr, " 4hr: ",priceDiff4Hr, " 1day: ",priceDiff1Day);

   double slopeM1 = NormalizeDouble(currentPrice - iClose(_Symbol,PERIOD_M1,1),3);
   double slopeM5 = NormalizeDouble((currentPrice - iClose(_Symbol,PERIOD_M5,1) / 5)/currentPrice,5);
   double slopeM15 = NormalizeDouble((currentPrice - iClose(_Symbol,PERIOD_M15,1) / 15)/currentPrice,5);
   double slopeM30 = NormalizeDouble((currentPrice - iClose(_Symbol,PERIOD_M30,1) / 30)/currentPrice,5);
   double slopeH1 = NormalizeDouble((currentPrice - iClose(_Symbol,PERIOD_H1,1) / 60)/currentPrice,5);
   double slopeH4 = NormalizeDouble((currentPrice - iClose(_Symbol,PERIOD_H4,1) / 240)/currentPrice,5);
   double slopeD1 = NormalizeDouble((currentPrice - iClose(_Symbol,PERIOD_D1,1) / 1440)/currentPrice,5);
//  isMA200Up = getMA_1_200() - currentPrice > 3;

//   if(slopeM1 > 1.2)
//     {
//      Alert("Slope M1 :",slopeM1);
//      deleteAllPendingSellLimit();
//     }
//
//   if(slopeM1 < -1.2)
//     {
//      Alert("Slope M1 :",slopeM1);
//      deleteAllPendingBuyLimit();
//     }
//
//   Print("Slope M1 :",slopeM1);
//   Print("Slope M5 :",slopeM5);
//   Print("Slope M15 :",slopeM15);
//   Print("Slope M30 :",slopeM30);
//   Print("Slope H1 :",slopeH1);
//   Print("Slope H4 :",slopeH4);
//   Print("Slope D1 :",slopeD1);


//   if(MathAbs(getPriceHistoryDiff()) >= 3)
//     {
//      Alert("diff ", getPriceHistoryDiff());
//     }
//
//   if(MathAbs(getPriceHistoryDiff()) >= 3)
//     {
//      SendNotification("diff "+ getPriceHistoryDiff());
//     }

// check pending orders
   if(calculateBuyOrders() >= 1 && (AccountInfoDouble(ACCOUNT_PROFIT) < -300 || AccountInfoDouble(ACCOUNT_EQUITY) < 500))
     {
      deleteAllPendingBuyLimit();
     }

   if(calculateSellOrders() >= 1 && (AccountInfoDouble(ACCOUNT_PROFIT) < -300 || AccountInfoDouble(ACCOUNT_EQUITY) < 500))
     {
      deleteAllPendingSellLimit();
     }

   percClose_999 = (percdiff_signed(howClosetoLow_999+0.001, howClosetoHigh_999+0.001));
   percClose_240 = (percdiff_signed(howClosetoLow_240+0.001, howClosetoHigh_240+0.001));
   percClose_60 = (percdiff_signed(howClosetoLow_60+0.001, howClosetoHigh_60+0.001));
   percClose_30 = (percdiff_signed(howClosetoLow_30+0.001, howClosetoHigh_30+0.001));
   percClose_15 = (percdiff_signed(howClosetoLow_15+0.001, howClosetoHigh_15+0.001));
   percClose_5 = (percdiff_signed(howClosetoLow_5+0.001, howClosetoHigh_5+0.001));
   percClose = (percdiff_signed(howClosetoLow+0.001, howClosetoHigh+0.001));
   isBoomTrendingDown = (isThisBarBEARISH(60) && (getBarSize(60) > 100 || ((getBarSize(240) > 600 || getBarSize(999) > 3000) && getBarSize(999) > 2000)) && isThisBarBEARISH(240) && (getBarSize(240) > 200 || getBarSize(999) > 3000) && isThisBarBEARISH(999) && getBarSize(999) > 1000 &&  howClosetoLow_999 - howClosetoHigh_999 > 800) || (percClose_999 > 70 && percClose_240 > 50 && percClose_60 > 50 && percClose > 20);

// Check if RSI is below 30
   if(getRSI_1_14() < 30)
     {
      rsiBelow30 = true;
      shouldAllowFromRSI = false;
      shouldAllowFromBEAR = false;
     }

   if(getRSI_5_14() < 30)
     {
      rsi5Below30 = true;
      shouldAllowFromRSI5 = false;
      shouldAllowFromBEAR = false;
     }

   if(getRSI_5_14() < 20)
     {
      // for a very low scenario, also bring the 1 minute along
      rsi5Below30 = true;
      rsi5Below20 = true;
      rsiBelow30 = true;
      shouldAllowFromRSI5 = false;
      shouldAllowFromRSI = false;
     }

   if(getRSI_15_14() < 30)
     {
      rsi15Below30 = true;
      shouldAllowFromRSI15 = false;
     }

   if(getRSI_30_14() < 30)
     {
      rsi30Below30 = true;
      shouldAllowFromRSI30 = false;
     }

   if(getRSI_60_14() < 30)
     {
      rsi60Below30 = true;
      shouldAllowFromRSI60 = false;
     }

   if(getRSI_240_14() < 30)
     {
      rsi240Below30 = true;
      shouldAllowFromRSI240 = false;
     }


// Check if each RSI goes above 75 after being below 30
   if(rsiBelow30 && getRSI_1_14() > 70)// && !rsi5Below20)
     {
      shouldAllowFromRSI = true;
      rsiBelow30 = false;
     }

   if(rsi5Below30 && getRSI_5_14() > 70)
     {
      shouldAllowFromRSI5 = true;
      rsi5Below30 = false;
     }

   if(rsi5Below20 && getRSI_5_14() > 70)
     {
      shouldAllowFromRSI5 = true;
      rsiBelow30 = false;
      rsi5Below30 = false;
      rsi5Below20 = false;
     }

   if(shouldAllowFromRSI5 && getRSI_1_14() > 30)
     {
      shouldAllowFromRSI = true;
     }


// Others
   if(rsi15Below30 && getRSI_15_14() > 70)
     {
      shouldAllowFromRSI15 = true;
      rsi15Below30 = false;
     }

   if(rsi30Below30 && getRSI_30_14() > 70)
     {
      shouldAllowFromRSI30 = true;
      rsi30Below30 = false;
     }

   if(rsi60Below30 && getRSI_60_14() > 70)
     {
      shouldAllowFromRSI60 = true;
      rsi60Below30 = false;
     }

   if(rsi240Below30 && getRSI_240_14() > 70)
     {
      shouldAllowFromRSI240 = true;
      rsi240Below30 = false;
     }

// Check if shouldAllowFromBEAR
   if(shouldAllowFromRSI || shouldAllowFromRSI5)
     {

      if(isThisBarBEARISH(15) || isThisBarBEARISH(30) || isThisBarBEARISH(60))
        {
         shouldAllowFromBEAR = true;
        }
     }
  }
//+------------------------------------------------------------------+

//+------------------------------------------------------------------+

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
double getLastPrice()
  {
   if(priceLast==0)
      return currentPrice;
   return priceLast;
  }


/** BEGIN ORDERS LOGIC **/
//+------------------------------------------------------------------+
//| Check for open order conditions                                  |
//+------------------------------------------------------------------+

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
bool priceGoingUp()
  {
   if(currentPrice>getLastPrice() && calculateSellOrders() > 0)
     {
      Alert("*******BOOM!******* ",Symbol()," ",currentBearP_1, " ",currentBullP_1," Tick Count: ",tickCount, " RSI ",currentRSI_1_14, " ", getBarSize(1,(getStepsLastBull(1)-1)));
      SendNotification("*******BOOM!******* "+Symbol()+" "+currentBearP_1+ " "+currentBullP_1+" Tick Count: "+tickCount+ " RSI "+currentRSI_1_14+ " "+ getBarSize(1,(getStepsLastBull(1)-1)));
      num=1;
      tickCount=0;
      xnotify=0;
      deletePendingScalp();
      deletePendingHODL();
      return true;
     }
   return false;
  }



//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void CheckLevels_AFTER()
  {
   currentRSI_1_14 = getRSI_1_14();
  }
//+------------------------------------------------------------------+


//+------------------------------------------------------------------+
//| Calculate optimal lot size                                       |
//+------------------------------------------------------------------+
double lotSells()
  {
   double lot = MathMin(MathMax(NormalizeDouble(AccountBalance() / 3000,1),1),MathMax(NormalizeDouble(AccountBalance() / 1500,1),0.4));

   if(steps > 3)
     {
      lot = MathMin(MathMax(NormalizeDouble(AccountBalance() / 6000,1),0.5),MathMax(NormalizeDouble(AccountBalance() / 2000,1),0.3));
     }

   if((steps > 5)
// && (percdiff(currentPrice, priceHighest_M1) > 5 || lowestPrice3Day_diff < 7.5)
     )
     {
      lot = MathMin(MathMax(NormalizeDouble(AccountBalance() / 7500,1),0.4),MathMax(NormalizeDouble(AccountBalance() / 2000,1),0.2));
     }


   if(getMA_15() > currentHigh_M15
      && isThisBarBEARISH()
      && isThisBarBEARISH(5)
      && isThisBarBEARISH(15)
      && isThisBarBEARISH(30)
      && isThisBarBEARISH(60)
      && isThisBarBEARISH(240)
      && isThisBarBEARISH(999)
     )
     {
      lot = MathMax(NormalizeDouble(AccountBalance() / 3000,1),0.5);
      if(steps > 3)
        {
         lot = MathMax(NormalizeDouble(AccountBalance() / 1000,1),0.25);
        }
      if(MAStatus_15_200 == "ABOVE"
         && percdiff(priceLowest_M1, currentPrice) > 3)
         lot=NormalizeDouble(lot*1.0,1);
     }


   if(lot > 5) // MAX Lots
     {
      lot = 5;
     }

   if(lot< 0.2) // MIN Lots
     {
      lot = 0.2;
     }
   lot=5;
   if(
      (getMA_30() < iHigh(_Symbol, PERIOD_M30, 0) && !(isThisBarBEARISH(30, 0)) && (!(isThisBarBEARISH(60)) || !(isThisBarBEARISH(240))))
      || (getMA_30() < iHigh(_Symbol, PERIOD_M30, 1) && !(isThisBarBEARISH(30, 1)) && (!(isThisBarBEARISH(60)) || !(isThisBarBEARISH(240))))
      || (getMA_30() < iHigh(_Symbol, PERIOD_M30, 2) && !(isThisBarBEARISH(30,2)) && (!(isThisBarBEARISH(60)) || !(isThisBarBEARISH(240))))
      || (getMA_15() < iHigh(_Symbol, PERIOD_M15, 1) && !(isThisBarBEARISH(15,1)) && (!(isThisBarBEARISH(60)) || !(isThisBarBEARISH(240))))
      || (getMA_15() < iHigh(_Symbol, PERIOD_M15, 2) && !(isThisBarBEARISH(15,2)) && (!(isThisBarBEARISH(60)) || !(isThisBarBEARISH(240))))
      || (getMA_15_20() < (currentLow_M15 + (gapCheck * Point)))
      || (getMA_30() < (currentLow_M30 + (gapCheck * Point)))
      || (getRSI_1_14() < 20)
//     || getMA_30() < iHigh(_Symbol, PERIOD_M30, 3)
   )
     {
      lot = 0.2;
     }
   return(lot);

  }


//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
double lotBuys(int divider)
  {
   double lot = MathMax(NormalizeDouble(AccountBalance() / divider,1),0.2);

   if(lot > 50) // MAX Lots
     {
      lot = 50;
     }

   if(lot< 0.2) // MIN Lots
     {
      lot = 0.2;
     }

   return(lot);

  }
//+------------------------------------------------------------------+

//+------------------------------------------------------------------+
